
Fingertip_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a830  0800a830  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a830  0800a830  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a830  0800a830  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a830  0800a830  0001a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000d70  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000de8  20000de8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021bbb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004190  00000000  00000000  00041c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  00045df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  000475b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027644  00000000  00000000  00048ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f249  00000000  00000000  000701e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1357  00000000  00000000  0008f42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160784  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ce8  00000000  00000000  001607d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a698 	.word	0x0800a698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a698 	.word	0x0800a698

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <_ZN11ForceSensorC1Ev>:
#include "ForceSensor.h"
#include "math_ops.h"

ForceSensor::ForceSensor(){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

    // initialize other values
    sensor_comp = 1; //| uint8_t(1<<1); // sensor_comp = BMP3_PRESS | BMP3_TEMP;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    
    }
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_ZN11ForceSensor10InitializeEv>:
    
void ForceSensor::Initialize(){     
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    
	// configure sensor devices
	// start with writing all CS pins high
	writeHigh(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f002 f812 	bl	8002b8c <_Z9writeHighh>
	writeHigh(2);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f002 f80f 	bl	8002b8c <_Z9writeHighh>
	writeHigh(3);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f002 f80c 	bl	8002b8c <_Z9writeHighh>
	writeHigh(4);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f002 f809 	bl	8002b8c <_Z9writeHighh>
	writeHigh(5);
 8000b7a:	2005      	movs	r0, #5
 8000b7c:	f002 f806 	bl	8002b8c <_Z9writeHighh>
	writeHigh(6);
 8000b80:	2006      	movs	r0, #6
 8000b82:	f002 f803 	bl	8002b8c <_Z9writeHighh>
	writeHigh(7);
 8000b86:	2007      	movs	r0, #7
 8000b88:	f002 f800 	bl	8002b8c <_Z9writeHighh>
	writeHigh(8);
 8000b8c:	2008      	movs	r0, #8
 8000b8e:	f001 fffd 	bl	8002b8c <_Z9writeHighh>

	//printf("Initializing force sensor.\n\r");

	s1.dev_id = 1;  // tells which cs pin associated with device
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
	config_dev(&s1);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f852 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s2.dev_id = 2;  // tells which cs pin associated with device
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2202      	movs	r2, #2
 8000bac:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
	config_dev(&s2);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f847 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s3.dev_id = 3;  // tells which cs pin associated with device
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
	config_dev(&s3);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f83c 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s4.dev_id = 4;  // tells which cs pin associated with device
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
	config_dev(&s4);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f831 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s5.dev_id = 5;  // tells which cs pin associated with device
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2205      	movs	r2, #5
 8000bee:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
	config_dev(&s5);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f826 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s6.dev_id = 6;  // tells which cs pin associated with device
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2206      	movs	r2, #6
 8000c04:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
	config_dev(&s6);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f81b 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s7.dev_id = 7;  // tells which cs pin associated with device
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2207      	movs	r2, #7
 8000c1a:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
	config_dev(&s7);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f810 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>
	s8.dev_id = 8;  // tells which cs pin associated with device
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2208      	movs	r2, #8
 8000c30:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
	config_dev(&s8);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f805 	bl	8000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <_ZN11ForceSensor10config_devEP8bmp3_dev>:
    
    
void ForceSensor::config_dev(struct bmp3_dev *dev){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    
	int8_t rslt=0;//BMP3_OK; // get error with rslt = BMP3_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

    dev -> intf = BMP3_SPI_INTF;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	709a      	strb	r2, [r3, #2]
    dev -> read = &bmp_spi1_read;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <_ZN11ForceSensor10config_devEP8bmp3_dev+0x9c>)
 8000c64:	605a      	str	r2, [r3, #4]
    dev -> write = &bmp_spi1_write;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <_ZN11ForceSensor10config_devEP8bmp3_dev+0xa0>)
 8000c6a:	609a      	str	r2, [r3, #8]

    dev -> delay_ms = &bmp_delay_ms;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <_ZN11ForceSensor10config_devEP8bmp3_dev+0xa4>)
 8000c70:	60da      	str	r2, [r3, #12]
    rslt = bmp3_init(dev);
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f000 fb4e 	bl	8001314 <bmp3_init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
    //printf("* initialize sensor result = 0x%x *\r\n", rslt);
    HAL_Delay(250);
 8000c7c:	20fa      	movs	r0, #250	; 0xfa
 8000c7e:	f003 fc37 	bl	80044f0 <HAL_Delay>
    // ODR = 200Hz temp, press
    // IRR = no IRR filter
    // ^^^all 4 above =  bmp3_set_sensor_settings

    // Set sensor settings (press en, temp en, OSR, ODR, IRR)
    dev -> settings.press_en = 0x01; // BMP3_ENABLE
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    dev -> settings.temp_en = 0x01; //BMP3_ENABLE
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    dev -> settings.odr_filter.press_os = 0x00; //BMP3_NO_OVERSAMPLING
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
    dev -> settings.odr_filter.temp_os = 0x00; //BMP3_NO_OVERSAMPLING
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    dev -> settings.odr_filter.odr = 0x00; //BMP3_ODR_200_HZ
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    dev -> settings.odr_filter.iir_filter = 0x00; //BMP3_IIR_Filter_disable
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

    uint16_t settings_sel;
    //settings_sel = BMP3_PRESS_EN_SEL | BMP3_TEMP_EN_SEL | BMP3_PRESS_OS_SEL | BMP3_TEMP_OS_SEL | BMP3_IIR_FILTER_SEL | BMP3_ODR_SEL;
    settings_sel = uint16_t(1 << 1) | uint16_t(1 << 2) | uint16_t(1 << 4) | uint16_t(1 << 5) | uint16_t(1 << 6) | uint16_t(1 << 7);
 8000cb2:	23f6      	movs	r3, #246	; 0xf6
 8000cb4:	81bb      	strh	r3, [r7, #12]
    //settings_sel = uint16_t(1 << 1) | uint16_t(1 << 2);
    rslt = bmp3_set_sensor_settings(settings_sel, dev);
 8000cb6:	89bb      	ldrh	r3, [r7, #12]
 8000cb8:	6839      	ldr	r1, [r7, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fc83 	bl	80015c6 <bmp3_set_sensor_settings>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73fb      	strb	r3, [r7, #15]

    // Set operating (power) mode
    dev -> settings.op_mode = 0x03; /// normal mode = 0x03
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    rslt = bmp3_set_op_mode(dev);
 8000ccc:	6838      	ldr	r0, [r7, #0]
 8000cce:	f000 fd4a 	bl	8001766 <bmp3_set_op_mode>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]

    // Check settings
    rslt = bmp3_get_sensor_settings(dev);
 8000cd6:	6838      	ldr	r0, [r7, #0]
 8000cd8:	f000 fccb 	bl	8001672 <bmp3_get_sensor_settings>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08002c41 	.word	0x08002c41
 8000cec:	08002c91 	.word	0x08002c91
 8000cf0:	08002d11 	.word	0x08002d11

08000cf4 <_ZN11ForceSensor6SampleEv>:
    
void ForceSensor::Sample(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
//	for(int i = 0;i<8;i++){
//		raw_data[i] = pressure_raw[i];
//	}
    
	// get data from every sensor
	bmp3_get_sensor_data(sensor_comp, &data1, &s1);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f503 6112 	add.w	r1, r3, #2336	; 0x920
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f000 fd8e 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data2, &s2);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f503 6113 	add.w	r1, r3, #2352	; 0x930
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8000d26:	461a      	mov	r2, r3
 8000d28:	f000 fd82 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data3, &s3);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f503 6114 	add.w	r1, r3, #2368	; 0x940
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8000d3e:	461a      	mov	r2, r3
 8000d40:	f000 fd76 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data4, &s4);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f503 6115 	add.w	r1, r3, #2384	; 0x950
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8000d56:	461a      	mov	r2, r3
 8000d58:	f000 fd6a 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data5, &s5);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f503 6116 	add.w	r1, r3, #2400	; 0x960
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f000 fd5e 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data6, &s6);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f503 6117 	add.w	r1, r3, #2416	; 0x970
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8000d86:	461a      	mov	r2, r3
 8000d88:	f000 fd52 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data7, &s7);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f503 6118 	add.w	r1, r3, #2432	; 0x980
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f000 fd46 	bl	8001830 <bmp3_get_sensor_data>
	bmp3_get_sensor_data(sensor_comp, &data8, &s8);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f503 6119 	add.w	r1, r3, #2448	; 0x990
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000db6:	461a      	mov	r2, r3
 8000db8:	f000 fd3a 	bl	8001830 <bmp3_get_sensor_data>

	// store data
	raw_data[0] = int(data1.pressure)-100000; // pressure is returned in Pa, could subtract actual sea level pressure here
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8000dc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fe1f 	bl	8000a0c <__aeabi_d2iz>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000dd4:	3ba0      	subs	r3, #160	; 0xa0
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6053      	str	r3, [r2, #4]
	raw_data[1] = int(data2.pressure)-100000;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8000de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fe10 	bl	8000a0c <__aeabi_d2iz>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000df2:	3ba0      	subs	r3, #160	; 0xa0
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6093      	str	r3, [r2, #8]
	raw_data[2] = int(data3.pressure)-100000;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8000dfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f7ff fe01 	bl	8000a0c <__aeabi_d2iz>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000e10:	3ba0      	subs	r3, #160	; 0xa0
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	60d3      	str	r3, [r2, #12]
	raw_data[3] = int(data4.pressure)-100000;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8000e1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fdf2 	bl	8000a0c <__aeabi_d2iz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000e2e:	3ba0      	subs	r3, #160	; 0xa0
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6113      	str	r3, [r2, #16]
	raw_data[4] = int(data5.pressure)-100000;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8000e3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fde3 	bl	8000a0c <__aeabi_d2iz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000e4c:	3ba0      	subs	r3, #160	; 0xa0
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6153      	str	r3, [r2, #20]
	raw_data[5] = int(data6.pressure)-100000;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8000e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fdd4 	bl	8000a0c <__aeabi_d2iz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000e6a:	3ba0      	subs	r3, #160	; 0xa0
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6193      	str	r3, [r2, #24]
	raw_data[6] = int(data7.pressure)-100000;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8000e76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fdc5 	bl	8000a0c <__aeabi_d2iz>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000e88:	3ba0      	subs	r3, #160	; 0xa0
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	61d3      	str	r3, [r2, #28]
	raw_data[7] = int(data8.pressure)-100000;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8000e94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fdb6 	bl	8000a0c <__aeabi_d2iz>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000ea6:	3ba0      	subs	r3, #160	; 0xa0
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6213      	str	r3, [r2, #32]

    // could combine this with previous step
    offset_data[0] = raw_data[0]-offsets[0];
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    offset_data[1] = raw_data[1]-offsets[1];
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	1ad2      	subs	r2, r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	649a      	str	r2, [r3, #72]	; 0x48
    offset_data[2] = raw_data[2]-offsets[2];
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    offset_data[3] = raw_data[3]-offsets[3];
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	651a      	str	r2, [r3, #80]	; 0x50
    offset_data[4] = raw_data[4]-offsets[4];
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	1ad2      	subs	r2, r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
    offset_data[5] = raw_data[5]-offsets[5];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58
    offset_data[6] = raw_data[6]-offsets[6];
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f08:	1ad2      	subs	r2, r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	65da      	str	r2, [r3, #92]	; 0x5c
    offset_data[7] = raw_data[7]-offsets[7];
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	1ad2      	subs	r2, r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
    
    
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN7VL6180XD1Ev>:

// Define some additional registers mentioned in application notes and we use
///! period between each measurement when in continuous mode
#define SYSRANGE__INTERMEASUREMENT_PERIOD 0x001b // P19 application notes

VL6180X::~VL6180X() {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

}
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_ZN7VL6180XC1Ei>:
    @brief  Instantiates a new VL6180X class
    @param  i2caddr Optional initial i2c address of the chip,
   VL6180X_DEFAULT_I2C_ADDR is used by default
*/
/**************************************************************************/
VL6180X::VL6180X(int i2caddr) : _i2caddr(i2caddr) {}
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>:
   chip.
    @param  theWire Optional pointer to I2C interface, &Wire is used by default
    @returns True if chip found and initialized, False otherwise
*/
/**************************************************************************/
bool VL6180X::begin(I2C_HandleTypeDef *new_i2c) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  // only needed to support setAddress()
  _i2c = new_i2c;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	601a      	str	r2, [r3, #0]

  // check for expected model id
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f979 	bl	8001262 <_ZN7VL6180X5read8Et>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2bb4      	cmp	r3, #180	; 0xb4
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef+0x2c>
    return false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e016      	b.n	8000fb2 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef+0x5a>
  }

  // fresh out of reset?
  if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8000f84:	2116      	movs	r1, #22
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f96b 	bl	8001262 <_ZN7VL6180X5read8Et>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef+0x58>
    loadSettings();
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f81f 	bl	8000fe4 <_ZN7VL6180X12loadSettingsEv>
    write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2116      	movs	r1, #22
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f98d 	bl	80012ca <_ZN7VL6180X6write8Eth>
  }

  return true;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_ZN7VL6180X13setNewAddressEh>:
    @brief  sets a new address of the device
   chip.
    @returns the new address
*/
/**************************************************************************/
uint8_t VL6180X::setNewAddress(uint8_t new_addr) {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	70fb      	strb	r3, [r7, #3]
    // set new address
    write8(0x0212, new_addr);
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f240 2112 	movw	r1, #530	; 0x212
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f97b 	bl	80012ca <_ZN7VL6180X6write8Eth>

    // could confirm by reading new address from device?
    _i2caddr = new_addr;
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	605a      	str	r2, [r3, #4]
    return new_addr;
 8000fda:	78fb      	ldrb	r3, [r7, #3]

    }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN7VL6180X12loadSettingsEv>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X::loadSettings(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  write8(0x0207, 0x01);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f240 2107 	movw	r1, #519	; 0x207
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f969 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0208, 0x01);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f963 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0096, 0x00);
 8001004:	2200      	movs	r2, #0
 8001006:	2196      	movs	r1, #150	; 0x96
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f95e 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0097, 0xfd);
 800100e:	22fd      	movs	r2, #253	; 0xfd
 8001010:	2197      	movs	r1, #151	; 0x97
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f959 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00e3, 0x00);
 8001018:	2200      	movs	r2, #0
 800101a:	21e3      	movs	r1, #227	; 0xe3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f954 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00e4, 0x04);
 8001022:	2204      	movs	r2, #4
 8001024:	21e4      	movs	r1, #228	; 0xe4
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f94f 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00e5, 0x02);
 800102c:	2202      	movs	r2, #2
 800102e:	21e5      	movs	r1, #229	; 0xe5
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f94a 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00e6, 0x01);
 8001036:	2201      	movs	r2, #1
 8001038:	21e6      	movs	r1, #230	; 0xe6
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f945 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00e7, 0x03);
 8001040:	2203      	movs	r2, #3
 8001042:	21e7      	movs	r1, #231	; 0xe7
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f940 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00f5, 0x02);
 800104a:	2202      	movs	r2, #2
 800104c:	21f5      	movs	r1, #245	; 0xf5
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f93b 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00d9, 0x05);
 8001054:	2205      	movs	r2, #5
 8001056:	21d9      	movs	r1, #217	; 0xd9
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f936 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00db, 0xce);
 800105e:	22ce      	movs	r2, #206	; 0xce
 8001060:	21db      	movs	r1, #219	; 0xdb
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f931 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00dc, 0x03);
 8001068:	2203      	movs	r2, #3
 800106a:	21dc      	movs	r1, #220	; 0xdc
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f92c 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00dd, 0xf8);
 8001072:	22f8      	movs	r2, #248	; 0xf8
 8001074:	21dd      	movs	r1, #221	; 0xdd
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f927 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x009f, 0x00);
 800107c:	2200      	movs	r2, #0
 800107e:	219f      	movs	r1, #159	; 0x9f
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f922 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00a3, 0x3c);
 8001086:	223c      	movs	r2, #60	; 0x3c
 8001088:	21a3      	movs	r1, #163	; 0xa3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f91d 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00b7, 0x00);
 8001090:	2200      	movs	r2, #0
 8001092:	21b7      	movs	r1, #183	; 0xb7
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f918 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00bb, 0x3c);
 800109a:	223c      	movs	r2, #60	; 0x3c
 800109c:	21bb      	movs	r1, #187	; 0xbb
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f913 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00b2, 0x09);
 80010a4:	2209      	movs	r2, #9
 80010a6:	21b2      	movs	r1, #178	; 0xb2
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f90e 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00ca, 0x09);
 80010ae:	2209      	movs	r2, #9
 80010b0:	21ca      	movs	r1, #202	; 0xca
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f909 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0198, 0x01);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f903 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x01b0, 0x17);
 80010c4:	2217      	movs	r2, #23
 80010c6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f8fd 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x01ad, 0x00);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f240 11ad 	movw	r1, #429	; 0x1ad
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f8f7 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x00ff, 0x05);
 80010dc:	2205      	movs	r2, #5
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f8f2 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0100, 0x05);
 80010e6:	2205      	movs	r2, #5
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f8ec 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0199, 0x05);
 80010f2:	2205      	movs	r2, #5
 80010f4:	f240 1199 	movw	r1, #409	; 0x199
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f8e6 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x01a6, 0x1b);
 80010fe:	221b      	movs	r2, #27
 8001100:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f8e0 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x01ac, 0x3e);
 800110a:	223e      	movs	r2, #62	; 0x3e
 800110c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f8da 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x01a7, 0x1f);
 8001116:	221f      	movs	r2, #31
 8001118:	f240 11a7 	movw	r1, #423	; 0x1a7
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f8d4 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x0030, 0x00);
 8001122:	2200      	movs	r2, #0
 8001124:	2130      	movs	r1, #48	; 0x30
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f8cf 	bl	80012ca <_ZN7VL6180X6write8Eth>

  // Recommended : Public registers - See data sheet for more detail
  write8(0x0011, 0x10); // Enables polling for 'New Sample ready'
 800112c:	2210      	movs	r2, #16
 800112e:	2111      	movs	r1, #17
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f8ca 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // when measurement completes
  write8(0x010a, 0x30); // Set the averaging sample period
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f8c4 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // (compromise between lower noise and
                        // increased execution time)
  write8(0x003f, 0x46); // Sets the light and dark gain (upper
 8001142:	2246      	movs	r2, #70	; 0x46
 8001144:	213f      	movs	r1, #63	; 0x3f
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f8bf 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // nibble). Dark gain should not be
                        // changed.
  write8(0x0031, 0xFF); // sets the # of range measurements after
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	2131      	movs	r1, #49	; 0x31
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f8ba 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // which auto calibration of system is
                        // performed
  write8(0x0041, 0x63); // Set ALS integration time to 100ms
 8001156:	2263      	movs	r2, #99	; 0x63
 8001158:	2141      	movs	r1, #65	; 0x41
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8b5 	bl	80012ca <_ZN7VL6180X6write8Eth>
  write8(0x002e, 0x01); // perform a single temperature calibration
 8001160:	2201      	movs	r2, #1
 8001162:	212e      	movs	r1, #46	; 0x2e
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f8b0 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD,
 800116a:	2209      	movs	r2, #9
 800116c:	211b      	movs	r1, #27
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f8ab 	bl	80012ca <_ZN7VL6180X6write8Eth>
         0x09);         // Set default ranging inter-measurement
                        // period to 100ms
  write8(0x003e, 0x31); // Set default ALS inter-measurement period
 8001174:	2231      	movs	r2, #49	; 0x31
 8001176:	213e      	movs	r1, #62	; 0x3e
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f8a6 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // to 500ms
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2114      	movs	r1, #20
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f8a1 	bl	80012ca <_ZN7VL6180X6write8Eth>
                        // Ready threshold event'
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN7VL6180X15isRangeCompleteEv>:
    @brief  Check to see if the range command completed.
    @return true if range completed.
*/
/**************************************************************************/

bool VL6180X::isRangeComplete(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  // Poll until bit 2 is set
  if ((read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 8001198:	214f      	movs	r1, #79	; 0x4f
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f861 	bl	8001262 <_ZN7VL6180X5read8Et>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <_ZN7VL6180X15isRangeCompleteEv+0x28>
    return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <_ZN7VL6180X15isRangeCompleteEv+0x2a>

  return false;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZN7VL6180X15readRangeResultEv>:
    the return value!
    @return if range started.
*/
/**************************************************************************/

uint8_t VL6180X::readRangeResult(void) {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]

  // read range in mm
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 80011ca:	2162      	movs	r1, #98	; 0x62
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f848 	bl	8001262 <_ZN7VL6180X5read8Et>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 80011d6:	2207      	movs	r2, #7
 80011d8:	2115      	movs	r1, #21
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f875 	bl	80012ca <_ZN7VL6180X6write8Eth>

  return range;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <_ZN7VL6180X20startRangeContinuousEt>:
    @param  period_ms Optional Period between ranges in ms.  Values will
    be rounded down to 10ms units with minimum of 10ms.  Default is 50
*/
/**************************************************************************/

void VL6180X::startRangeContinuous(uint16_t period_ms) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  uint8_t period_reg = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
  if (period_ms > 10) {
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d910      	bls.n	8001224 <_ZN7VL6180X20startRangeContinuousEt+0x38>
    if (period_ms < 2550)
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8001208:	4293      	cmp	r3, r2
 800120a:	d809      	bhi.n	8001220 <_ZN7VL6180X20startRangeContinuousEt+0x34>
      period_reg = (period_ms / 10) - 1;
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <_ZN7VL6180X20startRangeContinuousEt+0x58>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e001      	b.n	8001224 <_ZN7VL6180X20startRangeContinuousEt+0x38>
    else
      period_reg = 254;
 8001220:	23fe      	movs	r3, #254	; 0xfe
 8001222:	73fb      	strb	r3, [r7, #15]
  }
  // Set  ranging inter-measurement
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD, period_reg);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	461a      	mov	r2, r3
 8001228:	211b      	movs	r1, #27
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f84d 	bl	80012ca <_ZN7VL6180X6write8Eth>

  // Start a continuous range measurement
  write8(VL6180X_REG_SYSRANGE_START, 0x03);
 8001230:	2203      	movs	r2, #3
 8001232:	2118      	movs	r1, #24
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f848 	bl	80012ca <_ZN7VL6180X6write8Eth>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	cccccccd 	.word	0xcccccccd

08001248 <_ZN7VL6180X13readRangeModeEv>:
    @brief  Request current ranging mode state
    @returns SYSRANGE_START register value
*/
/**************************************************************************/

uint8_t VL6180X::readRangeMode(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    return read8(VL6180X_REG_SYSRANGE_START);
 8001250:	2118      	movs	r1, #24
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f805 	bl	8001262 <_ZN7VL6180X5read8Et>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN7VL6180X5read8Et>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X::read8(uint16_t address) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af02      	add	r7, sp, #8
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]
  uint8_t buffer[2];
  buffer[0] = uint8_t(address >> 8);
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	733b      	strb	r3, [r7, #12]
  buffer[1] = uint8_t(address & 0xFF);
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(_i2c, (_i2caddr<<1), buffer, 2, HAL_MAX_DELAY);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b299      	uxth	r1, r3
 800128c:	f107 020c 	add.w	r2, r7, #12
 8001290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2302      	movs	r3, #2
 8001298:	f004 f918 	bl	80054cc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(_i2c, ((_i2caddr<<1)|0x01), buffer, 1, HAL_MAX_DELAY);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	b299      	uxth	r1, r3
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	f004 f9fa 	bl	80056b4 <HAL_I2C_Master_Receive>
//  _i2c->write((_i2caddr<<1), buffer, 2, 0);
//  _i2c->read(((_i2caddr<<1)|0x01), buffer, 1, 0);

  return buffer[0];
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZN7VL6180X6write8Eth>:
//  _i2c->read(((_i2caddr<<1)|0x01), buffer, 2, 0);
  return uint16_t(buffer[0]) << 8 | uint16_t(buffer[1]);
}

// write 1 byte
void VL6180X::write8(uint16_t address, uint8_t data) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af02      	add	r7, sp, #8
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	707b      	strb	r3, [r7, #1]
  uint8_t buffer[3];
  buffer[0] = uint8_t(address >> 8);
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	733b      	strb	r3, [r7, #12]
  buffer[1] = uint8_t(address & 0xFF);
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	737b      	strb	r3, [r7, #13]
  buffer[2] = uint8_t(data);
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	73bb      	strb	r3, [r7, #14]

  HAL_I2C_Master_Transmit(_i2c, (_i2caddr<<1), buffer, 3, HAL_MAX_DELAY);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b299      	uxth	r1, r3
 80012fc:	f107 020c 	add.w	r2, r7, #12
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2303      	movs	r3, #3
 8001308:	f004 f8e0 	bl	80054cc <HAL_I2C_Master_Transmit>
//  _i2c->write((_i2caddr<<1), buffer, 3, 0);
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t chip_id = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 fbb9 	bl	8002a98 <null_ptr_check>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BMP3_OK) {
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d12e      	bne.n	8001390 <bmp3_init+0x7c>
		/* Read mechanism according to selected interface */
		if (dev->intf != BMP3_I2C_INTF) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <bmp3_init+0x2e>
			/* If SPI interface is selected, read extra byte */
			dev->dummy_byte = 1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	70da      	strb	r2, [r3, #3]
 8001340:	e002      	b.n	8001348 <bmp3_init+0x34>
		} else {
			/* If I2C interface is selected, no need to read
			extra byte */
			dev->dummy_byte = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	70da      	strb	r2, [r3, #3]
		}
		/* Read the chip-id of bmp3 sensor */
		rslt = bmp3_get_regs(BMP3_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001348:	f107 010e 	add.w	r1, r7, #14
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	2000      	movs	r0, #0
 8001352:	f000 f823 	bl	800139c <bmp3_get_regs>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
		/* Proceed if everything is fine until now */
		if (rslt == BMP3_OK) {
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <bmp3_init+0x7c>
			/* Check for chip id validity */
			if (chip_id == BMP3_CHIP_ID) {
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	2b50      	cmp	r3, #80	; 0x50
 8001366:	d111      	bne.n	800138c <bmp3_init+0x78>
				dev->chip_id = chip_id;
 8001368:	7bba      	ldrb	r2, [r7, #14]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bmp3_soft_reset(dev);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f9a5 	bl	80016be <bmp3_soft_reset>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
				if (rslt == BMP3_OK) {
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <bmp3_init+0x7c>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fb3f 	bl	8001a04 <get_calib_data>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e001      	b.n	8001390 <bmp3_init+0x7c>
				}
			} else {
				rslt = BMP3_E_DEV_NOT_FOUND;
 800138c:	23fe      	movs	r3, #254	; 0xfe
 800138e:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmp3_dev *dev)
{
 800139c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a0:	b089      	sub	sp, #36	; 0x24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	81bb      	strh	r3, [r7, #12]
 80013b0:	466b      	mov	r3, sp
 80013b2:	461e      	mov	r6, r3
	int8_t rslt;
	uint16_t temp_len = len + dev->dummy_byte;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	837b      	strh	r3, [r7, #26]
	uint16_t i;
	uint8_t temp_buff[len + dev->dummy_byte];
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	78d2      	ldrb	r2, [r2, #3]
 80013c6:	1899      	adds	r1, r3, r2
 80013c8:	1e4b      	subs	r3, r1, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	460a      	mov	r2, r1
 80013ce:	2300      	movs	r3, #0
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e8:	460a      	mov	r2, r1
 80013ea:	2300      	movs	r3, #0
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	00eb      	lsls	r3, r5, #3
 80013fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013fe:	00e2      	lsls	r2, r4, #3
 8001400:	460b      	mov	r3, r1
 8001402:	3307      	adds	r3, #7
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	ebad 0d03 	sub.w	sp, sp, r3
 800140c:	466b      	mov	r3, sp
 800140e:	3300      	adds	r3, #0
 8001410:	613b      	str	r3, [r7, #16]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f001 fb40 	bl	8002a98 <null_ptr_check>
 8001418:	4603      	mov	r3, r0
 800141a:	777b      	strb	r3, [r7, #29]
	/* Proceed if null check is fine */
	if (rslt ==  BMP3_OK) {
 800141c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d136      	bne.n	8001492 <bmp3_get_regs+0xf6>
		/* If interface selected is SPI */
		if (dev->intf != BMP3_I2C_INTF) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d022      	beq.n	8001472 <bmp3_get_regs+0xd6>
			reg_addr = reg_addr | 0x80;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001432:	73fb      	strb	r3, [r7, #15]
			/* Read the data from the register */
			rslt = dev->read(dev->dev_id, reg_addr, temp_buff, temp_len);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685c      	ldr	r4, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7858      	ldrb	r0, [r3, #1]
 800143c:	8b7b      	ldrh	r3, [r7, #26]
 800143e:	7bf9      	ldrb	r1, [r7, #15]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	47a0      	blx	r4
 8001444:	4603      	mov	r3, r0
 8001446:	777b      	strb	r3, [r7, #29]
			for (i = 0; i < len; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	83fb      	strh	r3, [r7, #30]
 800144c:	e00c      	b.n	8001468 <bmp3_get_regs+0xcc>
				reg_data[i] = temp_buff[i + dev->dummy_byte];
 800144e:	8bfb      	ldrh	r3, [r7, #30]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	78d2      	ldrb	r2, [r2, #3]
 8001454:	441a      	add	r2, r3
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	440b      	add	r3, r1
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	5c8a      	ldrb	r2, [r1, r2]
 8001460:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < len; i++)
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	3301      	adds	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
 8001468:	8bfa      	ldrh	r2, [r7, #30]
 800146a:	89bb      	ldrh	r3, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d3ee      	bcc.n	800144e <bmp3_get_regs+0xb2>
 8001470:	e009      	b.n	8001486 <bmp3_get_regs+0xea>
		} else {
			/* Read the data using I2C */
			rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685c      	ldr	r4, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7858      	ldrb	r0, [r3, #1]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	7bf9      	ldrb	r1, [r7, #15]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	47a0      	blx	r4
 8001482:	4603      	mov	r3, r0
 8001484:	777b      	strb	r3, [r7, #29]
		}
		/* Check for communication error */
		if (rslt != BMP3_OK)
 8001486:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <bmp3_get_regs+0xf6>
			rslt = BMP3_E_COMM_FAIL;
 800148e:	23f9      	movs	r3, #249	; 0xf9
 8001490:	777b      	strb	r3, [r7, #29]
	}

	return rslt;
 8001492:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001496:	46b5      	mov	sp, r6
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014a2 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp3_dev *dev)
{
 80014a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	466b      	mov	r3, sp
 80014b6:	461e      	mov	r6, r3
	int8_t rslt;
	uint8_t temp_buff[len * 2];
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	0059      	lsls	r1, r3, #1
 80014bc:	1e4b      	subs	r3, r1, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	460a      	mov	r2, r1
 80014c2:	2300      	movs	r3, #0
 80014c4:	4690      	mov	r8, r2
 80014c6:	4699      	mov	r9, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014dc:	460a      	mov	r2, r1
 80014de:	2300      	movs	r3, #0
 80014e0:	4614      	mov	r4, r2
 80014e2:	461d      	mov	r5, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	00eb      	lsls	r3, r5, #3
 80014ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014f2:	00e2      	lsls	r2, r4, #3
 80014f4:	460b      	mov	r3, r1
 80014f6:	3307      	adds	r3, #7
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001500:	466b      	mov	r3, sp
 8001502:	3300      	adds	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f001 fac6 	bl	8002a98 <null_ptr_check>
 800150c:	4603      	mov	r3, r0
 800150e:	76fb      	strb	r3, [r7, #27]
	/* Check for arguments validity */
	if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001510:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d14a      	bne.n	80015ae <bmp3_set_regs+0x10c>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d047      	beq.n	80015ae <bmp3_set_regs+0x10c>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d044      	beq.n	80015ae <bmp3_set_regs+0x10c>
		if (len != 0) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03e      	beq.n	80015a8 <bmp3_set_regs+0x106>
			temp_buff[0] = reg_data[0];
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	701a      	strb	r2, [r3, #0]
			/* If interface selected is SPI */
			if (dev->intf == BMP3_SPI_INTF) {
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	789b      	ldrb	r3, [r3, #2]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d114      	bne.n	8001564 <bmp3_set_regs+0xc2>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800153a:	2300      	movs	r3, #0
 800153c:	77fb      	strb	r3, [r7, #31]
 800153e:	e00d      	b.n	800155c <bmp3_set_regs+0xba>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	440b      	add	r3, r1
 800154e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001556:	7ffb      	ldrb	r3, [r7, #31]
 8001558:	3301      	adds	r3, #1
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	7ffa      	ldrb	r2, [r7, #31]
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3ed      	bcc.n	8001540 <bmp3_set_regs+0x9e>
			}
			/* Burst write mode */
			if (len > 1) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d90a      	bls.n	8001580 <bmp3_set_regs+0xde>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	6939      	ldr	r1, [r7, #16]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fa6c 	bl	8001a4e <interleave_reg_addr>
				temp_len = len * 2;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b29b      	uxth	r3, r3
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
 800157e:	e001      	b.n	8001584 <bmp3_set_regs+0xe2>

			} else {
				temp_len = len;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	83bb      	strh	r3, [r7, #28]
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689c      	ldr	r4, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	7858      	ldrb	r0, [r3, #1]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7819      	ldrb	r1, [r3, #0]
 8001590:	8bbb      	ldrh	r3, [r7, #28]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	47a0      	blx	r4
 8001596:	4603      	mov	r3, r0
 8001598:	76fb      	strb	r3, [r7, #27]
			/* Check for communication error */
			if (rslt != BMP3_OK)
 800159a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <bmp3_set_regs+0x112>
				rslt = BMP3_E_COMM_FAIL;
 80015a2:	23f9      	movs	r3, #249	; 0xf9
 80015a4:	76fb      	strb	r3, [r7, #27]
		if (len != 0) {
 80015a6:	e005      	b.n	80015b4 <bmp3_set_regs+0x112>
		} else {
			rslt = BMP3_E_INVALID_LEN;
 80015a8:	23fa      	movs	r3, #250	; 0xfa
 80015aa:	76fb      	strb	r3, [r7, #27]
		if (len != 0) {
 80015ac:	e002      	b.n	80015b4 <bmp3_set_regs+0x112>
		}
	} else {
		rslt = BMP3_E_NULL_PTR;
 80015ae:	23ff      	movs	r3, #255	; 0xff
 80015b0:	76fb      	strb	r3, [r7, #27]
 80015b2:	e000      	b.n	80015b6 <bmp3_set_regs+0x114>
		if (len != 0) {
 80015b4:	bf00      	nop
	}


	return rslt;
 80015b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80015ba:	46b5      	mov	sp, r6
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015c6 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, odr and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f001 fa61 	bl	8002a98 <null_ptr_check>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BMP3_OK) {
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d141      	bne.n	8001666 <bmp3_set_sensor_settings+0xa0>
		if (are_settings_changed(POWER_CNTL, desired_settings)) {
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2006      	movs	r0, #6
 80015e6:	f001 fa3f 	bl	8002a68 <are_settings_changed>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <bmp3_set_sensor_settings+0x36>
			/* Set the power control settings */
			rslt = set_pwr_ctrl_settings(desired_settings, dev);
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fb27 	bl	8001c46 <set_pwr_ctrl_settings>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]
		}
		if (are_settings_changed(ODR_FILTER, desired_settings) && (!rslt)) {
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	20f0      	movs	r0, #240	; 0xf0
 8001600:	f001 fa32 	bl	8002a68 <are_settings_changed>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <bmp3_set_sensor_settings+0x58>
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <bmp3_set_sensor_settings+0x58>
			/* Set the over sampling, odr and filter settings*/
			rslt = set_odr_filter_settings(desired_settings, dev);
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fb65 	bl	8001ce4 <set_odr_filter_settings>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
		}
		if (are_settings_changed(INT_CTRL, desired_settings) && (!rslt)) {
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001624:	f001 fa20 	bl	8002a68 <are_settings_changed>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <bmp3_set_sensor_settings+0x7c>
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <bmp3_set_sensor_settings+0x7c>
			/* Set the interrupt control settings */
			rslt = set_int_ctrl_settings(desired_settings, dev);
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fbbf 	bl	8001dbc <set_int_ctrl_settings>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
		}
		if (are_settings_changed(ADV_SETT, desired_settings) && (!rslt)) {
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001648:	f001 fa0e 	bl	8002a68 <are_settings_changed>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <bmp3_set_sensor_settings+0xa0>
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <bmp3_set_sensor_settings+0xa0>
			/* Set the advance settings */
			rslt = set_advance_settings(desired_settings, dev);
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fc26 	bl	8001eae <set_advance_settings>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <bmp3_get_sensor_settings>:
 * @brief This API gets the power control(power mode, pressure enable and
 * temperature enable), over sampling, odr, filter, interrupt control and
 * advance settings from the sensor.
 */
int8_t bmp3_get_sensor_settings(struct bmp3_dev *dev)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t settings_data[BMP3_GEN_SETT_LEN];

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f001 fa0c 	bl	8002a98 <null_ptr_check>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BMP3_OK) {
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d112      	bne.n	80016b2 <bmp3_get_sensor_settings+0x40>
		rslt = bmp3_get_regs(BMP3_INT_CTRL_ADDR, settings_data, BMP3_GEN_SETT_LEN, dev);
 800168c:	f107 0108 	add.w	r1, r7, #8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2207      	movs	r2, #7
 8001694:	2019      	movs	r0, #25
 8001696:	f7ff fe81 	bl	800139c <bmp3_get_regs>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

		if (rslt == BMP3_OK) {
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <bmp3_get_sensor_settings+0x40>
			/* Parse the settings data */
			parse_sett_data(settings_data, dev);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f9fa 	bl	8001aa6 <parse_sett_data>
		}
	}

	return rslt;
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(const struct bmp3_dev *dev)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BMP3_CMD_ADDR;
 80016c6:	237e      	movs	r3, #126	; 0x7e
 80016c8:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80016ca:	23b6      	movs	r3, #182	; 0xb6
 80016cc:	737b      	strb	r3, [r7, #13]
	uint8_t cmd_rdy_status;
	uint8_t cmd_err_status;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f001 f9e2 	bl	8002a98 <null_ptr_check>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BMP3_OK) {
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d13c      	bne.n	800175a <bmp3_soft_reset+0x9c>
		/* Check for command ready status */
		rslt = bmp3_get_regs(BMP3_SENS_STATUS_REG_ADDR, &cmd_rdy_status, 1, dev);
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	2003      	movs	r0, #3
 80016ea:	f7ff fe57 	bl	800139c <bmp3_get_regs>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
		/* Device is ready to accept new command */
		if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK)) {
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d02a      	beq.n	8001752 <bmp3_soft_reset+0x94>
 80016fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d126      	bne.n	8001752 <bmp3_soft_reset+0x94>
			/* Write the soft reset command in the sensor */
			rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001704:	f107 010d 	add.w	r1, r7, #13
 8001708:	f107 000e 	add.w	r0, r7, #14
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f7ff fec7 	bl	80014a2 <bmp3_set_regs>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
//			return rslt; //LE added
			/* Proceed if everything is fine until now */
			if (rslt == BMP3_OK) {
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11b      	bne.n	8001758 <bmp3_soft_reset+0x9a>
				/* Wait for 2 ms */
				dev->delay_ms(2);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2002      	movs	r0, #2
 8001726:	4798      	blx	r3
				/* Read for command error status */
				rslt = bmp3_get_regs(BMP3_ERR_REG_ADDR, &cmd_err_status, 1, dev);
 8001728:	f107 010b 	add.w	r1, r7, #11
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f7ff fe33 	bl	800139c <bmp3_get_regs>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
				/* check for command error status */
				if ((cmd_err_status & BMP3_CMD_ERR) || (rslt != BMP3_OK)) {
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <bmp3_soft_reset+0x8e>
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <bmp3_soft_reset+0x9a>
					/* Command not written hence return
					   error */
					rslt = BMP3_E_CMD_EXEC_FAILED;
 800174c:	23fc      	movs	r3, #252	; 0xfc
 800174e:	73fb      	strb	r3, [r7, #15]
			if (rslt == BMP3_OK) {
 8001750:	e002      	b.n	8001758 <bmp3_soft_reset+0x9a>
				}
			}
		} else {
			rslt = BMP3_E_CMD_EXEC_FAILED;
 8001752:	23fc      	movs	r3, #252	; 0xfc
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e000      	b.n	800175a <bmp3_soft_reset+0x9c>
			if (rslt == BMP3_OK) {
 8001758:	bf00      	nop
		}
	}

	return rslt;
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t last_set_mode;
	uint8_t curr_mode = dev->settings.op_mode;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001774:	73bb      	strb	r3, [r7, #14]


	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f001 f98e 	bl	8002a98 <null_ptr_check>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d128      	bne.n	80017da <bmp3_set_op_mode+0x74>
		rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8001788:	f107 030d 	add.w	r3, r7, #13
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f829 	bl	80017e6 <bmp3_get_op_mode>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if (last_set_mode != BMP3_SLEEP_MODE) {
 8001798:	7b7b      	ldrb	r3, [r7, #13]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <bmp3_set_op_mode+0x4a>
			/* Device should be put to sleep before transiting to
			   forced mode or normal mode */
			rslt = put_device_to_sleep(dev);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8f0 	bl	8001984 <put_device_to_sleep>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]
			/* Give some time for device to go into sleep mode */
			dev->delay_ms(5);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2005      	movs	r0, #5
 80017ae:	4798      	blx	r3
		}
		/* Set the power mode */
		if (rslt == BMP3_OK) {
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d110      	bne.n	80017da <bmp3_set_op_mode+0x74>
			if (curr_mode == BMP3_NORMAL_MODE) {
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d105      	bne.n	80017ca <bmp3_set_op_mode+0x64>
				/* Set normal mode and validate
				   necessary settings */
				rslt = set_normal_mode(dev);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f87a 	bl	80018b8 <set_normal_mode>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e007      	b.n	80017da <bmp3_set_op_mode+0x74>
			} else if (curr_mode == BMP3_FORCED_MODE) {
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d104      	bne.n	80017da <bmp3_set_op_mode+0x74>
				/* Set forced mode */
				rslt = write_power_mode(dev);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f8a1 	bl	8001918 <write_power_mode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, const struct bmp3_dev *dev)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f001 f951 	bl	8002a98 <null_ptr_check>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d110      	bne.n	8001824 <bmp3_get_op_mode+0x3e>
		/* Read the power mode register */
		rslt = bmp3_get_regs(BMP3_PWR_CTRL_ADDR, op_mode, 1, dev);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	201b      	movs	r0, #27
 800180a:	f7ff fdc7 	bl	800139c <bmp3_get_regs>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	111b      	asrs	r3, r3, #4
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	b2da      	uxtb	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure and temperature data read from
	the sensor */
	uint8_t reg_data[BMP3_P_T_DATA_LEN] = {0};
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	2300      	movs	r3, #0
 8001844:	83bb      	strh	r3, [r7, #28]
	struct bmp3_uncomp_data uncomp_data = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 f921 	bl	8002a98 <null_ptr_check>
 8001856:	4603      	mov	r3, r0
 8001858:	77fb      	strb	r3, [r7, #31]

	if ((rslt == BMP3_OK) && (comp_data != NULL)) {
 800185a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d122      	bne.n	80018a8 <bmp3_get_sensor_data+0x78>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01f      	beq.n	80018a8 <bmp3_get_sensor_data+0x78>
		/* Read the pressure and temperature data from the sensor */
		rslt = bmp3_get_regs(BMP3_DATA_ADDR, reg_data, BMP3_P_T_DATA_LEN, dev);
 8001868:	f107 0118 	add.w	r1, r7, #24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2206      	movs	r2, #6
 8001870:	2004      	movs	r0, #4
 8001872:	f7ff fd93 	bl	800139c <bmp3_get_regs>
 8001876:	4603      	mov	r3, r0
 8001878:	77fb      	strb	r3, [r7, #31]
//		uint8_t test = reg_data[1]; // LE added, returns extra 6 fs 0xffffff## if using int and not uint
//		return test; //LE added
		if (rslt == BMP3_OK) {
 800187a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d114      	bne.n	80018ac <bmp3_get_sensor_data+0x7c>
			/* Parse the read data from the sensor */
			parse_sensor_data(reg_data, &uncomp_data);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f107 0318 	add.w	r3, r7, #24
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fd21 	bl	80022d4 <parse_sensor_data>

			/* Compensate the pressure/temperature/both data read
			   from the sensor */
			rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3310      	adds	r3, #16
 8001896:	f107 0110 	add.w	r1, r7, #16
 800189a:	7bf8      	ldrb	r0, [r7, #15]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	f000 fd4d 	bl	800233c <compensate_data>
 80018a2:	4603      	mov	r3, r0
 80018a4:	77fb      	strb	r3, [r7, #31]
		if (rslt == BMP3_OK) {
 80018a6:	e001      	b.n	80018ac <bmp3_get_sensor_data+0x7c>
			// return rslt;//LE added


		}
	} else {
		rslt = BMP3_E_NULL_PTR;
 80018a8:	23ff      	movs	r3, #255	; 0xff
 80018aa:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 80018ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t conf_err_status;

	rslt = validate_normal_mode_settings(dev);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f887 	bl	80019d4 <validate_normal_mode_settings>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
	/* If osr and odr settings are proper then write the power mode */
	if (rslt == BMP3_OK) {
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11c      	bne.n	800190c <set_normal_mode+0x54>
		rslt = write_power_mode(dev);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f820 	bl	8001918 <write_power_mode>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
		/* check for configuration error */
		if (rslt == BMP3_OK) {
 80018dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d113      	bne.n	800190c <set_normal_mode+0x54>
			/* Read the configuration error status */
			rslt = bmp3_get_regs(BMP3_ERR_REG_ADDR, &conf_err_status, 1, dev);
 80018e4:	f107 010e 	add.w	r1, r7, #14
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	2002      	movs	r0, #2
 80018ee:	f7ff fd55 	bl	800139c <bmp3_get_regs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
			/* Check if conf. error flag is set */
			if (rslt == BMP3_OK) {
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <set_normal_mode+0x54>
				if (conf_err_status & BMP3_CONF_ERR) {
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <set_normal_mode+0x54>
					/* Osr and odr configuration is
					   not proper */
					rslt = BMP3_E_CONFIGURATION_ERR;
 8001908:	23fb      	movs	r3, #251	; 0xfb
 800190a:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_dev *dev)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BMP3_PWR_CTRL_ADDR;
 8001920:	231b      	movs	r3, #27
 8001922:	737b      	strb	r3, [r7, #13]
	uint8_t op_mode = dev->settings.op_mode;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800192a:	73bb      	strb	r3, [r7, #14]
	/* Temporary variable to store the value read from op-mode register */
	uint8_t op_mode_reg_val;

	/* Read the power mode register */
	rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800192c:	7b78      	ldrb	r0, [r7, #13]
 800192e:	f107 010c 	add.w	r1, r7, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fd31 	bl	800139c <bmp3_get_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BMP3_OK) {
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <write_power_mode+0x60>
		op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8001946:	7b3b      	ldrb	r3, [r7, #12]
 8001948:	b25b      	sxtb	r3, r3
 800194a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800194e:	b25a      	sxtb	r2, r3
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	b25b      	sxtb	r3, r3
 8001956:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800195a:	b25b      	sxtb	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b25b      	sxtb	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	733b      	strb	r3, [r7, #12]
		/* Write the power mode in the register */
		rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001964:	f107 010c 	add.w	r1, r7, #12
 8001968:	f107 000d 	add.w	r0, r7, #13
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f7ff fd97 	bl	80014a2 <bmp3_set_regs>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bmp3_dev *dev)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BMP3_PWR_CTRL_ADDR;
 800198c:	231b      	movs	r3, #27
 800198e:	73bb      	strb	r3, [r7, #14]
	/* Temporary variable to store the value read from op-mode register */
	uint8_t op_mode_reg_val;

	rslt = bmp3_get_regs(BMP3_PWR_CTRL_ADDR, &op_mode_reg_val, 1, dev);
 8001990:	f107 010d 	add.w	r1, r7, #13
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	201b      	movs	r0, #27
 800199a:	f7ff fcff 	bl	800139c <bmp3_get_regs>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <put_device_to_sleep+0x44>
		/* Set the power mode */
		op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80019aa:	7b7b      	ldrb	r3, [r7, #13]
 80019ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	737b      	strb	r3, [r7, #13]

		/* Write the power mode in the register */
		rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80019b4:	f107 010d 	add.w	r1, r7, #13
 80019b8:	f107 000e 	add.w	r0, r7, #14
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f7ff fd6f 	bl	80014a2 <bmp3_set_regs>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80019c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	rslt = get_odr_filter_settings(dev);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fab8 	bl	8001f52 <get_odr_filter_settings>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK)
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <validate_normal_mode_settings+0x24>
		rslt = validate_osr_and_odr_settings(dev);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 facc 	bl	8001f8c <validate_osr_and_odr_settings>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BMP3_CALIB_DATA_ADDR;
 8001a0c:	2331      	movs	r3, #49	; 0x31
 8001a0e:	77fb      	strb	r3, [r7, #31]
	/* Array to store calibration data */
	uint8_t calib_data[BMP3_CALIB_DATA_LEN] = {0};
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	741a      	strb	r2, [r3, #16]

	/* Read the calibration data from the sensor */
	rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_CALIB_DATA_LEN, dev);
 8001a24:	f107 0108 	add.w	r1, r7, #8
 8001a28:	7ff8      	ldrb	r0, [r7, #31]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2215      	movs	r2, #21
 8001a2e:	f7ff fcb5 	bl	800139c <bmp3_get_regs>
 8001a32:	4603      	mov	r3, r0
 8001a34:	77bb      	strb	r3, [r7, #30]
	/* Parse calibration data and store it in device structure */
	parse_calib_data(calib_data, dev);
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fcb9 	bl	80023b4 <parse_calib_data>
	return rslt;
 8001a42:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	75fb      	strb	r3, [r7, #23]
 8001a60:	e016      	b.n	8001a90 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	441a      	add	r2, r3
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	440b      	add	r3, r1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	440b      	add	r3, r1
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	75fb      	strb	r3, [r7, #23]
 8001a90:	7dfa      	ldrb	r2, [r7, #23]
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3e4      	bcc.n	8001a62 <interleave_reg_addr+0x14>
	}
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <parse_sett_data>:
 * @brief This internal API parse the power control(power mode, pressure enable
 * and temperature enable), over sampling, odr, filter, interrupt control and
 * advance settings and store in the device structure.
 */
static void parse_sett_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
	/* Parse interrupt control settings and store in device structure */
	parse_int_ctrl_settings(&reg_data[0], &dev->settings.int_settings);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	33af      	adds	r3, #175	; 0xaf
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f81c 	bl	8001af4 <parse_int_ctrl_settings>
	/* Parse advance settings and store in device structure */
	parse_advance_settings(&reg_data[1], &dev->settings.adv_settings);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	33b3      	adds	r3, #179	; 0xb3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f000 f841 	bl	8001b4e <parse_advance_settings>
	/* Parse power control settings and store in device structure */
	parse_pwr_ctrl_settings(&reg_data[2], &dev->settings);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1c9a      	adds	r2, r3, #2
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	33a8      	adds	r3, #168	; 0xa8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f856 	bl	8001b88 <parse_pwr_ctrl_settings>
	/* Parse odr and filter settings and store in device structure */
	parse_odr_filter_settings(&reg_data[3], &dev->settings.odr_filter);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1cda      	adds	r2, r3, #3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	33ab      	adds	r3, #171	; 0xab
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 f872 	bl	8001bd0 <parse_odr_filter_settings>

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <parse_int_ctrl_settings>:
/*!
 * @brief This internal API parse the interrupt control(output mode, level,
 * latch and data ready) settings and store in the device structure.
 */
static void parse_int_ctrl_settings(const uint8_t *reg_data, struct bmp3_int_ctrl_settings *settings)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	settings->output_mode = BMP3_GET_BITS_POS_0(*reg_data, BMP3_INT_OUTPUT_MODE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	701a      	strb	r2, [r3, #0]
	settings->level = BMP3_GET_BITS(*reg_data, BMP3_INT_LEVEL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	105b      	asrs	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	705a      	strb	r2, [r3, #1]
	settings->latch = BMP3_GET_BITS(*reg_data, BMP3_INT_LATCH);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	109b      	asrs	r3, r3, #2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	709a      	strb	r2, [r3, #2]
	settings->drdy_en = BMP3_GET_BITS(*reg_data, BMP3_INT_DRDY_EN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	119b      	asrs	r3, r3, #6
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	70da      	strb	r2, [r3, #3]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <parse_advance_settings>:


static void parse_advance_settings(const uint8_t *reg_data, struct bmp3_adv_settings *settings)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	settings->i2c_wdt_en = BMP3_GET_BITS(*reg_data, BMP3_I2C_WDT_EN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	105b      	asrs	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
	settings->i2c_wdt_sel = BMP3_GET_BITS(*reg_data, BMP3_I2C_WDT_SEL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	109b      	asrs	r3, r3, #2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	705a      	strb	r2, [r3, #1]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <parse_pwr_ctrl_settings>:
/*!
 * @brief This internal API parse the power control(power mode, pressure enable
 * and temperature enable) settings and store in the device structure.
 */
static void  parse_pwr_ctrl_settings(const uint8_t *reg_data, struct bmp3_settings *settings)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	settings->op_mode = BMP3_GET_BITS(*reg_data, BMP3_OP_MODE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	111b      	asrs	r3, r3, #4
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	701a      	strb	r2, [r3, #0]
	settings->press_en = BMP3_GET_BITS_POS_0(*reg_data, BMP3_PRESS_EN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	705a      	strb	r2, [r3, #1]
	settings->temp_en = BMP3_GET_BITS(*reg_data, BMP3_TEMP_EN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	105b      	asrs	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	709a      	strb	r2, [r3, #2]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, odr and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	uint8_t index = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]

	/* Odr and filter settings index starts from one (0x1C register) */
	settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	701a      	strb	r2, [r3, #0]
	settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	10db      	asrs	r3, r3, #3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	705a      	strb	r2, [r3, #1]

	/* Move index to 0x1D register */
	index++;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
	settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	70da      	strb	r2, [r3, #3]

	/* Move index to 0x1F register */
	index = index + 2;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	3302      	adds	r3, #2
 8001c22:	73fb      	strb	r3, [r7, #15]
	settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	105b      	asrs	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	709a      	strb	r2, [r3, #2]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, const struct bmp3_dev *dev)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t reg_addr = BMP3_PWR_CTRL_ADDR;
 8001c50:	231b      	movs	r3, #27
 8001c52:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_data;

	rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001c54:	7bb8      	ldrb	r0, [r7, #14]
 8001c56:	f107 010d 	add.w	r1, r7, #13
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f7ff fb9d 	bl	800139c <bmp3_get_regs>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d134      	bne.n	8001cd8 <set_pwr_ctrl_settings+0x92>
		if (desired_settings & BMP3_PRESS_EN_SEL) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <set_pwr_ctrl_settings+0x52>
			/* Set the pressure enable settings in the
			register variable */
			reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	737b      	strb	r3, [r7, #13]
		}
		if (desired_settings & BMP3_TEMP_EN_SEL) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <set_pwr_ctrl_settings+0x7e>
			/* Set the temperature enable settings in the
			register variable */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	f023 0302 	bic.w	r3, r3, #2
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	737b      	strb	r3, [r7, #13]
		}
		/* Write the power control settings in the register */
		rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001cc4:	f107 010d 	add.w	r1, r7, #13
 8001cc8:	f107 000e 	add.w	r0, r7, #14
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f7ff fbe7 	bl	80014a2 <bmp3_set_regs>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
		// return reg_data; // LE added - returns 0x03 if both en, 0x02 if only temp en, 0x01 if only press en
		// return reg_addr; // LE added - returns 0x1B as expected
	}

	return rslt;
 8001cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, odr and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	/* No of registers to be configured is 3*/
	uint8_t reg_addr[3] = {0};
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <set_odr_filter_settings+0xd4>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	82bb      	strh	r3, [r7, #20]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	75bb      	strb	r3, [r7, #22]
	/* No of register data to be read is 4 */
	uint8_t reg_data[4];
	uint8_t len = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]

	rslt = bmp3_get_regs(BMP3_OSR_ADDR, reg_data, 4, dev);
 8001cfc:	f107 0110 	add.w	r1, r7, #16
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	201c      	movs	r0, #28
 8001d06:	f7ff fb49 	bl	800139c <bmp3_get_regs>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]

	if (rslt == BMP3_OK) {
 8001d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d14a      	bne.n	8001dac <set_odr_filter_settings+0xc8>
		if (are_settings_changed((BMP3_PRESS_OS_SEL | BMP3_TEMP_OS_SEL), desired_settings)) {
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	2030      	movs	r0, #48	; 0x30
 8001d1a:	f000 fea5 	bl	8002a68 <are_settings_changed>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <set_odr_filter_settings+0x58>
			/* Fill the over sampling register address and
			register data to be written in the sensor */
			fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8001d24:	f107 000f 	add.w	r0, r7, #15
 8001d28:	f107 0210 	add.w	r2, r7, #16
 8001d2c:	f107 0114 	add.w	r1, r7, #20
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa04 	bl	8002144 <fill_osr_data>
		}
		if (are_settings_changed(BMP3_ODR_SEL, desired_settings)) {
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	2080      	movs	r0, #128	; 0x80
 8001d40:	f000 fe92 	bl	8002a68 <are_settings_changed>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <set_odr_filter_settings+0x78>
			/* Fill the output data rate register address and
			register data to be written in the sensor */
			fill_odr_data(reg_addr, reg_data, &len, dev);
 8001d4a:	f107 020f 	add.w	r2, r7, #15
 8001d4e:	f107 0110 	add.w	r1, r7, #16
 8001d52:	f107 0014 	add.w	r0, r7, #20
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f000 fa4c 	bl	80021f4 <fill_odr_data>
		}
		if (are_settings_changed(BMP3_IIR_FILTER_SEL, desired_settings)) {
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	2040      	movs	r0, #64	; 0x40
 8001d60:	f000 fe82 	bl	8002a68 <are_settings_changed>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <set_odr_filter_settings+0x98>
			/* Fill the iir filter register address and
			register data to be written in the sensor */
			fill_filter_data(reg_addr, reg_data, &len, dev);
 8001d6a:	f107 020f 	add.w	r2, r7, #15
 8001d6e:	f107 0110 	add.w	r1, r7, #16
 8001d72:	f107 0014 	add.w	r0, r7, #20
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f000 fa76 	bl	8002268 <fill_filter_data>
		}
		if (dev->settings.op_mode == BMP3_NORMAL_MODE) {
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d104      	bne.n	8001d90 <set_odr_filter_settings+0xac>
			/* For normal mode, osr and odr settings should
			   be proper */
			rslt = validate_osr_and_odr_settings(dev);
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f000 f900 	bl	8001f8c <validate_osr_and_odr_settings>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	75fb      	strb	r3, [r7, #23]
		}
		if (rslt == BMP3_OK) {
 8001d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <set_odr_filter_settings+0xc8>
			/* Burst write the over sampling, odr and filter
			   settings in the register */
			rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	f107 0110 	add.w	r1, r7, #16
 8001d9e:	f107 0014 	add.w	r0, r7, #20
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f7ff fb7d 	bl	80014a2 <bmp3_set_regs>
 8001da8:	4603      	mov	r3, r0
 8001daa:	75fb      	strb	r3, [r7, #23]
		}
	}

	return rslt;
 8001dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800a6b4 	.word	0x0800a6b4

08001dbc <set_int_ctrl_settings>:
* @brief This internal API sets the interrupt control (output mode, level,
* latch and data ready) settings of the sensor based on the settings
* selected by the user.
*/
static int8_t set_int_ctrl_settings(uint32_t desired_settings, const struct bmp3_dev *dev)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t reg_data;
	uint8_t reg_addr;
	struct bmp3_int_ctrl_settings int_settings;

	reg_addr = BMP3_INT_CTRL_ADDR;
 8001dc6:	2319      	movs	r3, #25
 8001dc8:	737b      	strb	r3, [r7, #13]
	rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001dca:	7b78      	ldrb	r0, [r7, #13]
 8001dcc:	f107 010e 	add.w	r1, r7, #14
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f7ff fae2 	bl	800139c <bmp3_get_regs>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d15e      	bne.n	8001ea2 <set_int_ctrl_settings+0xe6>
		int_settings = dev->settings.int_settings;
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	32af      	adds	r2, #175	; 0xaf
 8001dec:	6810      	ldr	r0, [r2, #0]
 8001dee:	6018      	str	r0, [r3, #0]

		if (desired_settings & BMP3_OUTPUT_MODE_SEL) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <set_int_ctrl_settings+0x5a>
			/* Set the interrupt output mode bits */
			reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001dfa:	7bbb      	ldrb	r3, [r7, #14]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	7a3b      	ldrb	r3, [r7, #8]
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	73bb      	strb	r3, [r7, #14]
		}
		if (desired_settings & BMP3_LEVEL_SEL) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <set_int_ctrl_settings+0x82>
			/* Set the interrupt level bits */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	f023 0302 	bic.w	r3, r3, #2
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	7a7b      	ldrb	r3, [r7, #9]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	73bb      	strb	r3, [r7, #14]
		}
		if (desired_settings & BMP3_LATCH_SEL) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00e      	beq.n	8001e66 <set_int_ctrl_settings+0xaa>
			/* Set the interrupt latch bits */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	7abb      	ldrb	r3, [r7, #10]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	73bb      	strb	r3, [r7, #14]
		}
		if (desired_settings & BMP3_DRDY_EN_SEL) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <set_int_ctrl_settings+0xd2>
			/* Set the interrupt data ready bits */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	73bb      	strb	r3, [r7, #14]
		}

		rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001e8e:	f107 010e 	add.w	r1, r7, #14
 8001e92:	f107 000d 	add.w	r0, r7, #13
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f7ff fb02 	bl	80014a2 <bmp3_set_regs>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_dev *dev)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t reg_data;
	struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	32b3      	adds	r2, #179	; 0xb3
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	801a      	strh	r2, [r3, #0]

	reg_addr = BMP3_IF_CONF_ADDR;
 8001ec4:	231a      	movs	r3, #26
 8001ec6:	73bb      	strb	r3, [r7, #14]
	rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001ec8:	7bb8      	ldrb	r0, [r7, #14]
 8001eca:	f107 010d 	add.w	r1, r7, #13
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f7ff fa63 	bl	800139c <bmp3_get_regs>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP3_OK) {
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d131      	bne.n	8001f46 <set_advance_settings+0x98>
		if (desired_settings & BMP3_I2C_WDT_EN_SEL) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00e      	beq.n	8001f0a <set_advance_settings+0x5c>
			/* Set the i2c watch dog enable bits */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	f023 0302 	bic.w	r3, r3, #2
 8001ef4:	b25a      	sxtb	r2, r3
 8001ef6:	7a3b      	ldrb	r3, [r7, #8]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	b25b      	sxtb	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	737b      	strb	r3, [r7, #13]
		}
		if (desired_settings & BMP3_I2C_WDT_SEL_SEL) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <set_advance_settings+0x84>
			/* Set the i2c watch dog select bits */
			reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	b25a      	sxtb	r2, r3
 8001f1e:	7a7b      	ldrb	r3, [r7, #9]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	737b      	strb	r3, [r7, #13]
		}

		rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001f32:	f107 010d 	add.w	r1, r7, #13
 8001f36:	f107 000e 	add.w	r0, r7, #14
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f7ff fab0 	bl	80014a2 <bmp3_set_regs>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, odr and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];

	/* Read data beginning from 0x1C register */
	rslt = bmp3_get_regs(BMP3_OSR_ADDR, reg_data, 4, dev);
 8001f5a:	f107 0108 	add.w	r1, r7, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	201c      	movs	r0, #28
 8001f64:	f7ff fa1a 	bl	800139c <bmp3_get_regs>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
	/* Parse the read data and store it in dev structure */
	parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f103 02ab 	add.w	r2, r3, #171	; 0xab
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe29 	bl	8001bd0 <parse_odr_filter_settings>

	return rslt;
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, odr settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	; 0x58
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint16_t meas_t = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	/* Odr values in milli secs  */
	uint32_t odr[18] = {5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240,
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <validate_osr_and_odr_settings+0x80>)
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	2248      	movs	r2, #72	; 0x48
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f007 fbd3 	bl	8009750 <memcpy>
			20480, 40960, 81920, 163840, 327680, 655360};

	if (dev->settings.press_en) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <validate_osr_and_odr_settings+0x34>
		/* Calculate the pressure measurement duration */
		meas_t = calculate_press_meas_time(dev);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f843 	bl	8002040 <calculate_press_meas_time>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	}
	if (dev->settings.temp_en) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <validate_osr_and_odr_settings+0x52>
		/* Calculate the temperature measurement duration */
		meas_t += calculate_temp_meas_time(dev);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f87a 	bl	80020c4 <calculate_temp_meas_time>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001fd8:	4413      	add	r3, r2
 8001fda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	}
	rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	3358      	adds	r3, #88	; 0x58
 8001fe8:	443b      	add	r3, r7
 8001fea:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8001fee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f80b 	bl	8002010 <verify_meas_time_and_odr_duration>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	return rslt;
 8002000:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
}
 8002004:	4618      	mov	r0, r3
 8002006:	3758      	adds	r7, #88	; 0x58
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800a6b8 	.word	0x0800a6b8

08002010 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and odr duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint16_t meas_t, uint32_t odr_duration)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;

	if (meas_t < odr_duration) {
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d902      	bls.n	800202a <verify_meas_time_and_odr_duration+0x1a>
		/* If measurement duration is less than odr duration
		   then osr and odr settings are fine */
		rslt = BMP3_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e001      	b.n	800202e <verify_meas_time_and_odr_duration+0x1e>
	} else {
		/* Osr and odr settings are not proper */
		rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 800202a:	23fd      	movs	r3, #253	; 0xfd
 800202c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint16_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	uint16_t press_meas_t;
	struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	32ab      	adds	r2, #171	; 0xab
 8002050:	6810      	ldr	r0, [r2, #0]
 8002052:	6018      	str	r0, [r3, #0]
#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
	double base = 2.0;
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#else
	uint8_t base = 2;
	uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */

	partial_out = bmp3_pow(base, odr_filter.press_os);
 8002060:	7a3b      	ldrb	r3, [r7, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	ed97 0b06 	vldr	d0, [r7, #24]
 8002068:	f000 fcd4 	bl	8002a14 <bmp3_pow>
 800206c:	ed87 0b04 	vstr	d0, [r7, #16]
	press_meas_t = (uint16_t)(BMP3_PRESS_SETTLE_TIME + partial_out * BMP3_ADC_CONV_TIME);
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <calculate_press_meas_time+0x78>)
 8002076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207a:	f7fe fab5 	bl	80005e8 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <calculate_press_meas_time+0x7c>)
 800208c:	f7fe f8f6 	bl	800027c <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fce0 	bl	8000a5c <__aeabi_d2uiz>
 800209c:	4603      	mov	r3, r0
 800209e:	81fb      	strh	r3, [r7, #14]
	/* convert into mill seconds */
	press_meas_t = press_meas_t / 1000;
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <calculate_press_meas_time+0x80>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	81fb      	strh	r3, [r7, #14]

	return press_meas_t;
 80020ac:	89fb      	ldrh	r3, [r7, #14]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	409f4000 	.word	0x409f4000
 80020bc:	40788000 	.word	0x40788000
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint16_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	uint16_t temp_meas_t;
	struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	32ab      	adds	r2, #171	; 0xab
 80020d4:	6810      	ldr	r0, [r2, #0]
 80020d6:	6018      	str	r0, [r3, #0]
#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
	float base = 2.0;
 80020d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020dc:	617b      	str	r3, [r7, #20]
#else
	uint8_t base = 2;
	uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */

	partial_out = bmp3_pow(base, odr_filter.temp_os);
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7fe fa2a 	bl	8000538 <__aeabi_f2d>
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	4618      	mov	r0, r3
 80020ec:	ec45 4b10 	vmov	d0, r4, r5
 80020f0:	f000 fc90 	bl	8002a14 <bmp3_pow>
 80020f4:	ec53 2b10 	vmov	r2, r3, d0
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fcce 	bl	8000a9c <__aeabi_d2f>
 8002100:	4603      	mov	r3, r0
 8002102:	613b      	str	r3, [r7, #16]
	temp_meas_t = (uint16_t)(BMP3_TEMP_SETTLE_TIME + partial_out * BMP3_ADC_CONV_TIME);
 8002104:	edd7 7a04 	vldr	s15, [r7, #16]
 8002108:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002138 <calculate_temp_meas_time+0x74>
 800210c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002110:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800213c <calculate_temp_meas_time+0x78>
 8002114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	81fb      	strh	r3, [r7, #14]
	/* convert into mill seconds */
	temp_meas_t = temp_meas_t / 1000;
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <calculate_temp_meas_time+0x7c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	81fb      	strh	r3, [r7, #14]

	return temp_meas_t;
 800212e:	89fb      	ldrh	r3, [r7, #14]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}
 8002138:	44fa0000 	.word	0x44fa0000
 800213c:	439c8000 	.word	0x439c8000
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <fill_osr_data>:
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len,
				const struct bmp3_dev *dev)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
	struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	32ab      	adds	r2, #171	; 0xab
 800215a:	6810      	ldr	r0, [r2, #0]
 800215c:	6018      	str	r0, [r3, #0]

	if (settings & (BMP3_PRESS_OS_SEL | BMP3_TEMP_OS_SEL)) {
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03f      	beq.n	80021e8 <fill_osr_data+0xa4>
		/* Pressure over sampling settings check */
		if (settings & BMP3_PRESS_OS_SEL) {
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d013      	beq.n	800219a <fill_osr_data+0x56>
			/* Set the pressure over sampling settings in the
			  register variable */
			reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b25b      	sxtb	r3, r3
 8002178:	f023 0307 	bic.w	r3, r3, #7
 800217c:	b25a      	sxtb	r2, r3
 800217e:	7d3b      	ldrb	r3, [r7, #20]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	b25b      	sxtb	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b25a      	sxtb	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	440b      	add	r3, r1
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
		}
		/* Temperature over sampling settings check */
		if (settings & BMP3_TEMP_OS_SEL) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <fill_osr_data+0x8a>
			/* Set the temperature over sampling settings in the
			   register variable */
			reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	7d7b      	ldrb	r3, [r7, #21]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25a      	sxtb	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	440b      	add	r3, r1
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
		}
		/* 0x1C is the register address of over sampling register */
		addr[*len] = BMP3_OSR_ADDR;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	221c      	movs	r2, #28
 80021da:	701a      	strb	r2, [r3, #0]
		(*len)++;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
	}
}
 80021e8:	bf00      	nop
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the odr settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
	struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	33ab      	adds	r3, #171	; 0xab
 8002206:	617b      	str	r3, [r7, #20]

	/* Limit the ODR to 0.001525879 Hz*/
	if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	78db      	ldrb	r3, [r3, #3]
 800220c:	2b11      	cmp	r3, #17
 800220e:	d902      	bls.n	8002216 <fill_odr_data+0x22>
		osr_settings->odr = BMP3_ODR_0_001_HZ;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2211      	movs	r2, #17
 8002214:	70da      	strb	r2, [r3, #3]
	/* Set the odr settings in the register variable */
	reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b25b      	sxtb	r3, r3
 800221e:	f023 031f 	bic.w	r3, r3, #31
 8002222:	b25a      	sxtb	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	b25b      	sxtb	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b25a      	sxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	440b      	add	r3, r1
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
	/* 0x1D is the register address of output data rate register */
	addr[*len] = 0x1D;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	221d      	movs	r2, #29
 800224e:	701a      	strb	r2, [r3, #0]
	(*len)++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	701a      	strb	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
	struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	32ab      	adds	r2, #171	; 0xab
 800227e:	6810      	ldr	r0, [r2, #0]
 8002280:	6018      	str	r0, [r3, #0]

       /* Set the iir settings in the register variable */
	reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3303      	adds	r3, #3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f023 030e 	bic.w	r3, r3, #14
 800228e:	b25a      	sxtb	r2, r3
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	b25b      	sxtb	r3, r3
 8002296:	f003 030e 	and.w	r3, r3, #14
 800229a:	b25b      	sxtb	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	440b      	add	r3, r1
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
       /* 0x1F is the register address of iir filter register */
	addr[*len] = 0x1F;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	221f      	movs	r2, #31
 80022ba:	701a      	strb	r2, [r3, #0]
	(*len)++;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	701a      	strb	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_xlsb = (uint32_t)reg_data[0];
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 8;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3301      	adds	r3, #1
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[2] << 16;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3302      	adds	r3, #2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	431a      	orrs	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_xlsb = (uint32_t)reg_data[3];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3303      	adds	r3, #3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 8;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[5] << 16;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3305      	adds	r3, #5
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	431a      	orrs	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	605a      	str	r2, [r3, #4]
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <compensate_data>:
 * @brief This internal API is used to compensate the pressure or temperature
 * or both the data according to the component selected by the user.
 */
static int8_t compensate_data(uint8_t sensor_comp, const struct bmp3_uncomp_data *uncomp_data,
				     struct bmp3_data *comp_data, struct bmp3_calib_data *calib_data)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BMP3_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d026      	beq.n	80023a4 <compensate_data+0x68>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d023      	beq.n	80023a4 <compensate_data+0x68>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <compensate_data+0x68>
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BMP3_PRESS | BMP3_TEMP)) {
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <compensate_data+0x46>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	68b8      	ldr	r0, [r7, #8]
 8002370:	f000 f9e8 	bl	8002744 <compensate_temperature>
 8002374:	eeb0 7a40 	vmov.f32	s14, s0
 8002378:	eef0 7a60 	vmov.f32	s15, s1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BMP3_PRESS) {
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <compensate_data+0x6c>
			/* Compensate the pressure data */

			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	68b8      	ldr	r0, [r7, #8]
 8002390:	f000 fa1f 	bl	80027d2 <compensate_pressure>
 8002394:	eeb0 7a40 	vmov.f32	s14, s0
 8002398:	eef0 7a60 	vmov.f32	s15, s1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	ed83 7b02 	vstr	d7, [r3, #8]
		if (sensor_comp & BMP3_PRESS) {
 80023a2:	e001      	b.n	80023a8 <compensate_data+0x6c>
		}
	} else {
		rslt = BMP3_E_NULL_PTR;
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80023a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
	/* Temporary variable to store the aligned trim data */
	struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3388      	adds	r3, #136	; 0x88
 80023c2:	617b      	str	r3, [r7, #20]
	struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3310      	adds	r3, #16
 80023c8:	613b      	str	r3, [r7, #16]
	/* Temporary variable */
	double temp_var;

	/* 1 / 2^8 */
	temp_var = 0.00390625f;
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4ba4      	ldr	r3, [pc, #656]	; (8002660 <parse_calib_data+0x2ac>)
 80023d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	801a      	strh	r2, [r3, #0]
	quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f87e 	bl	80004f4 <__aeabi_ui2d>
 80023f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fc:	f7fe fa1e 	bl	800083c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	e9c1 2300 	strd	r2, r3, [r1]

	reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3303      	adds	r3, #3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3302      	adds	r3, #2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21b      	sxth	r3, r3
 8002420:	b29a      	uxth	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	805a      	strh	r2, [r3, #2]
	temp_var = 1073741824.0f;
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b8e      	ldr	r3, [pc, #568]	; (8002664 <parse_calib_data+0x2b0>)
 800242c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f85d 	bl	80004f4 <__aeabi_ui2d>
 800243a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800243e:	f7fe f9fd 	bl	800083c <__aeabi_ddiv>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	e9c1 2302 	strd	r2, r3, [r1, #8]

	reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b25a      	sxtb	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	711a      	strb	r2, [r3, #4]
	temp_var = 281474976710656.0f;
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	4b82      	ldr	r3, [pc, #520]	; (8002668 <parse_calib_data+0x2b4>)
 800245e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f853 	bl	8000514 <__aeabi_i2d>
 800246e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002472:	f7fe f9e3 	bl	800083c <__aeabi_ddiv>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	6939      	ldr	r1, [r7, #16]
 800247c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3306      	adds	r3, #6
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b21a      	sxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3305      	adds	r3, #5
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b21b      	sxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b21a      	sxth	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	80da      	strh	r2, [r3, #6]
	temp_var = 1048576.0f;
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	4b73      	ldr	r3, [pc, #460]	; (800266c <parse_calib_data+0x2b8>)
 80024a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f830 	bl	8000514 <__aeabi_i2d>
 80024b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b8:	f7fe f9c0 	bl	800083c <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	6939      	ldr	r1, [r7, #16]
 80024c2:	e9c1 2306 	strd	r2, r3, [r1, #24]

	reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3308      	adds	r3, #8
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3307      	adds	r3, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21a      	sxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	811a      	strh	r2, [r3, #8]
	temp_var = 536870912.0f;
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b62      	ldr	r3, [pc, #392]	; (8002670 <parse_calib_data+0x2bc>)
 80024e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024f0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f80d 	bl	8000514 <__aeabi_i2d>
 80024fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fe:	f7fe f99d 	bl	800083c <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	6939      	ldr	r1, [r7, #16]
 8002508:	e9c1 2308 	strd	r2, r3, [r1, #32]

	reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3309      	adds	r3, #9
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b25a      	sxtb	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	729a      	strb	r2, [r3, #10]
	temp_var = 4294967296.0f;
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	4b55      	ldr	r3, [pc, #340]	; (8002674 <parse_calib_data+0x2c0>)
 800251e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd fff3 	bl	8000514 <__aeabi_i2d>
 800252e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002532:	f7fe f983 	bl	800083c <__aeabi_ddiv>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	330a      	adds	r3, #10
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b25a      	sxtb	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	72da      	strb	r2, [r3, #11]
	temp_var = 137438953472.0f;
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <parse_calib_data+0x2c4>)
 8002552:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffd9 	bl	8000514 <__aeabi_i2d>
 8002562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002566:	f7fe f969 	bl	800083c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	6939      	ldr	r1, [r7, #16]
 8002570:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	330c      	adds	r3, #12
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	330b      	adds	r3, #11
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b21b      	sxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b21b      	sxth	r3, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	819a      	strh	r2, [r3, #12]
	/* 1 / 2^3 */
	temp_var = 0.125f;
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002598:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	899b      	ldrh	r3, [r3, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffa7 	bl	80004f4 <__aeabi_ui2d>
 80025a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025aa:	f7fe f947 	bl	800083c <__aeabi_ddiv>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	6939      	ldr	r1, [r7, #16]
 80025b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14],  reg_data[13]);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	330e      	adds	r3, #14
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	330d      	adds	r3, #13
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	81da      	strh	r2, [r3, #14]
	temp_var = 64.0f;
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <parse_calib_data+0x2c8>)
 80025da:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	89db      	ldrh	r3, [r3, #14]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff86 	bl	80004f4 <__aeabi_ui2d>
 80025e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ec:	f7fe f926 	bl	800083c <__aeabi_ddiv>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	6939      	ldr	r1, [r7, #16]
 80025f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	330f      	adds	r3, #15
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b25a      	sxtb	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	741a      	strb	r2, [r3, #16]
	temp_var = 256.0f;
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <parse_calib_data+0x2cc>)
 800260c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff7c 	bl	8000514 <__aeabi_i2d>
 800261c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002620:	f7fe f90c 	bl	800083c <__aeabi_ddiv>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	6939      	ldr	r1, [r7, #16]
 800262a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3310      	adds	r3, #16
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b25a      	sxtb	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	745a      	strb	r2, [r3, #17]
	temp_var = 32768.0f;
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <parse_calib_data+0x2d0>)
 8002640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff62 	bl	8000514 <__aeabi_i2d>
 8002650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002654:	f7fe f8f2 	bl	800083c <__aeabi_ddiv>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	e013      	b.n	8002688 <parse_calib_data+0x2d4>
 8002660:	3f700000 	.word	0x3f700000
 8002664:	41d00000 	.word	0x41d00000
 8002668:	42f00000 	.word	0x42f00000
 800266c:	41300000 	.word	0x41300000
 8002670:	41c00000 	.word	0x41c00000
 8002674:	41f00000 	.word	0x41f00000
 8002678:	42400000 	.word	0x42400000
 800267c:	40500000 	.word	0x40500000
 8002680:	40700000 	.word	0x40700000
 8002684:	40e00000 	.word	0x40e00000
 8002688:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3312      	adds	r3, #18
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b21a      	sxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3311      	adds	r3, #17
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	825a      	strh	r2, [r3, #18]
	temp_var = 281474976710656.0f;
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <parse_calib_data+0x38c>)
 80026ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff2c 	bl	8000514 <__aeabi_i2d>
 80026bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c0:	f7fe f8bc 	bl	800083c <__aeabi_ddiv>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	6939      	ldr	r1, [r7, #16]
 80026ca:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	reg_calib_data->par_p10 = (int8_t)reg_data[19];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3313      	adds	r3, #19
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b25a      	sxtb	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	751a      	strb	r2, [r3, #20]
	temp_var = 281474976710656.0f;
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <parse_calib_data+0x38c>)
 80026e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff12 	bl	8000514 <__aeabi_i2d>
 80026f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f4:	f7fe f8a2 	bl	800083c <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3314      	adds	r3, #20
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b25a      	sxtb	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	755a      	strb	r2, [r3, #21]
	temp_var = 36893488147419103232.0f;
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8002716:	e9c7 2302 	strd	r2, r3, [r7, #8]
	quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fef7 	bl	8000514 <__aeabi_i2d>
 8002726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272a:	f7fe f887 	bl	800083c <__aeabi_ddiv>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	42f00000 	.word	0x42f00000

08002744 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data,
						struct bmp3_calib_data *calib_data)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	uint32_t uncomp_temp = uncomp_data->temperature;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]
	double partial_data1;
	double partial_data2;

	partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8002754:	69f8      	ldr	r0, [r7, #28]
 8002756:	f7fd fecd 	bl	80004f4 <__aeabi_ui2d>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd fd8a 	bl	8000278 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	e9c7 2304 	strd	r2, r3, [r7, #16]
	partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002772:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002776:	f7fd ff37 	bl	80005e8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	/* Update the compensated temperature in calib structure since this is
	   needed for pressure calculation */
	calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1)
 8002782:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800278a:	f7fd ff2d 	bl	80005e8 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
							* calib_data->quantized_calib_data.par_t3;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800279c:	f7fd ff24 	bl	80005e8 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
	calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1)
 80027a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ac:	f7fd fd66 	bl	800027c <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	/* Returns compensated temperature */
	return calib_data->quantized_calib_data.t_lin;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80027c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data,
					const struct bmp3_calib_data *calib_data)
{
 80027d2:	b5b0      	push	{r4, r5, r7, lr}
 80027d4:	b092      	sub	sp, #72	; 0x48
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
	const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	647b      	str	r3, [r7, #68]	; 0x44
	double partial_data3;
	double partial_data4;
	double partial_out1;
	double partial_out2;

	partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80027ec:	f7fd fefc 	bl	80005e8 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	partial_data2 = quantized_calib_data->par_p7 * bmp3_pow(quantized_calib_data->t_lin, 2);
 80027f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fa:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80027fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002800:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002804:	2002      	movs	r0, #2
 8002806:	eeb0 0a47 	vmov.f32	s0, s14
 800280a:	eef0 0a67 	vmov.f32	s1, s15
 800280e:	f000 f901 	bl	8002a14 <bmp3_pow>
 8002812:	ec53 2b10 	vmov	r2, r3, d0
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fd fee5 	bl	80005e8 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	partial_data3 = quantized_calib_data->par_p8 * bmp3_pow(quantized_calib_data->t_lin, 3);
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002832:	2003      	movs	r0, #3
 8002834:	eeb0 0a47 	vmov.f32	s0, s14
 8002838:	eef0 0a67 	vmov.f32	s1, s15
 800283c:	f000 f8ea 	bl	8002a14 <bmp3_pow>
 8002840:	ec53 2b10 	vmov	r2, r3, d0
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f7fd fece 	bl	80005e8 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8002854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002856:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800285a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800285e:	f7fd fd0d 	bl	800027c <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800286e:	f7fd fd05 	bl	800027c <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800287a:	f7fd fcff 	bl	800027c <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	e9c7 2308 	strd	r2, r3, [r7, #32]

	partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8002886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002888:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800288c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002892:	f7fd fea9 	bl	80005e8 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	partial_data2 = quantized_calib_data->par_p3 * bmp3_pow(quantized_calib_data->t_lin, 2);
 800289e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80028a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80028aa:	2002      	movs	r0, #2
 80028ac:	eeb0 0a47 	vmov.f32	s0, s14
 80028b0:	eef0 0a67 	vmov.f32	s1, s15
 80028b4:	f000 f8ae 	bl	8002a14 <bmp3_pow>
 80028b8:	ec53 2b10 	vmov	r2, r3, d0
 80028bc:	4620      	mov	r0, r4
 80028be:	4629      	mov	r1, r5
 80028c0:	f7fd fe92 	bl	80005e8 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	partial_data3 = quantized_calib_data->par_p4 * bmp3_pow(quantized_calib_data->t_lin, 3);
 80028cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ce:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80028d8:	2003      	movs	r0, #3
 80028da:	eeb0 0a47 	vmov.f32	s0, s14
 80028de:	eef0 0a67 	vmov.f32	s1, s15
 80028e2:	f000 f897 	bl	8002a14 <bmp3_pow>
 80028e6:	ec53 2b10 	vmov	r2, r3, d0
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fe7b 	bl	80005e8 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	partial_out2 = uncomp_data->pressure *
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fdf8 	bl	80004f4 <__aeabi_ui2d>
 8002904:	4604      	mov	r4, r0
 8002906:	460d      	mov	r5, r1
			(quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8002908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800290e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002912:	f7fd fcb3 	bl	800027c <__adddf3>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002922:	f7fd fcab 	bl	800027c <__adddf3>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002932:	f7fd fca3 	bl	800027c <__adddf3>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
	partial_out2 = uncomp_data->pressure *
 800293a:	4620      	mov	r0, r4
 800293c:	4629      	mov	r1, r5
 800293e:	f7fd fe53 	bl	80005e8 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	e9c7 2306 	strd	r2, r3, [r7, #24]

	partial_data1 = bmp3_pow((double)uncomp_data->pressure, 2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fdd0 	bl	80004f4 <__aeabi_ui2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	2002      	movs	r0, #2
 800295a:	ec43 2b10 	vmov	d0, r2, r3
 800295e:	f000 f859 	bl	8002a14 <bmp3_pow>
 8002962:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8002966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002968:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800296c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002974:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002978:	f7fd fe36 	bl	80005e8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fc7a 	bl	800027c <__adddf3>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	partial_data3 = partial_data1 * partial_data2;
 8002990:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002994:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002998:	f7fd fe26 	bl	80005e8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	partial_data4 = partial_data3 + bmp3_pow((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fda3 	bl	80004f4 <__aeabi_ui2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	2003      	movs	r0, #3
 80029b4:	ec43 2b10 	vmov	d0, r2, r3
 80029b8:	f000 f82c 	bl	8002a14 <bmp3_pow>
 80029bc:	ec51 0b10 	vmov	r0, r1, d0
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029c6:	f7fd fe0f 	bl	80005e8 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029d2:	f7fd fc53 	bl	800027c <__adddf3>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	comp_press = partial_out1 + partial_out2 + partial_data4;
 80029de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e6:	f7fd fc49 	bl	800027c <__adddf3>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029f2:	f7fd fc43 	bl	800027c <__adddf3>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return comp_press;
 80029fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a06:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0a:	eef0 0a67 	vmov.f32	s1, s15
 8002a0e:	3748      	adds	r7, #72	; 0x48
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdb0      	pop	{r4, r5, r7, pc}

08002a14 <bmp3_pow>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 * double precision floating point values.
 */
static double bmp3_pow(double base, uint8_t power)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
	double pow_output = 1;
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <bmp3_pow+0x50>)
 8002a28:	e9c7 2304 	strd	r2, r3, [r7, #16]

	while (power != 0) {
 8002a2c:	e00c      	b.n	8002a48 <bmp3_pow+0x34>
		pow_output = base * pow_output;
 8002a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a36:	f7fd fdd7 	bl	80005e8 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		power--;
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	71fb      	strb	r3, [r7, #7]
	while (power != 0) {
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ef      	bne.n	8002a2e <bmp3_pow+0x1a>
	}

	return pow_output;
 8002a4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a56:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5a:	eef0 0a67 	vmov.f32	s1, s15
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	3ff00000 	.word	0x3ff00000

08002a68 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	uint8_t settings_changed = FALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <are_settings_changed+0x1e>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <are_settings_changed+0x22>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <null_ptr_check+0x26>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <null_ptr_check+0x26>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <null_ptr_check+0x26>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BMP3_E_NULL_PTR;
 8002abe:	23ff      	movs	r3, #255	; 0xff
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e001      	b.n	8002ac8 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BMP3_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_Z8writeLowh>:
#include "bmp3_funcs.h"

// write cs pin on channel 1
void writeLow(uint8_t pin){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
    if (pin == 1){
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <_Z8writeLowh+0x1e>
        //cs0.write(0);
        HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2102      	movs	r1, #2
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af0:	f002 fc44 	bl	800537c <HAL_GPIO_WritePin>
    }
    else if (pin == 8){
        //cs7.write(0);
        HAL_GPIO_WritePin(SPI1_CS7_GPIO_Port, SPI1_CS7_Pin, GPIO_PIN_RESET);
    }
}
 8002af4:	e041      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 2){
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d105      	bne.n	8002b08 <_Z8writeLowh+0x30>
        HAL_GPIO_WritePin(SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2120      	movs	r1, #32
 8002b00:	4820      	ldr	r0, [pc, #128]	; (8002b84 <_Z8writeLowh+0xac>)
 8002b02:	f002 fc3b 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b06:	e038      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 3){
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d105      	bne.n	8002b1a <_Z8writeLowh+0x42>
        HAL_GPIO_WritePin(SPI1_CS2_GPIO_Port, SPI1_CS2_Pin, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2108      	movs	r1, #8
 8002b12:	481c      	ldr	r0, [pc, #112]	; (8002b84 <_Z8writeLowh+0xac>)
 8002b14:	f002 fc32 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b18:	e02f      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 4){
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d105      	bne.n	8002b2c <_Z8writeLowh+0x54>
        HAL_GPIO_WritePin(SPI1_CS3_GPIO_Port, SPI1_CS3_Pin, GPIO_PIN_RESET);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2101      	movs	r1, #1
 8002b24:	4817      	ldr	r0, [pc, #92]	; (8002b84 <_Z8writeLowh+0xac>)
 8002b26:	f002 fc29 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b2a:	e026      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 5){
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d106      	bne.n	8002b40 <_Z8writeLowh+0x68>
        HAL_GPIO_WritePin(SPI1_CS4_GPIO_Port, SPI1_CS4_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2101      	movs	r1, #1
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3a:	f002 fc1f 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b3e:	e01c      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 6){
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d105      	bne.n	8002b52 <_Z8writeLowh+0x7a>
        HAL_GPIO_WritePin(SPI1_CS5_GPIO_Port, SPI1_CS5_Pin, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2102      	movs	r1, #2
 8002b4a:	480f      	ldr	r0, [pc, #60]	; (8002b88 <_Z8writeLowh+0xb0>)
 8002b4c:	f002 fc16 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b50:	e013      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 7){
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	d106      	bne.n	8002b66 <_Z8writeLowh+0x8e>
        HAL_GPIO_WritePin(SPI1_CS6_GPIO_Port, SPI1_CS6_Pin, GPIO_PIN_RESET);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b60:	f002 fc0c 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b64:	e009      	b.n	8002b7a <_Z8writeLowh+0xa2>
    else if (pin == 8){
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d106      	bne.n	8002b7a <_Z8writeLowh+0xa2>
        HAL_GPIO_WritePin(SPI1_CS7_GPIO_Port, SPI1_CS7_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b76:	f002 fc01 	bl	800537c <HAL_GPIO_WritePin>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	48000400 	.word	0x48000400
 8002b88:	48001400 	.word	0x48001400

08002b8c <_Z9writeHighh>:

void writeHigh(uint8_t pin){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
    if (pin == 1){
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <_Z9writeHighh+0x1e>
        //cs0.write(1);
        HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f002 fbea 	bl	800537c <HAL_GPIO_WritePin>
    }
    else if (pin == 8){
        //cs7.write(1);
        HAL_GPIO_WritePin(SPI1_CS7_GPIO_Port, SPI1_CS7_Pin, GPIO_PIN_SET);
    }
}
 8002ba8:	e041      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 2){
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d105      	bne.n	8002bbc <_Z9writeHighh+0x30>
        HAL_GPIO_WritePin(SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	4820      	ldr	r0, [pc, #128]	; (8002c38 <_Z9writeHighh+0xac>)
 8002bb6:	f002 fbe1 	bl	800537c <HAL_GPIO_WritePin>
}
 8002bba:	e038      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 3){
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d105      	bne.n	8002bce <_Z9writeHighh+0x42>
        HAL_GPIO_WritePin(SPI1_CS2_GPIO_Port, SPI1_CS2_Pin, GPIO_PIN_SET);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2108      	movs	r1, #8
 8002bc6:	481c      	ldr	r0, [pc, #112]	; (8002c38 <_Z9writeHighh+0xac>)
 8002bc8:	f002 fbd8 	bl	800537c <HAL_GPIO_WritePin>
}
 8002bcc:	e02f      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 4){
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d105      	bne.n	8002be0 <_Z9writeHighh+0x54>
        HAL_GPIO_WritePin(SPI1_CS3_GPIO_Port, SPI1_CS3_Pin, GPIO_PIN_SET);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4817      	ldr	r0, [pc, #92]	; (8002c38 <_Z9writeHighh+0xac>)
 8002bda:	f002 fbcf 	bl	800537c <HAL_GPIO_WritePin>
}
 8002bde:	e026      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 5){
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d106      	bne.n	8002bf4 <_Z9writeHighh+0x68>
        HAL_GPIO_WritePin(SPI1_CS4_GPIO_Port, SPI1_CS4_Pin, GPIO_PIN_SET);
 8002be6:	2201      	movs	r2, #1
 8002be8:	2101      	movs	r1, #1
 8002bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bee:	f002 fbc5 	bl	800537c <HAL_GPIO_WritePin>
}
 8002bf2:	e01c      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 6){
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d105      	bne.n	8002c06 <_Z9writeHighh+0x7a>
        HAL_GPIO_WritePin(SPI1_CS5_GPIO_Port, SPI1_CS5_Pin, GPIO_PIN_SET);
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	480f      	ldr	r0, [pc, #60]	; (8002c3c <_Z9writeHighh+0xb0>)
 8002c00:	f002 fbbc 	bl	800537c <HAL_GPIO_WritePin>
}
 8002c04:	e013      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 7){
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d106      	bne.n	8002c1a <_Z9writeHighh+0x8e>
        HAL_GPIO_WritePin(SPI1_CS6_GPIO_Port, SPI1_CS6_Pin, GPIO_PIN_SET);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2110      	movs	r1, #16
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f002 fbb2 	bl	800537c <HAL_GPIO_WritePin>
}
 8002c18:	e009      	b.n	8002c2e <_Z9writeHighh+0xa2>
    else if (pin == 8){
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d106      	bne.n	8002c2e <_Z9writeHighh+0xa2>
        HAL_GPIO_WritePin(SPI1_CS7_GPIO_Port, SPI1_CS7_Pin, GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2a:	f002 fba7 	bl	800537c <HAL_GPIO_WritePin>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	48000400 	.word	0x48000400
 8002c3c:	48001400 	.word	0x48001400

08002c40 <_Z13bmp_spi1_readhhPht>:



// General Read and Write functions for channel 1
// read function: |0x80 done in library, dummy byte taken care of in library
int8_t bmp_spi1_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	603a      	str	r2, [r7, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	71bb      	strb	r3, [r7, #6]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80bb      	strh	r3, [r7, #4]
//    for(int i = 0; i < len; i++){
//        *(reg_data+i) = spi1.write(0x00); // read in 2nd byte = chip_id
//    }
//    writeHigh(cspin);

    writeLow(cspin);
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff3d 	bl	8002ad8 <_Z8writeLowh>
    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY);
 8002c5e:	1db9      	adds	r1, r7, #6
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c64:	2201      	movs	r2, #1
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <_Z13bmp_spi1_readhhPht+0x4c>)
 8002c68:	f004 fd91 	bl	800778e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, reg_data, len, HAL_MAX_DELAY);
 8002c6c:	88ba      	ldrh	r2, [r7, #4]
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <_Z13bmp_spi1_readhhPht+0x4c>)
 8002c76:	f004 feff 	bl	8007a78 <HAL_SPI_Receive>
    writeHigh(cspin);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff85 	bl	8002b8c <_Z9writeHighh>
    return 0;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000bfc 	.word	0x20000bfc

08002c90 <_Z14bmp_spi1_writehhPht>:

int8_t bmp_spi1_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	603a      	str	r2, [r7, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	71bb      	strb	r3, [r7, #6]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80bb      	strh	r3, [r7, #4]
//    else{
//        spi1.write(reg_data[0]);
//    }
//	  writeHigh(cspin);

	writeLow(cspin);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff15 	bl	8002ad8 <_Z8writeLowh>
    // HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	// HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY);
 8002cae:	1db9      	adds	r1, r7, #6
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4815      	ldr	r0, [pc, #84]	; (8002d0c <_Z14bmp_spi1_writehhPht+0x7c>)
 8002cb8:	f004 fd69 	bl	800778e <HAL_SPI_Transmit>
    if (len>1) {
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d913      	bls.n	8002cea <_Z14bmp_spi1_writehhPht+0x5a>
        for(int i = 0; i < len-1; i++){
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	88bb      	ldrh	r3, [r7, #4]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	da13      	bge.n	8002cf8 <_Z14bmp_spi1_writehhPht+0x68>
			HAL_SPI_Transmit(&hspi1, (reg_data+i), 1, HAL_MAX_DELAY);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	18d1      	adds	r1, r2, r3
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cda:	2201      	movs	r2, #1
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <_Z14bmp_spi1_writehhPht+0x7c>)
 8002cde:	f004 fd56 	bl	800778e <HAL_SPI_Transmit>
        for(int i = 0; i < len-1; i++){
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e7ed      	b.n	8002cc6 <_Z14bmp_spi1_writehhPht+0x36>
		}
	}
	else{
		HAL_SPI_Transmit(&hspi1, reg_data, 1, HAL_MAX_DELAY);
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cee:	2201      	movs	r2, #1
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	4806      	ldr	r0, [pc, #24]	; (8002d0c <_Z14bmp_spi1_writehhPht+0x7c>)
 8002cf4:	f004 fd4b 	bl	800778e <HAL_SPI_Transmit>
	}
    writeHigh(cspin);
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff46 	bl	8002b8c <_Z9writeHighh>
    return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000bfc 	.word	0x20000bfc

08002d10 <_Z12bmp_delay_msm>:

// Delay function
void bmp_delay_ms(uint32_t msec){ //delay in milliseconds
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    HAL_Delay(msec);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 fbe9 	bl	80044f0 <HAL_Delay>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <MX_CAN_Init+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d34:	2204      	movs	r2, #4
 8002d36:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d4a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d4e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002d52:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002d78:	4804      	ldr	r0, [pc, #16]	; (8002d8c <MX_CAN_Init+0x64>)
 8002d7a:	f001 fbdd 	bl	8004538 <HAL_CAN_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002d84:	f000 ff53 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000094 	.word	0x20000094
 8002d90:	40006400 	.word	0x40006400

08002d94 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_CAN_MspInit+0xac>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d140      	bne.n	8002e38 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	61d3      	str	r3, [r2, #28]
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	6153      	str	r3, [r2, #20]
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_CAN_MspInit+0xb0>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f002 f947 	bl	8005098 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2013      	movs	r0, #19
 8002e10:	f002 f8fd 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8002e14:	2013      	movs	r0, #19
 8002e16:	f002 f916 	bl	8005046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

	// hacky way to fix pull-up resistor issue, could find a way to change in .ioc file?
    HAL_NVIC_DisableIRQ(CAN_TX_IRQn);
 8002e1a:	2013      	movs	r0, #19
 8002e1c:	f002 f921 	bl	8005062 <HAL_NVIC_DisableIRQ>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2e:	f002 f933 	bl	8005098 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8002e32:	2013      	movs	r0, #19
 8002e34:	f002 f907 	bl	8005046 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40006400 	.word	0x40006400
 8002e44:	40021000 	.word	0x40021000

08002e48 <_Z19pack_pressure_replyPhS_S_S_P11ForceSensor>:
uint8_t txMsg_p1_data[8];
uint8_t txMsg_p2_data[8];
uint8_t txMsg_p3_data[8];
uint8_t txMsg_p4_data[8];

void pack_pressure_reply(uint8_t *msg1, uint8_t *msg2, uint8_t *msg3, uint8_t *msg4, ForceSensor * fs){
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
     msg1[3] = fs->raw_data[0]&0xFF;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
     msg1[2] = (fs->raw_data[0]>>8)&0xFF;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	121a      	asrs	r2, r3, #8
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
     msg1[1] = (fs->raw_data[0]>>16)&0xFF;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	141a      	asrs	r2, r3, #16
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
     msg1[0] = (fs->raw_data[0]>>24)&0xFF;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0e1b      	lsrs	r3, r3, #24
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	701a      	strb	r2, [r3, #0]
     msg1[7] = fs->raw_data[1]&0xFF;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3307      	adds	r3, #7
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
     msg1[6] = (fs->raw_data[1]>>8)&0xFF;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	121a      	asrs	r2, r3, #8
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3306      	adds	r3, #6
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]
     msg1[5] = (fs->raw_data[1]>>16)&0xFF;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	141a      	asrs	r2, r3, #16
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3305      	adds	r3, #5
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
     msg1[4] = (fs->raw_data[1]>>24)&0xFF;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0e1a      	lsrs	r2, r3, #24
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]

     msg2[3] = fs->raw_data[2]&0xFF;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3303      	adds	r3, #3
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
     msg2[2] = (fs->raw_data[2]>>8)&0xFF;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	121a      	asrs	r2, r3, #8
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
     msg2[1] = (fs->raw_data[2]>>16)&0xFF;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	141a      	asrs	r2, r3, #16
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]
     msg2[0] = (fs->raw_data[2]>>24)&0xFF;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0e1b      	lsrs	r3, r3, #24
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	701a      	strb	r2, [r3, #0]
     msg2[7] = fs->raw_data[3]&0xFF;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3307      	adds	r3, #7
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
     msg2[6] = (fs->raw_data[3]>>8)&0xFF;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	121a      	asrs	r2, r3, #8
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3306      	adds	r3, #6
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]
     msg2[5] = (fs->raw_data[3]>>16)&0xFF;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	141a      	asrs	r2, r3, #16
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3305      	adds	r3, #5
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]
     msg2[4] = (fs->raw_data[3]>>24)&0xFF;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	0e1a      	lsrs	r2, r3, #24
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3304      	adds	r3, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

     msg3[3] = fs->raw_data[4]&0xFF;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3303      	adds	r3, #3
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
     msg3[2] = (fs->raw_data[4]>>8)&0xFF;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	121a      	asrs	r2, r3, #8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3302      	adds	r3, #2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
     msg3[1] = (fs->raw_data[4]>>16)&0xFF;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	141a      	asrs	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]
     msg3[0] = (fs->raw_data[4]>>24)&0xFF;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	0e1b      	lsrs	r3, r3, #24
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	701a      	strb	r2, [r3, #0]
     msg3[7] = fs->raw_data[5]&0xFF;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3307      	adds	r3, #7
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
     msg3[6] = (fs->raw_data[5]>>8)&0xFF;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	121a      	asrs	r2, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3306      	adds	r3, #6
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]
     msg3[5] = (fs->raw_data[5]>>16)&0xFF;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	141a      	asrs	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3305      	adds	r3, #5
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
     msg3[4] = (fs->raw_data[5]>>24)&0xFF;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	0e1a      	lsrs	r2, r3, #24
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

     msg4[3] = fs->raw_data[6]&0xFF;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	3303      	adds	r3, #3
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
     msg4[2] = (fs->raw_data[6]>>8)&0xFF;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	121a      	asrs	r2, r3, #8
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
     msg4[1] = (fs->raw_data[6]>>16)&0xFF;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	141a      	asrs	r2, r3, #16
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
     msg4[0] = (fs->raw_data[6]>>24)&0xFF;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	0e1b      	lsrs	r3, r3, #24
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
     msg4[7] = fs->raw_data[7]&0xFF;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	3307      	adds	r3, #7
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
     msg4[6] = (fs->raw_data[7]>>8)&0xFF;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	121a      	asrs	r2, r3, #8
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	3306      	adds	r3, #6
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
     msg4[5] = (fs->raw_data[7]>>16)&0xFF;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	141a      	asrs	r2, r3, #16
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	3305      	adds	r3, #5
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
     msg4[4] = (fs->raw_data[7]>>24)&0xFF;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	0e1a      	lsrs	r2, r3, #24
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <_Z16pack_force_replyPhP11ForceSensor>:

void pack_force_reply(uint8_t * msg, ForceSensor * fs){
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

     /// limit data to be within bounds ///
     float fx_temp = fminf(fmaxf(FT_MIN, fs->output_data[0]), FT_MAX);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800301c:	eef0 0a67 	vmov.f32	s1, s15
 8003020:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8003024:	f006 fb17 	bl	8009656 <fmaxf>
 8003028:	eef0 7a40 	vmov.f32	s15, s0
 800302c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	f006 fb2a 	bl	800968c <fminf>
 8003038:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
     float fy_temp = fminf(fmaxf(FT_MIN, fs->output_data[1]), FT_MAX);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003042:	eef0 0a67 	vmov.f32	s1, s15
 8003046:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 800304a:	f006 fb04 	bl	8009656 <fmaxf>
 800304e:	eef0 7a40 	vmov.f32	s15, s0
 8003052:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f006 fb17 	bl	800968c <fminf>
 800305e:	ed87 0a08 	vstr	s0, [r7, #32]
     float fz_temp = fminf(fmaxf(FN_MIN, fs->output_data[2]), FN_MAX);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003068:	eef0 0a67 	vmov.f32	s1, s15
 800306c:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8003070:	f006 faf1 	bl	8009656 <fmaxf>
 8003074:	eef0 7a40 	vmov.f32	s15, s0
 8003078:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 800307c:	eeb0 0a67 	vmov.f32	s0, s15
 8003080:	f006 fb04 	bl	800968c <fminf>
 8003084:	ed87 0a07 	vstr	s0, [r7, #28]
     float theta_temp = fminf(fmaxf(ANG_MIN, fs->output_data[3]), ANG_MAX);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800308e:	eef0 0a67 	vmov.f32	s1, s15
 8003092:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80031d4 <_Z16pack_force_replyPhP11ForceSensor+0x1c8>
 8003096:	f006 fade 	bl	8009656 <fmaxf>
 800309a:	eef0 7a40 	vmov.f32	s15, s0
 800309e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80031d8 <_Z16pack_force_replyPhP11ForceSensor+0x1cc>
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	f006 faf1 	bl	800968c <fminf>
 80030aa:	ed87 0a06 	vstr	s0, [r7, #24]
     float phi_temp = fminf(fmaxf(ANG_MIN, fs->output_data[4]), ANG_MAX);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80030b4:	eef0 0a67 	vmov.f32	s1, s15
 80030b8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80031d4 <_Z16pack_force_replyPhP11ForceSensor+0x1c8>
 80030bc:	f006 facb 	bl	8009656 <fmaxf>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	eddf 0a44 	vldr	s1, [pc, #272]	; 80031d8 <_Z16pack_force_replyPhP11ForceSensor+0x1cc>
 80030c8:	eeb0 0a67 	vmov.f32	s0, s15
 80030cc:	f006 fade 	bl	800968c <fminf>
 80030d0:	ed87 0a05 	vstr	s0, [r7, #20]
     /// convert floats to unsigned ints ///
     uint16_t fx_int = float_to_uint(fx_temp, FT_MIN, FT_MAX, 12);
 80030d4:	200c      	movs	r0, #12
 80030d6:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80030da:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 80030de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80030e2:	f000 fda9 	bl	8003c38 <_Z13float_to_uintfffi>
 80030e6:	4603      	mov	r3, r0
 80030e8:	827b      	strh	r3, [r7, #18]
     uint16_t fy_int = float_to_uint(fy_temp, FT_MIN, FT_MAX, 12);
 80030ea:	200c      	movs	r0, #12
 80030ec:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80030f0:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 80030f4:	ed97 0a08 	vldr	s0, [r7, #32]
 80030f8:	f000 fd9e 	bl	8003c38 <_Z13float_to_uintfffi>
 80030fc:	4603      	mov	r3, r0
 80030fe:	823b      	strh	r3, [r7, #16]
     uint16_t fz_int = float_to_uint(fz_temp, FN_MIN, FN_MAX, 12);
 8003100:	200c      	movs	r0, #12
 8003102:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8003106:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 800310a:	ed97 0a07 	vldr	s0, [r7, #28]
 800310e:	f000 fd93 	bl	8003c38 <_Z13float_to_uintfffi>
 8003112:	4603      	mov	r3, r0
 8003114:	81fb      	strh	r3, [r7, #14]
     uint16_t theta_int = float_to_uint(theta_temp, ANG_MIN, ANG_MAX, 12);
 8003116:	200c      	movs	r0, #12
 8003118:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80031d8 <_Z16pack_force_replyPhP11ForceSensor+0x1cc>
 800311c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80031d4 <_Z16pack_force_replyPhP11ForceSensor+0x1c8>
 8003120:	ed97 0a06 	vldr	s0, [r7, #24]
 8003124:	f000 fd88 	bl	8003c38 <_Z13float_to_uintfffi>
 8003128:	4603      	mov	r3, r0
 800312a:	81bb      	strh	r3, [r7, #12]
     uint16_t phi_int = float_to_uint(phi_temp, ANG_MIN, ANG_MAX, 12);
 800312c:	200c      	movs	r0, #12
 800312e:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80031d8 <_Z16pack_force_replyPhP11ForceSensor+0x1cc>
 8003132:	eddf 0a28 	vldr	s1, [pc, #160]	; 80031d4 <_Z16pack_force_replyPhP11ForceSensor+0x1c8>
 8003136:	ed97 0a05 	vldr	s0, [r7, #20]
 800313a:	f000 fd7d 	bl	8003c38 <_Z13float_to_uintfffi>
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
     /// pack ints into the can buffer ///
     msg[0] = (fs->_channel<<4)|(fx_int>>8);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	b25a      	sxtb	r2, r3
 800314a:	8a7b      	ldrh	r3, [r7, #18]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	b29b      	uxth	r3, r3
 8003150:	b25b      	sxtb	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b25b      	sxtb	r3, r3
 8003156:	b2da      	uxtb	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	701a      	strb	r2, [r3, #0]
     msg[1] = fx_int&0xFF;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	8a7a      	ldrh	r2, [r7, #18]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
     msg[2] = fy_int>>4;
 8003166:	8a3b      	ldrh	r3, [r7, #16]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3302      	adds	r3, #2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]
     msg[3] = ((fy_int&0x0F)<<4)|(fz_int>>8);
 8003174:	8a3b      	ldrh	r3, [r7, #16]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	b25a      	sxtb	r2, r3
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	b29b      	uxth	r3, r3
 8003180:	b25b      	sxtb	r3, r3
 8003182:	4313      	orrs	r3, r2
 8003184:	b25a      	sxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3303      	adds	r3, #3
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
     msg[4] = fz_int&0xFF;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	89fa      	ldrh	r2, [r7, #14]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
     msg[5] = theta_int>>4;
 8003198:	89bb      	ldrh	r3, [r7, #12]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3305      	adds	r3, #5
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
     msg[6] = ((theta_int&0x0F)<<4)|(phi_int>>8);
 80031a6:	89bb      	ldrh	r3, [r7, #12]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	b25a      	sxtb	r2, r3
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b25a      	sxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3306      	adds	r3, #6
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
     msg[7] = phi_int&0xFF;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3307      	adds	r3, #7
 80031c4:	897a      	ldrh	r2, [r7, #10]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
     }
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	c2340000 	.word	0xc2340000
 80031d8:	42340000 	.word	0x42340000

080031dc <_Z14pack_tof_replyPh>:

void pack_tof_reply(uint8_t * msg){
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    /// pack ints into the can buffer ///
    msg[0] = range[0]; // top left
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <_Z14pack_tof_replyPh+0x50>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	701a      	strb	r2, [r3, #0]
    msg[1] = range[1]; // front left
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <_Z14pack_tof_replyPh+0x50>)
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3301      	adds	r3, #1
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
    msg[2] = range[2]; // top right
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <_Z14pack_tof_replyPh+0x50>)
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3302      	adds	r3, #2
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
    msg[3] = range[3]; // front right
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <_Z14pack_tof_replyPh+0x50>)
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3303      	adds	r3, #3
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]
    msg[4] = range[4]; // back
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <_Z14pack_tof_replyPh+0x50>)
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000a88 	.word	0x20000a88

08003230 <fingertip_main>:


// main CPP loop
int fingertip_main(void){
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b08b      	sub	sp, #44	; 0x2c
 8003234:	af06      	add	r7, sp, #24


	//printf("Hello from fingertip CPP main.\n\r");

	HAL_Delay(1000);
 8003236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800323a:	f001 f959 	bl	80044f0 <HAL_Delay>

	// initialize CAN messages
	can_filt.FilterBank = 0;
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <fingertip_main+0x118>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <fingertip_main+0x118>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <fingertip_main+0x118>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
	can_filt.FilterIdHigh = 0;
 8003250:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <fingertip_main+0x118>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
	can_filt.FilterIdLow = 0;
 8003256:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <fingertip_main+0x118>)
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
	can_filt.FilterMaskIdHigh = 0;
 800325c:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <fingertip_main+0x118>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
	can_filt.FilterMaskIdLow = 0;
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <fingertip_main+0x118>)
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <fingertip_main+0x118>)
 800326a:	2201      	movs	r2, #1
 800326c:	61da      	str	r2, [r3, #28]
	can_filt.FilterActivation = ENABLE;
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <fingertip_main+0x118>)
 8003270:	2201      	movs	r2, #1
 8003272:	621a      	str	r2, [r3, #32]
	can_filt.SlaveStartFilterBank = 14;
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <fingertip_main+0x118>)
 8003276:	220e      	movs	r2, #14
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

	txMsg_f1.DLC = 8;
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <fingertip_main+0x11c>)
 800327c:	2208      	movs	r2, #8
 800327e:	611a      	str	r2, [r3, #16]
	txMsg_f1.IDE = CAN_ID_STD;
 8003280:	4b32      	ldr	r3, [pc, #200]	; (800334c <fingertip_main+0x11c>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
	txMsg_f1.RTR = CAN_RTR_DATA;
 8003286:	4b31      	ldr	r3, [pc, #196]	; (800334c <fingertip_main+0x11c>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
	txMsg_f1.StdId = CAN_FORCE_1; // TODO: chamge this?
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <fingertip_main+0x11c>)
 800328e:	2205      	movs	r2, #5
 8003290:	601a      	str	r2, [r3, #0]
	txMsg_f1.TransmitGlobalTime = DISABLE;
 8003292:	4b2e      	ldr	r3, [pc, #184]	; (800334c <fingertip_main+0x11c>)
 8003294:	2200      	movs	r2, #0
 8003296:	751a      	strb	r2, [r3, #20]

	txMsg_t1.DLC = 8;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <fingertip_main+0x120>)
 800329a:	2208      	movs	r2, #8
 800329c:	611a      	str	r2, [r3, #16]
	txMsg_t1.IDE = CAN_ID_STD;
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <fingertip_main+0x120>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
	txMsg_t1.RTR = CAN_RTR_DATA;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <fingertip_main+0x120>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
	txMsg_t1.StdId = PR_TOF; //CAN_TOF_1;
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <fingertip_main+0x120>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	601a      	str	r2, [r3, #0]
	txMsg_t1.TransmitGlobalTime = DISABLE;
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <fingertip_main+0x120>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	751a      	strb	r2, [r3, #20]

	txMsg_p1.DLC = 8;
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <fingertip_main+0x124>)
 80032b8:	2208      	movs	r2, #8
 80032ba:	611a      	str	r2, [r3, #16]
	txMsg_p1.IDE = CAN_ID_STD;
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <fingertip_main+0x124>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
	txMsg_p1.RTR = CAN_RTR_DATA;
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <fingertip_main+0x124>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
	txMsg_p1.StdId = PR_1;
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <fingertip_main+0x124>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
	txMsg_p1.TransmitGlobalTime = DISABLE;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <fingertip_main+0x124>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	751a      	strb	r2, [r3, #20]

	txMsg_p2.DLC = 8;
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <fingertip_main+0x128>)
 80032d6:	2208      	movs	r2, #8
 80032d8:	611a      	str	r2, [r3, #16]
	txMsg_p2.IDE = CAN_ID_STD;
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <fingertip_main+0x128>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
	txMsg_p2.RTR = CAN_RTR_DATA;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <fingertip_main+0x128>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
	txMsg_p2.StdId = PR_2;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <fingertip_main+0x128>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
	txMsg_p2.TransmitGlobalTime = DISABLE;
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <fingertip_main+0x128>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	751a      	strb	r2, [r3, #20]

	txMsg_p3.DLC = 8;
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <fingertip_main+0x12c>)
 80032f4:	2208      	movs	r2, #8
 80032f6:	611a      	str	r2, [r3, #16]
	txMsg_p3.IDE = CAN_ID_STD;
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <fingertip_main+0x12c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
	txMsg_p3.RTR = CAN_RTR_DATA;
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <fingertip_main+0x12c>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
	txMsg_p3.StdId = PR_3;
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <fingertip_main+0x12c>)
 8003306:	2202      	movs	r2, #2
 8003308:	601a      	str	r2, [r3, #0]
	txMsg_p3.TransmitGlobalTime = DISABLE;
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <fingertip_main+0x12c>)
 800330c:	2200      	movs	r2, #0
 800330e:	751a      	strb	r2, [r3, #20]

	txMsg_p4.DLC = 8;
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <fingertip_main+0x130>)
 8003312:	2208      	movs	r2, #8
 8003314:	611a      	str	r2, [r3, #16]
	txMsg_p4.IDE = CAN_ID_STD;
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <fingertip_main+0x130>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
	txMsg_p4.RTR = CAN_RTR_DATA;
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <fingertip_main+0x130>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
	txMsg_p4.StdId = PR_4;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <fingertip_main+0x130>)
 8003324:	2203      	movs	r2, #3
 8003326:	601a      	str	r2, [r3, #0]
	txMsg_p4.TransmitGlobalTime = DISABLE;
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <fingertip_main+0x130>)
 800332a:	2200      	movs	r2, #0
 800332c:	751a      	strb	r2, [r3, #20]



//	HAL_CAN_ConfigFilter(&hcan,&can_filt); //Initialize CAN Filter
//	HAL_CAN_Start(&hcan); //Initialize CAN Bus
	if ((HAL_CAN_Start(&hcan)) != HAL_OK )
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <fingertip_main+0x134>)
 8003330:	f001 f9fd 	bl	800472e <HAL_CAN_Start>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d011      	beq.n	8003368 <fingertip_main+0x138>
	{
		//printf("Failed to start CAN.\n\r");
		while(1);
 8003344:	e7fe      	b.n	8003344 <fingertip_main+0x114>
 8003346:	bf00      	nop
 8003348:	20000b3c 	.word	0x20000b3c
 800334c:	20000ac4 	.word	0x20000ac4
 8003350:	20000aac 	.word	0x20000aac
 8003354:	20000adc 	.word	0x20000adc
 8003358:	20000af4 	.word	0x20000af4
 800335c:	20000b0c 	.word	0x20000b0c
 8003360:	20000b24 	.word	0x20000b24
 8003364:	20000094 	.word	0x20000094
	}
	//HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);// Initialize CAN Bus Rx Interrupt

	HAL_Delay(100);
 8003368:	2064      	movs	r0, #100	; 0x64
 800336a:	f001 f8c1 	bl	80044f0 <HAL_Delay>

	// initialize force sensor
	fingertip.Initialize();
 800336e:	48c0      	ldr	r0, [pc, #768]	; (8003670 <fingertip_main+0x440>)
 8003370:	f7fd fbf3 	bl	8000b5a <_ZN11ForceSensor10InitializeEv>

	// initialize time of flight sensors
    HAL_GPIO_WritePin(I2C1_TE1_GPIO_Port, I2C1_TE1_Pin, GPIO_PIN_RESET); // disable all sensors
 8003374:	2200      	movs	r2, #0
 8003376:	2104      	movs	r1, #4
 8003378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800337c:	f001 fffe 	bl	800537c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_TE2_GPIO_Port, I2C1_TE2_Pin, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	2110      	movs	r1, #16
 8003384:	48bb      	ldr	r0, [pc, #748]	; (8003674 <fingertip_main+0x444>)
 8003386:	f001 fff9 	bl	800537c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_TE3_GPIO_Port, I2C1_TE3_Pin, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	2101      	movs	r1, #1
 800338e:	48ba      	ldr	r0, [pc, #744]	; (8003678 <fingertip_main+0x448>)
 8003390:	f001 fff4 	bl	800537c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_TE4_GPIO_Port, I2C1_TE4_Pin, GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	2108      	movs	r1, #8
 8003398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339c:	f001 ffee 	bl	800537c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_TE5_GPIO_Port, I2C1_TE5_Pin, GPIO_PIN_RESET);
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033aa:	f001 ffe7 	bl	800537c <HAL_GPIO_WritePin>

	//printf("Sensor 1...\n\r");
	HAL_GPIO_WritePin(I2C1_TE1_GPIO_Port, I2C1_TE1_Pin, GPIO_PIN_SET);
 80033ae:	2201      	movs	r2, #1
 80033b0:	2104      	movs	r1, #4
 80033b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b6:	f001 ffe1 	bl	800537c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f001 f898 	bl	80044f0 <HAL_Delay>
	if(!tof1.begin(&hi2c1)){
 80033c0:	49ae      	ldr	r1, [pc, #696]	; (800367c <fingertip_main+0x44c>)
 80033c2:	48af      	ldr	r0, [pc, #700]	; (8003680 <fingertip_main+0x450>)
 80033c4:	f7fd fdc8 	bl	8000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>
		//printf("Sensor 1 init failed.\n\r");
	}
	HAL_Delay(1);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f001 f891 	bl	80044f0 <HAL_Delay>
	//printf("Changing address 1\n\r");
	tof1.setNewAddress(taddr1);
 80033ce:	4bad      	ldr	r3, [pc, #692]	; (8003684 <fingertip_main+0x454>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	48aa      	ldr	r0, [pc, #680]	; (8003680 <fingertip_main+0x450>)
 80033d6:	f7fd fdf0 	bl	8000fba <_ZN7VL6180X13setNewAddressEh>
	HAL_Delay(1);
 80033da:	2001      	movs	r0, #1
 80033dc:	f001 f888 	bl	80044f0 <HAL_Delay>
	//printf("Range mode: %d\n\r",tof1.readRangeMode());
	if(tof1.readRangeMode()==0){
 80033e0:	48a7      	ldr	r0, [pc, #668]	; (8003680 <fingertip_main+0x450>)
 80033e2:	f7fd ff31 	bl	8001248 <_ZN7VL6180X13readRangeModeEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <fingertip_main+0x1d2>
		tof1.startRangeContinuous(range_period);
 80033f6:	4ba4      	ldr	r3, [pc, #656]	; (8003688 <fingertip_main+0x458>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	48a0      	ldr	r0, [pc, #640]	; (8003680 <fingertip_main+0x450>)
 80033fe:	f7fd fef5 	bl	80011ec <_ZN7VL6180X20startRangeContinuousEt>
	}
	HAL_Delay(10);
 8003402:	200a      	movs	r0, #10
 8003404:	f001 f874 	bl	80044f0 <HAL_Delay>

	//printf("Sensor 2...\n\r");
	HAL_GPIO_WritePin(I2C1_TE2_GPIO_Port, I2C1_TE2_Pin, GPIO_PIN_SET);
 8003408:	2201      	movs	r2, #1
 800340a:	2110      	movs	r1, #16
 800340c:	4899      	ldr	r0, [pc, #612]	; (8003674 <fingertip_main+0x444>)
 800340e:	f001 ffb5 	bl	800537c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003412:	2001      	movs	r0, #1
 8003414:	f001 f86c 	bl	80044f0 <HAL_Delay>
	if(!tof2.begin(&hi2c1)){
 8003418:	4998      	ldr	r1, [pc, #608]	; (800367c <fingertip_main+0x44c>)
 800341a:	489c      	ldr	r0, [pc, #624]	; (800368c <fingertip_main+0x45c>)
 800341c:	f7fd fd9c 	bl	8000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>
		//printf("Sensor 2 init failed.\n\r");
	}
	HAL_Delay(1);
 8003420:	2001      	movs	r0, #1
 8003422:	f001 f865 	bl	80044f0 <HAL_Delay>
	//printf("Changing address 2\n\r");
	tof2.setNewAddress(taddr2);
 8003426:	4b9a      	ldr	r3, [pc, #616]	; (8003690 <fingertip_main+0x460>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4897      	ldr	r0, [pc, #604]	; (800368c <fingertip_main+0x45c>)
 800342e:	f7fd fdc4 	bl	8000fba <_ZN7VL6180X13setNewAddressEh>
	HAL_Delay(1);
 8003432:	2001      	movs	r0, #1
 8003434:	f001 f85c 	bl	80044f0 <HAL_Delay>
	//printf("Range mode: %d\n\r",tof2.readRangeMode());
	if(tof2.readRangeMode()==0){
 8003438:	4894      	ldr	r0, [pc, #592]	; (800368c <fingertip_main+0x45c>)
 800343a:	f7fd ff05 	bl	8001248 <_ZN7VL6180X13readRangeModeEv>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <fingertip_main+0x22a>
		tof2.startRangeContinuous(range_period);
 800344e:	4b8e      	ldr	r3, [pc, #568]	; (8003688 <fingertip_main+0x458>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	4619      	mov	r1, r3
 8003454:	488d      	ldr	r0, [pc, #564]	; (800368c <fingertip_main+0x45c>)
 8003456:	f7fd fec9 	bl	80011ec <_ZN7VL6180X20startRangeContinuousEt>
	}
	HAL_Delay(10);
 800345a:	200a      	movs	r0, #10
 800345c:	f001 f848 	bl	80044f0 <HAL_Delay>

	//printf("Sensor 3...\n\r");
	HAL_GPIO_WritePin(I2C1_TE3_GPIO_Port, I2C1_TE3_Pin, GPIO_PIN_SET);
 8003460:	2201      	movs	r2, #1
 8003462:	2101      	movs	r1, #1
 8003464:	4884      	ldr	r0, [pc, #528]	; (8003678 <fingertip_main+0x448>)
 8003466:	f001 ff89 	bl	800537c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800346a:	2001      	movs	r0, #1
 800346c:	f001 f840 	bl	80044f0 <HAL_Delay>
	if(!tof3.begin(&hi2c1)){
 8003470:	4982      	ldr	r1, [pc, #520]	; (800367c <fingertip_main+0x44c>)
 8003472:	4888      	ldr	r0, [pc, #544]	; (8003694 <fingertip_main+0x464>)
 8003474:	f7fd fd70 	bl	8000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>
		//printf("Sensor 3 init failed.\n\r");
	}
	HAL_Delay(1);
 8003478:	2001      	movs	r0, #1
 800347a:	f001 f839 	bl	80044f0 <HAL_Delay>
	//printf("Changing address 3\n\r");
	tof3.setNewAddress(taddr3);
 800347e:	4b86      	ldr	r3, [pc, #536]	; (8003698 <fingertip_main+0x468>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	4883      	ldr	r0, [pc, #524]	; (8003694 <fingertip_main+0x464>)
 8003486:	f7fd fd98 	bl	8000fba <_ZN7VL6180X13setNewAddressEh>
	HAL_Delay(1);
 800348a:	2001      	movs	r0, #1
 800348c:	f001 f830 	bl	80044f0 <HAL_Delay>
	//printf("Range mode: %d\n\r",tof3.readRangeMode());
	if(tof3.readRangeMode()==0){
 8003490:	4880      	ldr	r0, [pc, #512]	; (8003694 <fingertip_main+0x464>)
 8003492:	f7fd fed9 	bl	8001248 <_ZN7VL6180X13readRangeModeEv>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <fingertip_main+0x282>
		tof3.startRangeContinuous(range_period);
 80034a6:	4b78      	ldr	r3, [pc, #480]	; (8003688 <fingertip_main+0x458>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4879      	ldr	r0, [pc, #484]	; (8003694 <fingertip_main+0x464>)
 80034ae:	f7fd fe9d 	bl	80011ec <_ZN7VL6180X20startRangeContinuousEt>
	}
	HAL_Delay(10);
 80034b2:	200a      	movs	r0, #10
 80034b4:	f001 f81c 	bl	80044f0 <HAL_Delay>

	//printf("Sensor 4...\n\r");
	HAL_GPIO_WritePin(I2C1_TE4_GPIO_Port, I2C1_TE4_Pin, GPIO_PIN_SET);
 80034b8:	2201      	movs	r2, #1
 80034ba:	2108      	movs	r1, #8
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f001 ff5c 	bl	800537c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f001 f813 	bl	80044f0 <HAL_Delay>
	if(!tof4.begin(&hi2c1)){
 80034ca:	496c      	ldr	r1, [pc, #432]	; (800367c <fingertip_main+0x44c>)
 80034cc:	4873      	ldr	r0, [pc, #460]	; (800369c <fingertip_main+0x46c>)
 80034ce:	f7fd fd43 	bl	8000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>
		//printf("Sensor 4 init failed.\n\r");
	}
	HAL_Delay(1);
 80034d2:	2001      	movs	r0, #1
 80034d4:	f001 f80c 	bl	80044f0 <HAL_Delay>
	//printf("Changing address 4\n\r");
	tof4.setNewAddress(taddr4);
 80034d8:	4b71      	ldr	r3, [pc, #452]	; (80036a0 <fingertip_main+0x470>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	486f      	ldr	r0, [pc, #444]	; (800369c <fingertip_main+0x46c>)
 80034e0:	f7fd fd6b 	bl	8000fba <_ZN7VL6180X13setNewAddressEh>
	HAL_Delay(1);
 80034e4:	2001      	movs	r0, #1
 80034e6:	f001 f803 	bl	80044f0 <HAL_Delay>
	//printf("Range mode: %d\n\r",tof4.readRangeMode());
	if(tof4.readRangeMode()==0){
 80034ea:	486c      	ldr	r0, [pc, #432]	; (800369c <fingertip_main+0x46c>)
 80034ec:	f7fd feac 	bl	8001248 <_ZN7VL6180X13readRangeModeEv>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <fingertip_main+0x2dc>
		tof4.startRangeContinuous(range_period);
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <fingertip_main+0x458>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	4865      	ldr	r0, [pc, #404]	; (800369c <fingertip_main+0x46c>)
 8003508:	f7fd fe70 	bl	80011ec <_ZN7VL6180X20startRangeContinuousEt>
	}
	HAL_Delay(10);
 800350c:	200a      	movs	r0, #10
 800350e:	f000 ffef 	bl	80044f0 <HAL_Delay>

	//printf("Sensor 5...\n\r");
	HAL_GPIO_WritePin(I2C1_TE5_GPIO_Port, I2C1_TE5_Pin, GPIO_PIN_SET);
 8003512:	2201      	movs	r2, #1
 8003514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351c:	f001 ff2e 	bl	800537c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003520:	2001      	movs	r0, #1
 8003522:	f000 ffe5 	bl	80044f0 <HAL_Delay>
	if(!tof5.begin(&hi2c1)){
 8003526:	4955      	ldr	r1, [pc, #340]	; (800367c <fingertip_main+0x44c>)
 8003528:	485e      	ldr	r0, [pc, #376]	; (80036a4 <fingertip_main+0x474>)
 800352a:	f7fd fd15 	bl	8000f58 <_ZN7VL6180X5beginEP19__I2C_HandleTypeDef>
		//printf("Sensor 5 init failed.\n\r");
	}
	HAL_Delay(1);
 800352e:	2001      	movs	r0, #1
 8003530:	f000 ffde 	bl	80044f0 <HAL_Delay>
	//printf("Changing address 5\n\r");
	tof5.setNewAddress(taddr5);
 8003534:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <fingertip_main+0x478>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	485a      	ldr	r0, [pc, #360]	; (80036a4 <fingertip_main+0x474>)
 800353c:	f7fd fd3d 	bl	8000fba <_ZN7VL6180X13setNewAddressEh>
	HAL_Delay(1);
 8003540:	2001      	movs	r0, #1
 8003542:	f000 ffd5 	bl	80044f0 <HAL_Delay>
	//printf("Range mode: %d\n\r",tof5.readRangeMode());
	if(tof5.readRangeMode()==0){
 8003546:	4857      	ldr	r0, [pc, #348]	; (80036a4 <fingertip_main+0x474>)
 8003548:	f7fd fe7e 	bl	8001248 <_ZN7VL6180X13readRangeModeEv>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <fingertip_main+0x338>
		tof5.startRangeContinuous(range_period);
 800355c:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <fingertip_main+0x458>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	4850      	ldr	r0, [pc, #320]	; (80036a4 <fingertip_main+0x474>)
 8003564:	f7fd fe42 	bl	80011ec <_ZN7VL6180X20startRangeContinuousEt>
	}
	HAL_Delay(1000);
 8003568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356c:	f000 ffc0 	bl	80044f0 <HAL_Delay>

	uint16_t eval_time = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	81fb      	strh	r3, [r7, #14]
	uint16_t loop_time = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	81bb      	strh	r3, [r7, #12]
		// - Evaluating neural net takes 5990us (!!!) (with this in loop, real loop frequency is close to 100Hz)
		// - Sampling ToF sensors takes from 5*167=835us to 5*465=2325us, depending on how many have new results
		// - Packing and sending CAN messages takes ~610us (~120us each)
		// - At 200Hz loop timing, sampling typically takes ~2500-3100us

		if (sample_flag==1){
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <fingertip_main+0x47c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d1fb      	bne.n	8003578 <fingertip_main+0x348>

//			printf("Still in fingertip CPP main.\n\r");
//			HAL_Delay(1);

			// reset interrupt flag
			sample_flag = 0;
 8003580:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <fingertip_main+0x47c>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]

			loop_time = __HAL_TIM_GET_COUNTER(&htim15);
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <fingertip_main+0x480>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	81bb      	strh	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(&htim15,0);  // set the counter value a 0
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <fingertip_main+0x480>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

			// sample and evaluate pressure sensors
			fingertip.Sample(); // TODO: look into what makes this function take so long?
 8003596:	4836      	ldr	r0, [pc, #216]	; (8003670 <fingertip_main+0x440>)
 8003598:	f7fd fbac 	bl	8000cf4 <_ZN11ForceSensor6SampleEv>
//			fingertip.Evaluate();

			// sample time of flight sensors
			delay_us(10);
 800359c:	200a      	movs	r0, #10
 800359e:	f000 fe75 	bl	800428c <delay_us>
			if (tof1.isRangeComplete()){
 80035a2:	4837      	ldr	r0, [pc, #220]	; (8003680 <fingertip_main+0x450>)
 80035a4:	f7fd fdf4 	bl	8001190 <_ZN7VL6180X15isRangeCompleteEv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <fingertip_main+0x398>
				// if it is ready, get range status, mode, and result
				delay_us(10);
 80035ae:	200a      	movs	r0, #10
 80035b0:	f000 fe6c 	bl	800428c <delay_us>
				range[0] = tof1.readRangeResult();
 80035b4:	4832      	ldr	r0, [pc, #200]	; (8003680 <fingertip_main+0x450>)
 80035b6:	f7fd fe04 	bl	80011c2 <_ZN7VL6180X15readRangeResultEv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <fingertip_main+0x484>)
 80035c0:	601a      	str	r2, [r3, #0]
				delay_us(10);
 80035c2:	200a      	movs	r0, #10
 80035c4:	f000 fe62 	bl	800428c <delay_us>
			}
			delay_us(10);
 80035c8:	200a      	movs	r0, #10
 80035ca:	f000 fe5f 	bl	800428c <delay_us>
			if (tof2.isRangeComplete()){
 80035ce:	482f      	ldr	r0, [pc, #188]	; (800368c <fingertip_main+0x45c>)
 80035d0:	f7fd fdde 	bl	8001190 <_ZN7VL6180X15isRangeCompleteEv>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <fingertip_main+0x3c4>
				// if it is ready, get range status, mode, and result
				delay_us(10);
 80035da:	200a      	movs	r0, #10
 80035dc:	f000 fe56 	bl	800428c <delay_us>
				range[1] = tof2.readRangeResult();
 80035e0:	482a      	ldr	r0, [pc, #168]	; (800368c <fingertip_main+0x45c>)
 80035e2:	f7fd fdee 	bl	80011c2 <_ZN7VL6180X15readRangeResultEv>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <fingertip_main+0x484>)
 80035ec:	605a      	str	r2, [r3, #4]
				delay_us(10);
 80035ee:	200a      	movs	r0, #10
 80035f0:	f000 fe4c 	bl	800428c <delay_us>
			}
			delay_us(10);
 80035f4:	200a      	movs	r0, #10
 80035f6:	f000 fe49 	bl	800428c <delay_us>
			if (tof3.isRangeComplete()){
 80035fa:	4826      	ldr	r0, [pc, #152]	; (8003694 <fingertip_main+0x464>)
 80035fc:	f7fd fdc8 	bl	8001190 <_ZN7VL6180X15isRangeCompleteEv>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <fingertip_main+0x3f0>
				// if it is ready, get range status, mode, and result
				delay_us(10);
 8003606:	200a      	movs	r0, #10
 8003608:	f000 fe40 	bl	800428c <delay_us>
				range[2] = tof3.readRangeResult();
 800360c:	4821      	ldr	r0, [pc, #132]	; (8003694 <fingertip_main+0x464>)
 800360e:	f7fd fdd8 	bl	80011c2 <_ZN7VL6180X15readRangeResultEv>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <fingertip_main+0x484>)
 8003618:	609a      	str	r2, [r3, #8]
				delay_us(10);
 800361a:	200a      	movs	r0, #10
 800361c:	f000 fe36 	bl	800428c <delay_us>
			}
			delay_us(10);
 8003620:	200a      	movs	r0, #10
 8003622:	f000 fe33 	bl	800428c <delay_us>
			if (tof4.isRangeComplete()){
 8003626:	481d      	ldr	r0, [pc, #116]	; (800369c <fingertip_main+0x46c>)
 8003628:	f7fd fdb2 	bl	8001190 <_ZN7VL6180X15isRangeCompleteEv>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <fingertip_main+0x41c>
				// if it is ready, get range status, mode, and result
				delay_us(10);
 8003632:	200a      	movs	r0, #10
 8003634:	f000 fe2a 	bl	800428c <delay_us>
				range[3] = tof4.readRangeResult();
 8003638:	4818      	ldr	r0, [pc, #96]	; (800369c <fingertip_main+0x46c>)
 800363a:	f7fd fdc2 	bl	80011c2 <_ZN7VL6180X15readRangeResultEv>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <fingertip_main+0x484>)
 8003644:	60da      	str	r2, [r3, #12]
				delay_us(10);
 8003646:	200a      	movs	r0, #10
 8003648:	f000 fe20 	bl	800428c <delay_us>
			}
			delay_us(10);
 800364c:	200a      	movs	r0, #10
 800364e:	f000 fe1d 	bl	800428c <delay_us>
			if (tof5.isRangeComplete()){
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <fingertip_main+0x474>)
 8003654:	f7fd fd9c 	bl	8001190 <_ZN7VL6180X15isRangeCompleteEv>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d031      	beq.n	80036c2 <fingertip_main+0x492>
				// if it is ready, get range status, mode, and result
				delay_us(10);
 800365e:	200a      	movs	r0, #10
 8003660:	f000 fe14 	bl	800428c <delay_us>
				range[4] = tof5.readRangeResult();
 8003664:	480f      	ldr	r0, [pc, #60]	; (80036a4 <fingertip_main+0x474>)
 8003666:	f7fd fdac 	bl	80011c2 <_ZN7VL6180X15readRangeResultEv>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	e023      	b.n	80036b8 <fingertip_main+0x488>
 8003670:	200000c0 	.word	0x200000c0
 8003674:	48000400 	.word	0x48000400
 8003678:	48001400 	.word	0x48001400
 800367c:	20000ba8 	.word	0x20000ba8
 8003680:	20000a60 	.word	0x20000a60
 8003684:	20000000 	.word	0x20000000
 8003688:	20000006 	.word	0x20000006
 800368c:	20000a68 	.word	0x20000a68
 8003690:	20000001 	.word	0x20000001
 8003694:	20000a70 	.word	0x20000a70
 8003698:	20000002 	.word	0x20000002
 800369c:	20000a78 	.word	0x20000a78
 80036a0:	20000003 	.word	0x20000003
 80036a4:	20000a80 	.word	0x20000a80
 80036a8:	20000004 	.word	0x20000004
 80036ac:	20000c64 	.word	0x20000c64
 80036b0:	20000d00 	.word	0x20000d00
 80036b4:	20000a88 	.word	0x20000a88
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <fingertip_main+0x5ec>)
 80036ba:	611a      	str	r2, [r3, #16]
				delay_us(10);
 80036bc:	200a      	movs	r0, #10
 80036be:	f000 fde5 	bl	800428c <delay_us>
			}

	        // pack and send CAN messages
	        pack_pressure_reply(txMsg_p1_data, txMsg_p2_data, txMsg_p3_data, txMsg_p4_data, &fingertip);
 80036c2:	4b57      	ldr	r3, [pc, #348]	; (8003820 <fingertip_main+0x5f0>)
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <fingertip_main+0x5f4>)
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <fingertip_main+0x5f8>)
 80036ca:	4958      	ldr	r1, [pc, #352]	; (800382c <fingertip_main+0x5fc>)
 80036cc:	4858      	ldr	r0, [pc, #352]	; (8003830 <fingertip_main+0x600>)
 80036ce:	f7ff fbbb 	bl	8002e48 <_Z19pack_pressure_replyPhS_S_S_P11ForceSensor>
	        pack_force_reply(txMsg_f1_data, &fingertip);
 80036d2:	4953      	ldr	r1, [pc, #332]	; (8003820 <fingertip_main+0x5f0>)
 80036d4:	4857      	ldr	r0, [pc, #348]	; (8003834 <fingertip_main+0x604>)
 80036d6:	f7ff fc99 	bl	800300c <_Z16pack_force_replyPhP11ForceSensor>
	        pack_tof_reply(txMsg_t1_data);
 80036da:	4857      	ldr	r0, [pc, #348]	; (8003838 <fingertip_main+0x608>)
 80036dc:	f7ff fd7e 	bl	80031dc <_Z14pack_tof_replyPh>

	    	// sending CAN messages
	        // TODO: select between force and tof or pressure sensor data
//	        HAL_CAN_AddTxMessage(&hcan, &txMsg_f1, txMsg_f1_data, &cmb_f1);
//			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_f1));
			HAL_CAN_AddTxMessage(&hcan, &txMsg_t1, txMsg_t1_data, &cmb_t1);
 80036e0:	4b56      	ldr	r3, [pc, #344]	; (800383c <fingertip_main+0x60c>)
 80036e2:	4a55      	ldr	r2, [pc, #340]	; (8003838 <fingertip_main+0x608>)
 80036e4:	4956      	ldr	r1, [pc, #344]	; (8003840 <fingertip_main+0x610>)
 80036e6:	4857      	ldr	r0, [pc, #348]	; (8003844 <fingertip_main+0x614>)
 80036e8:	f001 f865 	bl	80047b6 <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_t1));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <fingertip_main+0x60c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	4854      	ldr	r0, [pc, #336]	; (8003844 <fingertip_main+0x614>)
 80036f4:	f001 f92f 	bl	8004956 <HAL_CAN_IsTxMessagePending>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d000      	beq.n	800370a <fingertip_main+0x4da>
 8003708:	e7f0      	b.n	80036ec <fingertip_main+0x4bc>

			HAL_CAN_AddTxMessage(&hcan, &txMsg_p1, txMsg_p1_data, &cmb_p1);
 800370a:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <fingertip_main+0x618>)
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <fingertip_main+0x600>)
 800370e:	494f      	ldr	r1, [pc, #316]	; (800384c <fingertip_main+0x61c>)
 8003710:	484c      	ldr	r0, [pc, #304]	; (8003844 <fingertip_main+0x614>)
 8003712:	f001 f850 	bl	80047b6 <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_p1));
 8003716:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <fingertip_main+0x618>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	4849      	ldr	r0, [pc, #292]	; (8003844 <fingertip_main+0x614>)
 800371e:	f001 f91a 	bl	8004956 <HAL_CAN_IsTxMessagePending>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d000      	beq.n	8003734 <fingertip_main+0x504>
 8003732:	e7f0      	b.n	8003716 <fingertip_main+0x4e6>
	        HAL_CAN_AddTxMessage(&hcan, &txMsg_p2, txMsg_p2_data, &cmb_p2);
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <fingertip_main+0x620>)
 8003736:	4a3d      	ldr	r2, [pc, #244]	; (800382c <fingertip_main+0x5fc>)
 8003738:	4946      	ldr	r1, [pc, #280]	; (8003854 <fingertip_main+0x624>)
 800373a:	4842      	ldr	r0, [pc, #264]	; (8003844 <fingertip_main+0x614>)
 800373c:	f001 f83b 	bl	80047b6 <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_p2));
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <fingertip_main+0x620>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	483f      	ldr	r0, [pc, #252]	; (8003844 <fingertip_main+0x614>)
 8003748:	f001 f905 	bl	8004956 <HAL_CAN_IsTxMessagePending>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d000      	beq.n	800375e <fingertip_main+0x52e>
 800375c:	e7f0      	b.n	8003740 <fingertip_main+0x510>
	        HAL_CAN_AddTxMessage(&hcan, &txMsg_p3, txMsg_p3_data, &cmb_p3);
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <fingertip_main+0x628>)
 8003760:	4a31      	ldr	r2, [pc, #196]	; (8003828 <fingertip_main+0x5f8>)
 8003762:	493e      	ldr	r1, [pc, #248]	; (800385c <fingertip_main+0x62c>)
 8003764:	4837      	ldr	r0, [pc, #220]	; (8003844 <fingertip_main+0x614>)
 8003766:	f001 f826 	bl	80047b6 <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_p3));
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <fingertip_main+0x628>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	4834      	ldr	r0, [pc, #208]	; (8003844 <fingertip_main+0x614>)
 8003772:	f001 f8f0 	bl	8004956 <HAL_CAN_IsTxMessagePending>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d000      	beq.n	8003788 <fingertip_main+0x558>
 8003786:	e7f0      	b.n	800376a <fingertip_main+0x53a>
	        HAL_CAN_AddTxMessage(&hcan, &txMsg_p4, txMsg_p4_data, &cmb_p4);
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <fingertip_main+0x630>)
 800378a:	4a26      	ldr	r2, [pc, #152]	; (8003824 <fingertip_main+0x5f4>)
 800378c:	4935      	ldr	r1, [pc, #212]	; (8003864 <fingertip_main+0x634>)
 800378e:	482d      	ldr	r0, [pc, #180]	; (8003844 <fingertip_main+0x614>)
 8003790:	f001 f811 	bl	80047b6 <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, cmb_p4));
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <fingertip_main+0x630>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	482a      	ldr	r0, [pc, #168]	; (8003844 <fingertip_main+0x614>)
 800379c:	f001 f8db 	bl	8004956 <HAL_CAN_IsTxMessagePending>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d000      	beq.n	80037b2 <fingertip_main+0x582>
 80037b0:	e7f0      	b.n	8003794 <fingertip_main+0x564>


			// Print data for testing
			eval_time = __HAL_TIM_GET_COUNTER(&htim15);
 80037b2:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <fingertip_main+0x638>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	81fb      	strh	r3, [r7, #14]
//			printf("%d, %d\n\r", eval_time, loop_time);
			printf("Pressure: %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d \n\r", fingertip.raw_data[0],fingertip.raw_data[1],fingertip.raw_data[2],
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <fingertip_main+0x5f0>)
 80037bc:	685d      	ldr	r5, [r3, #4]
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <fingertip_main+0x5f0>)
 80037c0:	689e      	ldr	r6, [r3, #8]
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <fingertip_main+0x5f0>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <fingertip_main+0x5f0>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <fingertip_main+0x5f0>)
 80037ce:	6952      	ldr	r2, [r2, #20]
 80037d0:	4913      	ldr	r1, [pc, #76]	; (8003820 <fingertip_main+0x5f0>)
 80037d2:	6989      	ldr	r1, [r1, #24]
 80037d4:	4812      	ldr	r0, [pc, #72]	; (8003820 <fingertip_main+0x5f0>)
 80037d6:	69c0      	ldr	r0, [r0, #28]
 80037d8:	4c11      	ldr	r4, [pc, #68]	; (8003820 <fingertip_main+0x5f0>)
 80037da:	6a24      	ldr	r4, [r4, #32]
 80037dc:	9404      	str	r4, [sp, #16]
 80037de:	9003      	str	r0, [sp, #12]
 80037e0:	9102      	str	r1, [sp, #8]
 80037e2:	9201      	str	r2, [sp, #4]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4632      	mov	r2, r6
 80037ea:	4629      	mov	r1, r5
 80037ec:	481f      	ldr	r0, [pc, #124]	; (800386c <fingertip_main+0x63c>)
 80037ee:	f005 ffc5 	bl	800977c <iprintf>
						fingertip.raw_data[3],fingertip.raw_data[4],fingertip.raw_data[5],fingertip.raw_data[6],fingertip.raw_data[7]);
			printf("TOF: %03d,%03d,%03d,%03d,%03d\n\r", range[0], range[1], range[2], range[3], range[4]);
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <fingertip_main+0x5ec>)
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <fingertip_main+0x5ec>)
 80037f8:	6858      	ldr	r0, [r3, #4]
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <fingertip_main+0x5ec>)
 80037fc:	689c      	ldr	r4, [r3, #8]
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <fingertip_main+0x5ec>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a06      	ldr	r2, [pc, #24]	; (800381c <fingertip_main+0x5ec>)
 8003804:	6912      	ldr	r2, [r2, #16]
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	4623      	mov	r3, r4
 800380c:	4602      	mov	r2, r0
 800380e:	4818      	ldr	r0, [pc, #96]	; (8003870 <fingertip_main+0x640>)
 8003810:	f005 ffb4 	bl	800977c <iprintf>
			printf("\n\r\n\r");
 8003814:	4817      	ldr	r0, [pc, #92]	; (8003874 <fingertip_main+0x644>)
 8003816:	f005 ffb1 	bl	800977c <iprintf>
		if (sample_flag==1){
 800381a:	e6ad      	b.n	8003578 <fingertip_main+0x348>
 800381c:	20000a88 	.word	0x20000a88
 8003820:	200000c0 	.word	0x200000c0
 8003824:	20000ba0 	.word	0x20000ba0
 8003828:	20000b98 	.word	0x20000b98
 800382c:	20000b90 	.word	0x20000b90
 8003830:	20000b88 	.word	0x20000b88
 8003834:	20000b80 	.word	0x20000b80
 8003838:	20000b78 	.word	0x20000b78
 800383c:	20000b64 	.word	0x20000b64
 8003840:	20000aac 	.word	0x20000aac
 8003844:	20000094 	.word	0x20000094
 8003848:	20000b68 	.word	0x20000b68
 800384c:	20000adc 	.word	0x20000adc
 8003850:	20000b6c 	.word	0x20000b6c
 8003854:	20000af4 	.word	0x20000af4
 8003858:	20000b70 	.word	0x20000b70
 800385c:	20000b0c 	.word	0x20000b0c
 8003860:	20000b74 	.word	0x20000b74
 8003864:	20000b24 	.word	0x20000b24
 8003868:	20000d00 	.word	0x20000d00
 800386c:	0800a700 	.word	0x0800a700
 8003870:	0800a738 	.word	0x0800a738
 8003874:	0800a758 	.word	0x0800a758

08003878 <_Z41__static_initialization_and_destruction_0ii>:

		}

	}

}
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11b      	bne.n	80038c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800388e:	4293      	cmp	r3, r2
 8003890:	d116      	bne.n	80038c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
ForceSensor fingertip;
 8003892:	4819      	ldr	r0, [pc, #100]	; (80038f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003894:	f7fd f952 	bl	8000b3c <_ZN11ForceSensorC1Ev>
VL6180X tof1; // top left
 8003898:	2129      	movs	r1, #41	; 0x29
 800389a:	4818      	ldr	r0, [pc, #96]	; (80038fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800389c:	f7fd fb4d 	bl	8000f3a <_ZN7VL6180XC1Ei>
VL6180X tof2; // front left
 80038a0:	2129      	movs	r1, #41	; 0x29
 80038a2:	4817      	ldr	r0, [pc, #92]	; (8003900 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80038a4:	f7fd fb49 	bl	8000f3a <_ZN7VL6180XC1Ei>
VL6180X tof3; // top right
 80038a8:	2129      	movs	r1, #41	; 0x29
 80038aa:	4816      	ldr	r0, [pc, #88]	; (8003904 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80038ac:	f7fd fb45 	bl	8000f3a <_ZN7VL6180XC1Ei>
VL6180X tof4; // front right
 80038b0:	2129      	movs	r1, #41	; 0x29
 80038b2:	4815      	ldr	r0, [pc, #84]	; (8003908 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80038b4:	f7fd fb41 	bl	8000f3a <_ZN7VL6180XC1Ei>
VL6180X tof5; // back
 80038b8:	2129      	movs	r1, #41	; 0x29
 80038ba:	4814      	ldr	r0, [pc, #80]	; (800390c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80038bc:	f7fd fb3d 	bl	8000f3a <_ZN7VL6180XC1Ei>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d113      	bne.n	80038ee <_Z41__static_initialization_and_destruction_0ii+0x76>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10e      	bne.n	80038ee <_Z41__static_initialization_and_destruction_0ii+0x76>
 80038d0:	480e      	ldr	r0, [pc, #56]	; (800390c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80038d2:	f7fd fb27 	bl	8000f24 <_ZN7VL6180XD1Ev>
VL6180X tof4; // front right
 80038d6:	480c      	ldr	r0, [pc, #48]	; (8003908 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80038d8:	f7fd fb24 	bl	8000f24 <_ZN7VL6180XD1Ev>
VL6180X tof3; // top right
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80038de:	f7fd fb21 	bl	8000f24 <_ZN7VL6180XD1Ev>
VL6180X tof2; // front left
 80038e2:	4807      	ldr	r0, [pc, #28]	; (8003900 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80038e4:	f7fd fb1e 	bl	8000f24 <_ZN7VL6180XD1Ev>
VL6180X tof1; // top left
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80038ea:	f7fd fb1b 	bl	8000f24 <_ZN7VL6180XD1Ev>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200000c0 	.word	0x200000c0
 80038fc:	20000a60 	.word	0x20000a60
 8003900:	20000a68 	.word	0x20000a68
 8003904:	20000a70 	.word	0x20000a70
 8003908:	20000a78 	.word	0x20000a78
 800390c:	20000a80 	.word	0x20000a80

08003910 <_GLOBAL__sub_I_pressure_raw>:
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
 8003914:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003918:	2001      	movs	r0, #1
 800391a:	f7ff ffad 	bl	8003878 <_Z41__static_initialization_and_destruction_0ii>
 800391e:	bd80      	pop	{r7, pc}

08003920 <_GLOBAL__sub_D_pressure_raw>:
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
 8003924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003928:	2000      	movs	r0, #0
 800392a:	f7ff ffa5 	bl	8003878 <_Z41__static_initialization_and_destruction_0ii>
 800392e:	bd80      	pop	{r7, pc}

08003930 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <MX_GPIO_Init+0xe0>)
 800394c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003950:	6153      	str	r3, [r2, #20]
 8003952:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	6153      	str	r3, [r2, #20]
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <MX_GPIO_Init+0xe0>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <MX_GPIO_Init+0xe0>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6153      	str	r3, [r2, #20]
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <MX_GPIO_Init+0xe0>)
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, I2C1_TE3_Pin|SPI1_CS5_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2103      	movs	r1, #3
 8003992:	4820      	ldr	r0, [pc, #128]	; (8003a14 <MX_GPIO_Init+0xe4>)
 8003994:	f001 fcf2 	bl	800537c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS4_Pin|SPI1_CS0_Pin|I2C1_TE1_Pin|I2C1_TE4_Pin
 8003998:	2200      	movs	r2, #0
 800399a:	f248 111f 	movw	r1, #33055	; 0x811f
 800399e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a2:	f001 fceb 	bl	800537c <HAL_GPIO_WritePin>
                          |SPI1_CS6_Pin|I2C1_TE5_Pin|SPI1_CS7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS3_Pin|SPI1_CS2_Pin|I2C1_TE2_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2139      	movs	r1, #57	; 0x39
 80039aa:	481b      	ldr	r0, [pc, #108]	; (8003a18 <MX_GPIO_Init+0xe8>)
 80039ac:	f001 fce6 	bl	800537c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = I2C1_TE3_Pin|SPI1_CS5_Pin;
 80039b0:	2303      	movs	r3, #3
 80039b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b4:	2301      	movs	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	4619      	mov	r1, r3
 80039c6:	4813      	ldr	r0, [pc, #76]	; (8003a14 <MX_GPIO_Init+0xe4>)
 80039c8:	f001 fb66 	bl	8005098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS4_Pin|SPI1_CS0_Pin|I2C1_TE1_Pin|I2C1_TE4_Pin
 80039cc:	f248 131f 	movw	r3, #33055	; 0x811f
 80039d0:	60fb      	str	r3, [r7, #12]
                          |SPI1_CS6_Pin|I2C1_TE5_Pin|SPI1_CS7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d2:	2301      	movs	r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	4619      	mov	r1, r3
 80039e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e8:	f001 fb56 	bl	8005098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CS3_Pin|SPI1_CS2_Pin|I2C1_TE2_Pin|SPI1_CS1_Pin;
 80039ec:	2339      	movs	r3, #57	; 0x39
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	4619      	mov	r1, r3
 8003a02:	4805      	ldr	r0, [pc, #20]	; (8003a18 <MX_GPIO_Init+0xe8>)
 8003a04:	f001 fb48 	bl	8005098 <HAL_GPIO_Init>

}
 8003a08:	bf00      	nop
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	48001400 	.word	0x48001400
 8003a18:	48000400 	.word	0x48000400

08003a1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a22:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <MX_I2C1_Init+0x78>)
 8003a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a28:	f240 220b 	movw	r2, #523	; 0x20b
 8003a2c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a58:	480d      	ldr	r0, [pc, #52]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a5a:	f001 fca7 	bl	80053ac <HAL_I2C_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a64:	f000 f8e3 	bl	8003c2e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4809      	ldr	r0, [pc, #36]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a6c:	f002 f9aa 	bl	8005dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003a76:	f000 f8da 	bl	8003c2e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <MX_I2C1_Init+0x74>)
 8003a7e:	f002 f9ec 	bl	8005e5a <HAL_I2CEx_ConfigDigitalFilter>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003a88:	f000 f8d1 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000ba8 	.word	0x20000ba8
 8003a94:	40005400 	.word	0x40005400

08003a98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <HAL_I2C_MspInit+0x7c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d127      	bne.n	8003b0a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6153      	str	r3, [r2, #20]
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ad2:	23c0      	movs	r3, #192	; 0xc0
 8003ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	480b      	ldr	r0, [pc, #44]	; (8003b1c <HAL_I2C_MspInit+0x84>)
 8003aee:	f001 fad3 	bl	8005098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003afc:	61d3      	str	r3, [r2, #28]
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_I2C_MspInit+0x80>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40005400 	.word	0x40005400
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	48000400 	.word	0x48000400

08003b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b24:	f000 fc7e 	bl	8004424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b28:	f000 f826 	bl	8003b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b2c:	f7ff ff00 	bl	8003930 <MX_GPIO_Init>
  MX_CAN_Init();
 8003b30:	f7ff f8fa 	bl	8002d28 <MX_CAN_Init>
  MX_I2C1_Init();
 8003b34:	f7ff ff72 	bl	8003a1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003b38:	f000 f8c4 	bl	8003cc4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003b3c:	f000 fbd4 	bl	80042e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003b40:	f000 fa62 	bl	8004008 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003b44:	f000 faae 	bl	80040a4 <MX_TIM3_Init>
  MX_TIM15_Init();
 8003b48:	f000 fafa 	bl	8004140 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003b4c:	4807      	ldr	r0, [pc, #28]	; (8003b6c <main+0x4c>)
 8003b4e:	f004 fd55 	bl	80085fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8003b52:	4807      	ldr	r0, [pc, #28]	; (8003b70 <main+0x50>)
 8003b54:	f004 fcfe 	bl	8008554 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <main+0x54>)
 8003b5a:	f004 fcfb 	bl	8008554 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //printf("\n\rStarting fingertip sensor...\n\r");
  fingertip_main();
 8003b5e:	f7ff fb67 	bl	8003230 <fingertip_main>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//printf("Hello World from Main!\n\r");
	HAL_Delay(1000);
 8003b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b66:	f000 fcc3 	bl	80044f0 <HAL_Delay>
 8003b6a:	e7fa      	b.n	8003b62 <main+0x42>
 8003b6c:	20000c68 	.word	0x20000c68
 8003b70:	20000cb4 	.word	0x20000cb4
 8003b74:	20000d00 	.word	0x20000d00

08003b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b096      	sub	sp, #88	; 0x58
 8003b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b82:	2228      	movs	r2, #40	; 0x28
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f005 fdf0 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b9c:	463b      	mov	r3, r7
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003bc2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003bc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f002 f991 	bl	8005ef4 <HAL_RCC_OscConfig>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003bd8:	f000 f829 	bl	8003c2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bdc:	230f      	movs	r3, #15
 8003bde:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003be0:	2302      	movs	r3, #2
 8003be2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 f9b9 	bl	8006f70 <HAL_RCC_ClockConfig>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003c04:	f000 f813 	bl	8003c2e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003c08:	2321      	movs	r3, #33	; 0x21
 8003c0a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c14:	463b      	mov	r3, r7
 8003c16:	4618      	mov	r0, r3
 8003c18:	f003 fbe0 	bl	80073dc <HAL_RCCEx_PeriphCLKConfig>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003c22:	f000 f804 	bl	8003c2e <Error_Handler>
  }
}
 8003c26:	bf00      	nop
 8003c28:	3758      	adds	r7, #88	; 0x58
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c32:	b672      	cpsid	i
}
 8003c34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <Error_Handler+0x8>

08003c38 <_Z13float_to_uintfffi>:
    
void limit(float *x, float min, float max){
    *x = fmaxf(fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c42:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c46:	ed87 1a01 	vstr	s2, [r7, #4]
 8003c4a:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8003c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c58:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8003c60:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c82:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c8e:	ee17 3a90 	vmov	r3, s15
    }
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <__io_putchar>:
#include <stdio.h>

// from https://forum.digikey.com/t/easily-use-printf-on-stm32/20157

PUTCHAR_PROTOTYPE
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003ca8:	1d39      	adds	r1, r7, #4
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <__io_putchar+0x20>)
 8003cb2:	f005 f8fb 	bl	8008eac <HAL_UART_Transmit>
  return ch;
 8003cb6:	687b      	ldr	r3, [r7, #4]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000d4c 	.word	0x20000d4c

08003cc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <MX_SPI1_Init+0x78>)
 8003ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d12:	2207      	movs	r2, #7
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_SPI1_Init+0x74>)
 8003d24:	f003 fc90 	bl	8007648 <HAL_SPI_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d2e:	f7ff ff7e 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000bfc 	.word	0x20000bfc
 8003d3c:	40013000 	.word	0x40013000

08003d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_SPI_MspInit+0x7c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d128      	bne.n	8003db4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d6c:	6193      	str	r3, [r2, #24]
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4a10      	ldr	r2, [pc, #64]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d84:	6153      	str	r3, [r2, #20]
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_SPI_MspInit+0x80>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d92:	23e0      	movs	r3, #224	; 0xe0
 8003d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003da2:	2305      	movs	r3, #5
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db0:	f001 f972 	bl	8005098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003db4:	bf00      	nop
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40013000 	.word	0x40013000
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_MspInit+0x44>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_MspInit+0x44>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6193      	str	r3, [r2, #24]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_MspInit+0x44>)
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_MspInit+0x44>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_MspInit+0x44>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	61d3      	str	r3, [r2, #28]
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_MspInit+0x44>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <NMI_Handler+0x4>

08003e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e16:	e7fe      	b.n	8003e16 <HardFault_Handler+0x4>

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <MemManage_Handler+0x4>

08003e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <BusFault_Handler+0x4>

08003e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <UsageFault_Handler+0x4>

08003e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e58:	f000 fb2a 	bl	80044b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <CAN_TX_IRQHandler+0x10>)
 8003e66:	f000 fd9a 	bl	800499e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000094 	.word	0x20000094

08003e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <TIM2_IRQHandler+0x10>)
 8003e7a:	f004 fc1b 	bl	80086b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000c68 	.word	0x20000c68

08003e88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <TIM3_IRQHandler+0x10>)
 8003e8e:	f004 fc11 	bl	80086b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000cb4 	.word	0x20000cb4

08003e9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e00a      	b.n	8003ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003eae:	f3af 8000 	nop.w
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	60ba      	str	r2, [r7, #8]
 8003eba:	b2ca      	uxtb	r2, r1
 8003ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	dbf0      	blt.n	8003eae <_read+0x12>
	}

return len;
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e009      	b.n	8003efc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fed5 	bl	8003ca0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	dbf1      	blt.n	8003ee8 <_write+0x12>
	}
	return len;
 8003f04:	687b      	ldr	r3, [r7, #4]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_close>:

int _close(int file)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
	return -1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f36:	605a      	str	r2, [r3, #4]
	return 0;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_isatty>:

int _isatty(int file)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f4e:	2301      	movs	r3, #1
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
	return 0;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <_sbrk+0x5c>)
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <_sbrk+0x60>)
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <_sbrk+0x64>)
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <_sbrk+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fa8:	f005 fba8 	bl	80096fc <__errno>
 8003fac:	4603      	mov	r3, r0
 8003fae:	220c      	movs	r2, #12
 8003fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fb6:	e009      	b.n	8003fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <_sbrk+0x64>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <_sbrk+0x64>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <_sbrk+0x64>)
 8003fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20003000 	.word	0x20003000
 8003fd8:	00000400 	.word	0x00000400
 8003fdc:	20000c60 	.word	0x20000c60
 8003fe0:	20000de8 	.word	0x20000de8

08003fe4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SystemInit+0x20>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <SystemInit+0x20>)
 8003ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0310 	add.w	r3, r7, #16
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <MX_TIM2_Init+0x94>)
 8004028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800402c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <MX_TIM2_Init+0x94>)
 8004030:	2240      	movs	r2, #64	; 0x40
 8004032:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <MX_TIM2_Init+0x94>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <MX_TIM2_Init+0x94>)
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <MX_TIM2_Init+0x98>)
 800403e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <MX_TIM2_Init+0x94>)
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_TIM2_Init+0x94>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800404c:	4813      	ldr	r0, [pc, #76]	; (800409c <MX_TIM2_Init+0x94>)
 800404e:	f004 fa29 	bl	80084a4 <HAL_TIM_Base_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004058:	f7ff fde9 	bl	8003c2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	4619      	mov	r1, r3
 8004068:	480c      	ldr	r0, [pc, #48]	; (800409c <MX_TIM2_Init+0x94>)
 800406a:	f004 fc42 	bl	80088f2 <HAL_TIM_ConfigClockSource>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004074:	f7ff fddb 	bl	8003c2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_TIM2_Init+0x94>)
 8004086:	f004 fe37 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004090:	f7ff fdcd 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000c68 	.word	0x20000c68
 80040a0:	000186a0 	.word	0x000186a0

080040a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040aa:	f107 0310 	add.w	r3, r7, #16
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <MX_TIM3_Init+0x94>)
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <MX_TIM3_Init+0x98>)
 80040c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <MX_TIM3_Init+0x94>)
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <MX_TIM3_Init+0x94>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <MX_TIM3_Init+0x94>)
 80040d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <MX_TIM3_Init+0x94>)
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <MX_TIM3_Init+0x94>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040e8:	4813      	ldr	r0, [pc, #76]	; (8004138 <MX_TIM3_Init+0x94>)
 80040ea:	f004 f9db 	bl	80084a4 <HAL_TIM_Base_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80040f4:	f7ff fd9b 	bl	8003c2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040fe:	f107 0310 	add.w	r3, r7, #16
 8004102:	4619      	mov	r1, r3
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <MX_TIM3_Init+0x94>)
 8004106:	f004 fbf4 	bl	80088f2 <HAL_TIM_ConfigClockSource>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004110:	f7ff fd8d 	bl	8003c2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4805      	ldr	r0, [pc, #20]	; (8004138 <MX_TIM3_Init+0x94>)
 8004122:	f004 fde9 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800412c:	f7ff fd7f 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004130:	bf00      	nop
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000cb4 	.word	0x20000cb4
 800413c:	40000400 	.word	0x40000400

08004140 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004146:	f107 0310 	add.w	r3, r7, #16
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <MX_TIM15_Init+0x9c>)
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <MX_TIM15_Init+0xa0>)
 8004162:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <MX_TIM15_Init+0x9c>)
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <MX_TIM15_Init+0x9c>)
 800416c:	2200      	movs	r2, #0
 800416e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <MX_TIM15_Init+0x9c>)
 8004172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004176:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004178:	4b18      	ldr	r3, [pc, #96]	; (80041dc <MX_TIM15_Init+0x9c>)
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <MX_TIM15_Init+0x9c>)
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <MX_TIM15_Init+0x9c>)
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800418a:	4814      	ldr	r0, [pc, #80]	; (80041dc <MX_TIM15_Init+0x9c>)
 800418c:	f004 f98a 	bl	80084a4 <HAL_TIM_Base_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004196:	f7ff fd4a 	bl	8003c2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	4619      	mov	r1, r3
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <MX_TIM15_Init+0x9c>)
 80041a8:	f004 fba3 	bl	80088f2 <HAL_TIM_ConfigClockSource>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80041b2:	f7ff fd3c 	bl	8003c2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4806      	ldr	r0, [pc, #24]	; (80041dc <MX_TIM15_Init+0x9c>)
 80041c4:	f004 fd98 	bl	8008cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80041ce:	f7ff fd2e 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000d00 	.word	0x20000d00
 80041e0:	40014000 	.word	0x40014000

080041e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d114      	bne.n	8004220 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	61d3      	str	r3, [r2, #28]
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	201c      	movs	r0, #28
 8004214:	f000 fefb 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004218:	201c      	movs	r0, #28
 800421a:	f000 ff14 	bl	8005046 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800421e:	e02a      	b.n	8004276 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_TIM_Base_MspInit+0xa0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d114      	bne.n	8004254 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4a14      	ldr	r2, [pc, #80]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	61d3      	str	r3, [r2, #28]
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2100      	movs	r1, #0
 8004246:	201d      	movs	r0, #29
 8004248:	f000 fee1 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800424c:	201d      	movs	r0, #29
 800424e:	f000 fefa 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 8004252:	e010      	b.n	8004276 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <HAL_TIM_Base_MspInit+0xa4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10b      	bne.n	8004276 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6193      	str	r3, [r2, #24]
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	40000400 	.word	0x40000400
 8004288:	40014000 	.word	0x40014000

0800428c <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us (uint16_t us)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <delay_us+0x30>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800429e:	bf00      	nop
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <delay_us+0x30>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d3f9      	bcc.n	80042a0 <delay_us+0x14>
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000cb4 	.word	0x20000cb4

080042c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d102      	bne.n	80042d8 <HAL_TIM_PeriodElapsedCallback+0x18>
		sample_flag = 1;
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
	}

}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	20000c64 	.word	0x20000c64

080042e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <MX_USART1_UART_Init+0x58>)
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <MX_USART1_UART_Init+0x5c>)
 80042f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <MX_USART1_UART_Init+0x58>)
 80042f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <MX_USART1_UART_Init+0x58>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <MX_USART1_UART_Init+0x58>)
 8004302:	2200      	movs	r2, #0
 8004304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <MX_USART1_UART_Init+0x58>)
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <MX_USART1_UART_Init+0x58>)
 800430e:	220c      	movs	r2, #12
 8004310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <MX_USART1_UART_Init+0x58>)
 8004314:	2200      	movs	r2, #0
 8004316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <MX_USART1_UART_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <MX_USART1_UART_Init+0x58>)
 8004320:	2200      	movs	r2, #0
 8004322:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <MX_USART1_UART_Init+0x58>)
 8004326:	2200      	movs	r2, #0
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432a:	4805      	ldr	r0, [pc, #20]	; (8004340 <MX_USART1_UART_Init+0x58>)
 800432c:	f004 fd70 	bl	8008e10 <HAL_UART_Init>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004336:	f7ff fc7a 	bl	8003c2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000d4c 	.word	0x20000d4c
 8004344:	40013800 	.word	0x40013800

08004348 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_UART_MspInit+0x80>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d129      	bne.n	80043be <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_UART_MspInit+0x84>)
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004374:	6193      	str	r3, [r2, #24]
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438c:	6153      	str	r3, [r2, #20]
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800439a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800439e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ac:	2307      	movs	r3, #7
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ba:	f000 fe6d 	bl	8005098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80043be:	bf00      	nop
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40013800 	.word	0x40013800
 80043cc:	40021000 	.word	0x40021000

080043d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004408 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d4:	480d      	ldr	r0, [pc, #52]	; (800440c <LoopForever+0x6>)
  ldr r1, =_edata
 80043d6:	490e      	ldr	r1, [pc, #56]	; (8004410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <LoopForever+0xe>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043dc:	e002      	b.n	80043e4 <LoopCopyDataInit>

080043de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e2:	3304      	adds	r3, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e8:	d3f9      	bcc.n	80043de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043ec:	4c0b      	ldr	r4, [pc, #44]	; (800441c <LoopForever+0x16>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f0:	e001      	b.n	80043f6 <LoopFillZerobss>

080043f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f4:	3204      	adds	r2, #4

080043f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f8:	d3fb      	bcc.n	80043f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043fa:	f7ff fdf3 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043fe:	f005 f983 	bl	8009708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004402:	f7ff fb8d 	bl	8003b20 <main>

08004406 <LoopForever>:

LoopForever:
    b LoopForever
 8004406:	e7fe      	b.n	8004406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004408:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004414:	0800a840 	.word	0x0800a840
  ldr r2, =_sbss
 8004418:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800441c:	20000de8 	.word	0x20000de8

08004420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC1_2_IRQHandler>
	...

08004424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_Init+0x28>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <HAL_Init+0x28>)
 800442e:	f043 0310 	orr.w	r3, r3, #16
 8004432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004434:	2003      	movs	r0, #3
 8004436:	f000 fddf 	bl	8004ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800443a:	200f      	movs	r0, #15
 800443c:	f000 f808 	bl	8004450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004440:	f7ff fcc0 	bl	8003dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40022000 	.word	0x40022000

08004450 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_InitTick+0x54>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_InitTick+0x58>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004466:	fbb3 f3f1 	udiv	r3, r3, r1
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fe05 	bl	800507e <HAL_SYSTICK_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e00e      	b.n	800449c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d80a      	bhi.n	800449a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004484:	2200      	movs	r2, #0
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800448c:	f000 fdbf 	bl	800500e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <HAL_InitTick+0x5c>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000008 	.word	0x20000008
 80044a8:	20000010 	.word	0x20000010
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_IncTick+0x20>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_IncTick+0x24>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_IncTick+0x24>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000010 	.word	0x20000010
 80044d4:	20000dd4 	.word	0x20000dd4

080044d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return uwTick;  
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_GetTick+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000dd4 	.word	0x20000dd4

080044f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7ff ffee 	bl	80044d8 <HAL_GetTick>
 80044fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004508:	d005      	beq.n	8004516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <HAL_Delay+0x44>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004516:	bf00      	nop
 8004518:	f7ff ffde 	bl	80044d8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d8f7      	bhi.n	8004518 <HAL_Delay+0x28>
  {
  }
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000010 	.word	0x20000010

08004538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0ed      	b.n	8004726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fc1c 	bl	8002d94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800456c:	f7ff ffb4 	bl	80044d8 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004572:	e012      	b.n	800459a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004574:	f7ff ffb0 	bl	80044d8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b0a      	cmp	r3, #10
 8004580:	d90b      	bls.n	800459a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2205      	movs	r2, #5
 8004592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0c5      	b.n	8004726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0e5      	beq.n	8004574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0202 	bic.w	r2, r2, #2
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b8:	f7ff ff8e 	bl	80044d8 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045be:	e012      	b.n	80045e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045c0:	f7ff ff8a 	bl	80044d8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b0a      	cmp	r3, #10
 80045cc:	d90b      	bls.n	80045e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2205      	movs	r2, #5
 80045de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e09f      	b.n	8004726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7e1b      	ldrb	r3, [r3, #24]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d108      	bne.n	800460e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e007      	b.n	800461e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7e5b      	ldrb	r3, [r3, #25]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d108      	bne.n	8004638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e007      	b.n	8004648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7e9b      	ldrb	r3, [r3, #26]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d108      	bne.n	8004662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0220 	orr.w	r2, r2, #32
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e007      	b.n	8004672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0220 	bic.w	r2, r2, #32
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7edb      	ldrb	r3, [r3, #27]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d108      	bne.n	800468c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0210 	bic.w	r2, r2, #16
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0210 	orr.w	r2, r2, #16
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7f1b      	ldrb	r3, [r3, #28]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0208 	orr.w	r2, r2, #8
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e007      	b.n	80046c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0208 	bic.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7f5b      	ldrb	r3, [r3, #29]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0204 	orr.w	r2, r2, #4
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e007      	b.n	80046f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	ea42 0103 	orr.w	r1, r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d12e      	bne.n	80047a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800475a:	f7ff febd 	bl	80044d8 <HAL_GetTick>
 800475e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004760:	e012      	b.n	8004788 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004762:	f7ff feb9 	bl	80044d8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b0a      	cmp	r3, #10
 800476e:	d90b      	bls.n	8004788 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2205      	movs	r2, #5
 8004780:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e012      	b.n	80047ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e006      	b.n	80047ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b089      	sub	sp, #36	; 0x24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d003      	beq.n	80047e2 <HAL_CAN_AddTxMessage+0x2c>
 80047da:	7ffb      	ldrb	r3, [r7, #31]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f040 80ad 	bne.w	800493c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d105      	bne.n	8004802 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8095 	beq.w	800492c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	0e1b      	lsrs	r3, r3, #24
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800480c:	2201      	movs	r2, #1
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	409a      	lsls	r2, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	6809      	ldr	r1, [r1, #0]
 800482c:	431a      	orrs	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3318      	adds	r3, #24
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	440b      	add	r3, r1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e00f      	b.n	800485a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004844:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800484e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	3318      	adds	r3, #24
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	440b      	add	r3, r1
 8004858:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6819      	ldr	r1, [r3, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	3318      	adds	r3, #24
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	440b      	add	r3, r1
 800486a:	3304      	adds	r3, #4
 800486c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	7d1b      	ldrb	r3, [r3, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d111      	bne.n	800489a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3318      	adds	r3, #24
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	4413      	add	r3, r2
 8004882:	3304      	adds	r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6811      	ldr	r1, [r2, #0]
 800488a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3318      	adds	r3, #24
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	440b      	add	r3, r1
 8004896:	3304      	adds	r3, #4
 8004898:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3307      	adds	r3, #7
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	061a      	lsls	r2, r3, #24
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3306      	adds	r3, #6
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3305      	adds	r3, #5
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	4313      	orrs	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	3204      	adds	r2, #4
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	4610      	mov	r0, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	ea43 0200 	orr.w	r2, r3, r0
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	440b      	add	r3, r1
 80048cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80048d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3303      	adds	r3, #3
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	061a      	lsls	r2, r3, #24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3302      	adds	r3, #2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3301      	adds	r3, #1
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	4313      	orrs	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	4610      	mov	r0, r2
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	ea43 0200 	orr.w	r2, r3, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	440b      	add	r3, r1
 8004902:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004906:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3318      	adds	r3, #24
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	4413      	add	r3, r2
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	f043 0201 	orr.w	r2, r3, #1
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	3318      	adds	r3, #24
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	440b      	add	r3, r1
 8004926:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e00e      	b.n	800494a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e006      	b.n	800494a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3724      	adds	r7, #36	; 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800496a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d002      	beq.n	8004978 <HAL_CAN_IsTxMessagePending+0x22>
 8004972:	7afb      	ldrb	r3, [r7, #11]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d10b      	bne.n	8004990 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	069b      	lsls	r3, r3, #26
 8004982:	401a      	ands	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800498c:	2301      	movs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004990:	68fb      	ldr	r3, [r7, #12]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d07c      	beq.n	8004ade <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d023      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f983 	bl	8004d0c <HAL_CAN_TxMailbox0CompleteCallback>
 8004a06:	e016      	b.n	8004a36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e00c      	b.n	8004a36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	e002      	b.n	8004a36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f989 	bl	8004d48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d024      	beq.n	8004a8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f963 	bl	8004d20 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a5a:	e016      	b.n	8004a8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e00c      	b.n	8004a8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	e002      	b.n	8004a8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f969 	bl	8004d5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d024      	beq.n	8004ade <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f943 	bl	8004d34 <HAL_CAN_TxMailbox2CompleteCallback>
 8004aae:	e016      	b.n	8004ade <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac2:	e00c      	b.n	8004ade <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	e002      	b.n	8004ade <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f949 	bl	8004d70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d006      	beq.n	8004b24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f93a 	bl	8004d98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f921 	bl	8004d84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2210      	movs	r2, #16
 8004b64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2208      	movs	r2, #8
 8004b80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f91c 	bl	8004dc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f903 	bl	8004dac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f906 	bl	8004dd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2208      	movs	r2, #8
 8004be2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8ff 	bl	8004de8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d07b      	beq.n	8004cec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d072      	beq.n	8004ce4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f043 0304 	orr.w	r3, r3, #4
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d043      	beq.n	8004ce4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03e      	beq.n	8004ce4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d02b      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x32a>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d82e      	bhi.n	8004cd2 <HAL_CAN_IRQHandler+0x334>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d022      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x320>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d82a      	bhi.n	8004cd2 <HAL_CAN_IRQHandler+0x334>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d019      	beq.n	8004cb4 <HAL_CAN_IRQHandler+0x316>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d826      	bhi.n	8004cd2 <HAL_CAN_IRQHandler+0x334>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d010      	beq.n	8004caa <HAL_CAN_IRQHandler+0x30c>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d822      	bhi.n	8004cd2 <HAL_CAN_IRQHandler+0x334>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d002      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x2f8>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d005      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c94:	e01d      	b.n	8004cd2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c9e:	e019      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	f043 0310 	orr.w	r3, r3, #16
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ca8:	e014      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cb2:	e00f      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cc6:	e005      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cd0:	e000      	b.n	8004cd4 <HAL_CAN_IRQHandler+0x336>
            break;
 8004cd2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ce2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f87c 	bl	8004dfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d04:	bf00      	nop
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <__NVIC_SetPriorityGrouping+0x44>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <__NVIC_SetPriorityGrouping+0x44>)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	60d3      	str	r3, [r2, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <__NVIC_GetPriorityGrouping+0x18>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	f003 0307 	and.w	r3, r3, #7
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	db0b      	blt.n	8004e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	f003 021f 	and.w	r2, r3, #31
 8004e8c:	4907      	ldr	r1, [pc, #28]	; (8004eac <__NVIC_EnableIRQ+0x38>)
 8004e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2001      	movs	r0, #1
 8004e96:	fa00 f202 	lsl.w	r2, r0, r2
 8004e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	e000e100 	.word	0xe000e100

08004eb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	db12      	blt.n	8004ee8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f003 021f 	and.w	r2, r3, #31
 8004ec8:	490a      	ldr	r1, [pc, #40]	; (8004ef4 <__NVIC_DisableIRQ+0x44>)
 8004eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed6:	3320      	adds	r3, #32
 8004ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004edc:	f3bf 8f4f 	dsb	sy
}
 8004ee0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ee2:	f3bf 8f6f 	isb	sy
}
 8004ee6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000e100 	.word	0xe000e100

08004ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	; (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	; 0x24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf28      	it	cs
 8004f6a:	2304      	movcs	r3, #4
 8004f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d902      	bls.n	8004f7c <NVIC_EncodePriority+0x30>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3b03      	subs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <NVIC_EncodePriority+0x32>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	401a      	ands	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	4313      	orrs	r3, r2
         );
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc4:	d301      	bcc.n	8004fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00f      	b.n	8004fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <SysTick_Config+0x40>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd8:	f7ff ff8e 	bl	8004ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <SysTick_Config+0x40>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <SysTick_Config+0x40>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	e000e010 	.word	0xe000e010

08004ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff05 	bl	8004e10 <__NVIC_SetPriorityGrouping>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	4603      	mov	r3, r0
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005020:	f7ff ff1a 	bl	8004e58 <__NVIC_GetPriorityGrouping>
 8005024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	6978      	ldr	r0, [r7, #20]
 800502c:	f7ff ff8e 	bl	8004f4c <NVIC_EncodePriority>
 8005030:	4602      	mov	r2, r0
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff5d 	bl	8004ef8 <__NVIC_SetPriority>
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff0d 	bl	8004e74 <__NVIC_EnableIRQ>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	4603      	mov	r3, r0
 800506a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800506c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff1d 	bl	8004eb0 <__NVIC_DisableIRQ>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ff94 	bl	8004fb4 <SysTick_Config>
 800508c:	4603      	mov	r3, r0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a6:	e14e      	b.n	8005346 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2101      	movs	r1, #1
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8140 	beq.w	8005340 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d005      	beq.n	80050d8 <HAL_GPIO_Init+0x40>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d130      	bne.n	800513a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800510e:	2201      	movs	r2, #1
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f003 0201 	and.w	r2, r3, #1
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b03      	cmp	r3, #3
 8005144:	d017      	beq.n	8005176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	2203      	movs	r2, #3
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d123      	bne.n	80051ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	08da      	lsrs	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3208      	adds	r2, #8
 800518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	220f      	movs	r2, #15
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	08da      	lsrs	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3208      	adds	r2, #8
 80051c4:	6939      	ldr	r1, [r7, #16]
 80051c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	2203      	movs	r2, #3
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f003 0203 	and.w	r2, r3, #3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 809a 	beq.w	8005340 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800520c:	4b55      	ldr	r3, [pc, #340]	; (8005364 <HAL_GPIO_Init+0x2cc>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4a54      	ldr	r2, [pc, #336]	; (8005364 <HAL_GPIO_Init+0x2cc>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6193      	str	r3, [r2, #24]
 8005218:	4b52      	ldr	r3, [pc, #328]	; (8005364 <HAL_GPIO_Init+0x2cc>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005224:	4a50      	ldr	r2, [pc, #320]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	3302      	adds	r3, #2
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800524e:	d013      	beq.n	8005278 <HAL_GPIO_Init+0x1e0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a46      	ldr	r2, [pc, #280]	; (800536c <HAL_GPIO_Init+0x2d4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00d      	beq.n	8005274 <HAL_GPIO_Init+0x1dc>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a45      	ldr	r2, [pc, #276]	; (8005370 <HAL_GPIO_Init+0x2d8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <HAL_GPIO_Init+0x1d8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a44      	ldr	r2, [pc, #272]	; (8005374 <HAL_GPIO_Init+0x2dc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_GPIO_Init+0x1d4>
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <HAL_GPIO_Init+0x1e2>
 800526c:	2305      	movs	r3, #5
 800526e:	e004      	b.n	800527a <HAL_GPIO_Init+0x1e2>
 8005270:	2302      	movs	r3, #2
 8005272:	e002      	b.n	800527a <HAL_GPIO_Init+0x1e2>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_GPIO_Init+0x1e2>
 8005278:	2300      	movs	r3, #0
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	f002 0203 	and.w	r2, r2, #3
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	4093      	lsls	r3, r2
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800528a:	4937      	ldr	r1, [pc, #220]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	3302      	adds	r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005298:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052bc:	4a2e      	ldr	r2, [pc, #184]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052c2:	4b2d      	ldr	r3, [pc, #180]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4013      	ands	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052e6:	4a24      	ldr	r2, [pc, #144]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800533a:	4a0f      	ldr	r2, [pc, #60]	; (8005378 <HAL_GPIO_Init+0x2e0>)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3301      	adds	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f aea9 	bne.w	80050a8 <HAL_GPIO_Init+0x10>
  }
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000
 8005368:	40010000 	.word	0x40010000
 800536c:	48000400 	.word	0x48000400
 8005370:	48000800 	.word	0x48000800
 8005374:	48000c00 	.word	0x48000c00
 8005378:	40010400 	.word	0x40010400

0800537c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
 8005388:	4613      	mov	r3, r2
 800538a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800538c:	787b      	ldrb	r3, [r7, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005398:	e002      	b.n	80053a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e081      	b.n	80054c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe fb60 	bl	8003a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	e006      	b.n	8005434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d104      	bne.n	8005446 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69d9      	ldr	r1, [r3, #28]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	817b      	strh	r3, [r7, #10]
 80054dc:	4613      	mov	r3, r2
 80054de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	f040 80da 	bne.w	80056a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_I2C_Master_Transmit+0x30>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0d3      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005504:	f7fe ffe8 	bl	80044d8 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2319      	movs	r3, #25
 8005510:	2201      	movs	r2, #1
 8005512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f9e6 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0be      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2221      	movs	r2, #33	; 0x21
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2210      	movs	r2, #16
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	893a      	ldrh	r2, [r7, #8]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2bff      	cmp	r3, #255	; 0xff
 8005556:	d90e      	bls.n	8005576 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	22ff      	movs	r2, #255	; 0xff
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	b2da      	uxtb	r2, r3
 8005564:	8979      	ldrh	r1, [r7, #10]
 8005566:	4b51      	ldr	r3, [pc, #324]	; (80056ac <HAL_I2C_Master_Transmit+0x1e0>)
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fbf6 	bl	8005d60 <I2C_TransferConfig>
 8005574:	e06c      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	b2da      	uxtb	r2, r3
 8005586:	8979      	ldrh	r1, [r7, #10]
 8005588:	4b48      	ldr	r3, [pc, #288]	; (80056ac <HAL_I2C_Master_Transmit+0x1e0>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fbe5 	bl	8005d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005596:	e05b      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	6a39      	ldr	r1, [r7, #32]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f9f2 	bl	8005986 <I2C_WaitOnTXISFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e07b      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d034      	beq.n	8005650 <HAL_I2C_Master_Transmit+0x184>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d130      	bne.n	8005650 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f975 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04d      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d90e      	bls.n	8005630 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	b2da      	uxtb	r2, r3
 800561e:	8979      	ldrh	r1, [r7, #10]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fb99 	bl	8005d60 <I2C_TransferConfig>
 800562e:	e00f      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	b2da      	uxtb	r2, r3
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fb88 	bl	8005d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19e      	bne.n	8005598 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f9d8 	bl	8005a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e01a      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2220      	movs	r2, #32
 8005674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005682:	400b      	ands	r3, r1
 8005684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	80002000 	.word	0x80002000
 80056b0:	fe00e800 	.word	0xfe00e800

080056b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
 80056c4:	4613      	mov	r3, r2
 80056c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	f040 80db 	bne.w	800588c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_I2C_Master_Receive+0x30>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e0d4      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ec:	f7fe fef4 	bl	80044d8 <HAL_GetTick>
 80056f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2319      	movs	r3, #25
 80056f8:	2201      	movs	r2, #1
 80056fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f8f2 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0bf      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2222      	movs	r2, #34	; 0x22
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2210      	movs	r2, #16
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	893a      	ldrh	r2, [r7, #8]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2bff      	cmp	r3, #255	; 0xff
 800573e:	d90e      	bls.n	800575e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	4b52      	ldr	r3, [pc, #328]	; (8005898 <HAL_I2C_Master_Receive+0x1e4>)
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb02 	bl	8005d60 <I2C_TransferConfig>
 800575c:	e06d      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	b2da      	uxtb	r2, r3
 800576e:	8979      	ldrh	r1, [r7, #10]
 8005770:	4b49      	ldr	r3, [pc, #292]	; (8005898 <HAL_I2C_Master_Receive+0x1e4>)
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 faf1 	bl	8005d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800577e:	e05c      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6a39      	ldr	r1, [r7, #32]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f989 	bl	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e07c      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d034      	beq.n	800583a <HAL_I2C_Master_Receive+0x186>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d130      	bne.n	800583a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	; 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f880 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e04d      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2bff      	cmp	r3, #255	; 0xff
 80057fa:	d90e      	bls.n	800581a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	22ff      	movs	r2, #255	; 0xff
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	b2da      	uxtb	r2, r3
 8005808:	8979      	ldrh	r1, [r7, #10]
 800580a:	2300      	movs	r3, #0
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 faa4 	bl	8005d60 <I2C_TransferConfig>
 8005818:	e00f      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	b2da      	uxtb	r2, r3
 800582a:	8979      	ldrh	r1, [r7, #10]
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa93 	bl	8005d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d19d      	bne.n	8005780 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f8e3 	bl	8005a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e01a      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2220      	movs	r2, #32
 800585e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <HAL_I2C_Master_Receive+0x1e8>)
 800586c:	400b      	ands	r3, r1
 800586e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	80002400 	.word	0x80002400
 800589c:	fe00e800 	.word	0xfe00e800

080058a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d103      	bne.n	80058be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d007      	beq.n	80058dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	619a      	str	r2, [r3, #24]
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f8:	e031      	b.n	800595e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005900:	d02d      	beq.n	800595e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fe fde9 	bl	80044d8 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d122      	bne.n	800595e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	429a      	cmp	r2, r3
 8005934:	d113      	bne.n	800595e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e00f      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d0be      	beq.n	80058fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005992:	e033      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f901 	bl	8005ba0 <I2C_IsErrorOccurred>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e031      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ae:	d025      	beq.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b0:	f7fe fd92 	bl	80044d8 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11a      	bne.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d013      	beq.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e007      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d1c4      	bne.n	8005994 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a20:	e02f      	b.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8ba 	bl	8005ba0 <I2C_IsErrorOccurred>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02d      	b.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fe fd4f 	bl	80044d8 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11a      	bne.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d013      	beq.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e007      	b.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d1c8      	bne.n	8005a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aa8:	e06b      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f876 	bl	8005ba0 <I2C_IsErrorOccurred>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e069      	b.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d138      	bne.n	8005b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d105      	bne.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e055      	b.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d107      	bne.n	8005b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
 8005b02:	e002      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6859      	ldr	r1, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b1f      	ldr	r3, [pc, #124]	; (8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005b1e:	400b      	ands	r3, r1
 8005b20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e029      	b.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fe fccb 	bl	80044d8 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d116      	bne.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d00f      	beq.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e007      	b.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d18c      	bne.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	fe00e800 	.word	0xfe00e800

08005ba0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d068      	beq.n	8005c9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bd4:	e049      	b.n	8005c6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bdc:	d045      	beq.n	8005c6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fe fc7b 	bl	80044d8 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_IsErrorOccurred+0x54>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d13a      	bne.n	8005c6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c16:	d121      	bne.n	8005c5c <I2C_IsErrorOccurred+0xbc>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c1e:	d01d      	beq.n	8005c5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c20:	7cfb      	ldrb	r3, [r7, #19]
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d01a      	beq.n	8005c5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c36:	f7fe fc4f 	bl	80044d8 <HAL_GetTick>
 8005c3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c3c:	e00e      	b.n	8005c5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c3e:	f7fe fc4b 	bl	80044d8 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b19      	cmp	r3, #25
 8005c4a:	d907      	bls.n	8005c5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f043 0320 	orr.w	r3, r3, #32
 8005c52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c5a:	e006      	b.n	8005c6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d1e9      	bne.n	8005c3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d003      	beq.n	8005c80 <I2C_IsErrorOccurred+0xe0>
 8005c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0aa      	beq.n	8005bd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f043 0304 	orr.w	r3, r3, #4
 8005c96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f043 0308 	orr.w	r3, r3, #8
 8005cd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ce2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01c      	beq.n	8005d4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fdc3 	bl	80058a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <I2C_IsErrorOccurred+0x1bc>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	fe00e800 	.word	0xfe00e800

08005d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d72:	897b      	ldrh	r3, [r7, #10]
 8005d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d78:	7a7b      	ldrb	r3, [r7, #9]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	0d5b      	lsrs	r3, r3, #21
 8005d9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <I2C_TransferConfig+0x60>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	43db      	mvns	r3, r3
 8005da4:	ea02 0103 	and.w	r1, r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	03ff63ff 	.word	0x03ff63ff

08005dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d138      	bne.n	8005e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e032      	b.n	8005e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d139      	bne.n	8005ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e033      	b.n	8005ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f001 b823 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 817d 	beq.w	800622a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f30:	4bbc      	ldr	r3, [pc, #752]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d00c      	beq.n	8005f56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f3c:	4bb9      	ldr	r3, [pc, #740]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d15c      	bne.n	8006002 <HAL_RCC_OscConfig+0x10e>
 8005f48:	4bb6      	ldr	r3, [pc, #728]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d155      	bne.n	8006002 <HAL_RCC_OscConfig+0x10e>
 8005f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_RCC_OscConfig+0x94>
 8005f82:	4ba8      	ldr	r3, [pc, #672]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	e015      	b.n	8005fb4 <HAL_RCC_OscConfig+0xc0>
 8005f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005f94:	fa93 f3a3 	rbit	r3, r3
 8005f98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fa0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005fa4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005fa8:	fa93 f3a3 	rbit	r3, r3
 8005fac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005fb0:	4b9c      	ldr	r3, [pc, #624]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005fbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005fc0:	fa92 f2a2 	rbit	r2, r2
 8005fc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005fc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005fcc:	fab2 f282 	clz	r2, r2
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	f042 0220 	orr.w	r2, r2, #32
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	f002 021f 	and.w	r2, r2, #31
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 811f 	beq.w	8006228 <HAL_RCC_OscConfig+0x334>
 8005fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 8116 	bne.w	8006228 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f000 bfaf 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x12e>
 8006014:	4b83      	ldr	r3, [pc, #524]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a82      	ldr	r2, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e036      	b.n	8006090 <HAL_RCC_OscConfig+0x19c>
 8006022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x158>
 8006032:	4b7c      	ldr	r3, [pc, #496]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a7b      	ldr	r2, [pc, #492]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	4b79      	ldr	r3, [pc, #484]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a78      	ldr	r2, [pc, #480]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e021      	b.n	8006090 <HAL_RCC_OscConfig+0x19c>
 800604c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x184>
 800605e:	4b71      	ldr	r3, [pc, #452]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a70      	ldr	r2, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	4b6e      	ldr	r3, [pc, #440]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a6d      	ldr	r2, [pc, #436]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e00b      	b.n	8006090 <HAL_RCC_OscConfig+0x19c>
 8006078:	4b6a      	ldr	r3, [pc, #424]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a69      	ldr	r2, [pc, #420]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 800607e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	4b67      	ldr	r3, [pc, #412]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a66      	ldr	r2, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 800608a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800608e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	f023 020f 	bic.w	r2, r3, #15
 8006098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800609c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	495f      	ldr	r1, [pc, #380]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d059      	beq.n	800616e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fe fa0d 	bl	80044d8 <HAL_GetTick>
 80060be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fe fa08 	bl	80044d8 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b64      	cmp	r3, #100	; 0x64
 80060d2:	d902      	bls.n	80060da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f000 bf43 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 80060da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80060ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	fab3 f383 	clz	r3, r3
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d102      	bne.n	800610c <HAL_RCC_OscConfig+0x218>
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	e015      	b.n	8006138 <HAL_RCC_OscConfig+0x244>
 800610c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006110:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006114:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006118:	fa93 f3a3 	rbit	r3, r3
 800611c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006124:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006128:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800613c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006140:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006144:	fa92 f2a2 	rbit	r2, r2
 8006148:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800614c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006150:	fab2 f282 	clz	r2, r2
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	f042 0220 	orr.w	r2, r2, #32
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	f002 021f 	and.w	r2, r2, #31
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f202 	lsl.w	r2, r1, r2
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ab      	beq.n	80060c4 <HAL_RCC_OscConfig+0x1d0>
 800616c:	e05d      	b.n	800622a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fe f9b3 	bl	80044d8 <HAL_GetTick>
 8006172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006176:	e00a      	b.n	800618e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006178:	f7fe f9ae 	bl	80044d8 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d902      	bls.n	800618e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	f000 bee9 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 800618e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006192:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006196:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800619a:	fa93 f3a3 	rbit	r3, r3
 800619e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80061a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061a6:	fab3 f383 	clz	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d102      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2cc>
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	e015      	b.n	80061ec <HAL_RCC_OscConfig+0x2f8>
 80061c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80061d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80061dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80061e0:	fa93 f3a3 	rbit	r3, r3
 80061e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCC_OscConfig+0x330>)
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80061f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80061f8:	fa92 f2a2 	rbit	r2, r2
 80061fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006200:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006204:	fab2 f282 	clz	r2, r2
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	f042 0220 	orr.w	r2, r2, #32
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	f002 021f 	and.w	r2, r2, #31
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f202 	lsl.w	r2, r1, r2
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ab      	bne.n	8006178 <HAL_RCC_OscConfig+0x284>
 8006220:	e003      	b.n	800622a <HAL_RCC_OscConfig+0x336>
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800622a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 817d 	beq.w	800653a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006240:	4ba6      	ldr	r3, [pc, #664]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800624c:	4ba3      	ldr	r3, [pc, #652]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b08      	cmp	r3, #8
 8006256:	d172      	bne.n	800633e <HAL_RCC_OscConfig+0x44a>
 8006258:	4ba0      	ldr	r3, [pc, #640]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d16c      	bne.n	800633e <HAL_RCC_OscConfig+0x44a>
 8006264:	2302      	movs	r3, #2
 8006266:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800626e:	fa93 f3a3 	rbit	r3, r3
 8006272:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006276:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0x3a0>
 800628e:	4b93      	ldr	r3, [pc, #588]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	e013      	b.n	80062bc <HAL_RCC_OscConfig+0x3c8>
 8006294:	2302      	movs	r3, #2
 8006296:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80062a6:	2302      	movs	r3, #2
 80062a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80062ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80062b0:	fa93 f3a3 	rbit	r3, r3
 80062b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80062b8:	4b88      	ldr	r3, [pc, #544]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2202      	movs	r2, #2
 80062be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80062c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80062c6:	fa92 f2a2 	rbit	r2, r2
 80062ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80062ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80062d2:	fab2 f282 	clz	r2, r2
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	f042 0220 	orr.w	r2, r2, #32
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	f002 021f 	and.w	r2, r2, #31
 80062e2:	2101      	movs	r1, #1
 80062e4:	fa01 f202 	lsl.w	r2, r1, r2
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCC_OscConfig+0x410>
 80062ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d002      	beq.n	8006304 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f000 be2e 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006304:	4b75      	ldr	r3, [pc, #468]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	21f8      	movs	r1, #248	; 0xf8
 800631a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006322:	fa91 f1a1 	rbit	r1, r1
 8006326:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800632a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800632e:	fab1 f181 	clz	r1, r1
 8006332:	b2c9      	uxtb	r1, r1
 8006334:	408b      	lsls	r3, r1
 8006336:	4969      	ldr	r1, [pc, #420]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633c:	e0fd      	b.n	800653a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800633e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8088 	beq.w	8006460 <HAL_RCC_OscConfig+0x56c>
 8006350:	2301      	movs	r3, #1
 8006352:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006356:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800635a:	fa93 f3a3 	rbit	r3, r3
 800635e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006362:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	461a      	mov	r2, r3
 8006378:	2301      	movs	r3, #1
 800637a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637c:	f7fe f8ac 	bl	80044d8 <HAL_GetTick>
 8006380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	e00a      	b.n	800639c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fe f8a7 	bl	80044d8 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d902      	bls.n	800639c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	f000 bde2 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 800639c:	2302      	movs	r3, #2
 800639e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80063ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	fab3 f383 	clz	r3, r3
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d102      	bne.n	80063cc <HAL_RCC_OscConfig+0x4d8>
 80063c6:	4b45      	ldr	r3, [pc, #276]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	e013      	b.n	80063f4 <HAL_RCC_OscConfig+0x500>
 80063cc:	2302      	movs	r3, #2
 80063ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80063d6:	fa93 f3a3 	rbit	r3, r3
 80063da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80063de:	2302      	movs	r3, #2
 80063e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80063e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80063e8:	fa93 f3a3 	rbit	r3, r3
 80063ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80063f0:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	2202      	movs	r2, #2
 80063f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80063fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80063fe:	fa92 f2a2 	rbit	r2, r2
 8006402:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006406:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800640a:	fab2 f282 	clz	r2, r2
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	f042 0220 	orr.w	r2, r2, #32
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	f002 021f 	and.w	r2, r2, #31
 800641a:	2101      	movs	r1, #1
 800641c:	fa01 f202 	lsl.w	r2, r1, r2
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0af      	beq.n	8006386 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006426:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800642e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	21f8      	movs	r1, #248	; 0xf8
 800643c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006444:	fa91 f1a1 	rbit	r1, r1
 8006448:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800644c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006450:	fab1 f181 	clz	r1, r1
 8006454:	b2c9      	uxtb	r1, r1
 8006456:	408b      	lsls	r3, r1
 8006458:	4920      	ldr	r1, [pc, #128]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
 800645e:	e06c      	b.n	800653a <HAL_RCC_OscConfig+0x646>
 8006460:	2301      	movs	r3, #1
 8006462:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800646a:	fa93 f3a3 	rbit	r3, r3
 800646e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006472:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fe f824 	bl	80044d8 <HAL_GetTick>
 8006490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006494:	e00a      	b.n	80064ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006496:	f7fe f81f 	bl	80044d8 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d902      	bls.n	80064ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	f000 bd5a 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064b6:	fa93 f3a3 	rbit	r3, r3
 80064ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80064be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c2:	fab3 f383 	clz	r3, r3
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d104      	bne.n	80064e0 <HAL_RCC_OscConfig+0x5ec>
 80064d6:	4b01      	ldr	r3, [pc, #4]	; (80064dc <HAL_RCC_OscConfig+0x5e8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	e015      	b.n	8006508 <HAL_RCC_OscConfig+0x614>
 80064dc:	40021000 	.word	0x40021000
 80064e0:	2302      	movs	r3, #2
 80064e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064f2:	2302      	movs	r3, #2
 80064f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80064f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006504:	4bc8      	ldr	r3, [pc, #800]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2202      	movs	r2, #2
 800650a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800650e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006512:	fa92 f2a2 	rbit	r2, r2
 8006516:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800651a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800651e:	fab2 f282 	clz	r2, r2
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	f042 0220 	orr.w	r2, r2, #32
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	f002 021f 	and.w	r2, r2, #31
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f202 	lsl.w	r2, r1, r2
 8006534:	4013      	ands	r3, r2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1ad      	bne.n	8006496 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800653a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800653e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8110 	beq.w	8006770 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d079      	beq.n	8006654 <HAL_RCC_OscConfig+0x760>
 8006560:	2301      	movs	r3, #1
 8006562:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800656a:	fa93 f3a3 	rbit	r3, r3
 800656e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006576:	fab3 f383 	clz	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	4bab      	ldr	r3, [pc, #684]	; (800682c <HAL_RCC_OscConfig+0x938>)
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	461a      	mov	r2, r3
 8006586:	2301      	movs	r3, #1
 8006588:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658a:	f7fd ffa5 	bl	80044d8 <HAL_GetTick>
 800658e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006592:	e00a      	b.n	80065aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006594:	f7fd ffa0 	bl	80044d8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d902      	bls.n	80065aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	f000 bcdb 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 80065aa:	2302      	movs	r3, #2
 80065ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b4:	fa93 f3a3 	rbit	r3, r3
 80065b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80065c4:	2202      	movs	r2, #2
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	fa93 f2a3 	rbit	r2, r3
 80065d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	2202      	movs	r2, #2
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	fa93 f2a3 	rbit	r2, r3
 80065fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006602:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006604:	4b88      	ldr	r3, [pc, #544]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 8006606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800660c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006610:	2102      	movs	r1, #2
 8006612:	6019      	str	r1, [r3, #0]
 8006614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006618:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	fa93 f1a3 	rbit	r1, r3
 8006622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800662a:	6019      	str	r1, [r3, #0]
  return result;
 800662c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006630:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2101      	movs	r1, #1
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0a0      	beq.n	8006594 <HAL_RCC_OscConfig+0x6a0>
 8006652:	e08d      	b.n	8006770 <HAL_RCC_OscConfig+0x87c>
 8006654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006658:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006664:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	fa93 f2a3 	rbit	r2, r3
 800666e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006672:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006676:	601a      	str	r2, [r3, #0]
  return result;
 8006678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800667c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006680:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006682:	fab3 f383 	clz	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	4b68      	ldr	r3, [pc, #416]	; (800682c <HAL_RCC_OscConfig+0x938>)
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006696:	f7fd ff1f 	bl	80044d8 <HAL_GetTick>
 800669a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a0:	f7fd ff1a 	bl	80044d8 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d902      	bls.n	80066b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	f000 bc55 	b.w	8006f60 <HAL_RCC_OscConfig+0x106c>
 80066b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066be:	2202      	movs	r2, #2
 80066c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	fa93 f2a3 	rbit	r2, r3
 80066d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80066e2:	2202      	movs	r2, #2
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fa93 f2a3 	rbit	r2, r3
 80066f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006706:	2202      	movs	r2, #2
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	fa93 f2a3 	rbit	r2, r3
 8006718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800671c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006720:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006722:	4b41      	ldr	r3, [pc, #260]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 8006724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800672a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800672e:	2102      	movs	r1, #2
 8006730:	6019      	str	r1, [r3, #0]
 8006732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006736:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	fa93 f1a3 	rbit	r1, r3
 8006740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006744:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006748:	6019      	str	r1, [r3, #0]
  return result;
 800674a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800674e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	fab3 f383 	clz	r3, r3
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2101      	movs	r1, #1
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d197      	bne.n	80066a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 81a1 	beq.w	8006ac8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800678c:	4b26      	ldr	r3, [pc, #152]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006798:	4b23      	ldr	r3, [pc, #140]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 800679e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a2:	61d3      	str	r3, [r2, #28]
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80067ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80067be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <HAL_RCC_OscConfig+0x93c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11a      	bne.n	8006808 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <HAL_RCC_OscConfig+0x93c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <HAL_RCC_OscConfig+0x93c>)
 80067d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067de:	f7fd fe7b 	bl	80044d8 <HAL_GetTick>
 80067e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	e009      	b.n	80067fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e8:	f7fd fe76 	bl	80044d8 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b64      	cmp	r3, #100	; 0x64
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e3b1      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fc:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <HAL_RCC_OscConfig+0x93c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ef      	beq.n	80067e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800680c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d10d      	bne.n	8006834 <HAL_RCC_OscConfig+0x940>
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	4a02      	ldr	r2, [pc, #8]	; (8006828 <HAL_RCC_OscConfig+0x934>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	6213      	str	r3, [r2, #32]
 8006824:	e03c      	b.n	80068a0 <HAL_RCC_OscConfig+0x9ac>
 8006826:	bf00      	nop
 8006828:	40021000 	.word	0x40021000
 800682c:	10908120 	.word	0x10908120
 8006830:	40007000 	.word	0x40007000
 8006834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10c      	bne.n	800685e <HAL_RCC_OscConfig+0x96a>
 8006844:	4bc1      	ldr	r3, [pc, #772]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	4ac0      	ldr	r2, [pc, #768]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6213      	str	r3, [r2, #32]
 8006850:	4bbe      	ldr	r3, [pc, #760]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	4abd      	ldr	r2, [pc, #756]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006856:	f023 0304 	bic.w	r3, r3, #4
 800685a:	6213      	str	r3, [r2, #32]
 800685c:	e020      	b.n	80068a0 <HAL_RCC_OscConfig+0x9ac>
 800685e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b05      	cmp	r3, #5
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0x994>
 800686e:	4bb7      	ldr	r3, [pc, #732]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	4ab6      	ldr	r2, [pc, #728]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6213      	str	r3, [r2, #32]
 800687a:	4bb4      	ldr	r3, [pc, #720]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4ab3      	ldr	r2, [pc, #716]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6213      	str	r3, [r2, #32]
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0x9ac>
 8006888:	4bb0      	ldr	r3, [pc, #704]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	4aaf      	ldr	r2, [pc, #700]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6213      	str	r3, [r2, #32]
 8006894:	4bad      	ldr	r3, [pc, #692]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	4aac      	ldr	r2, [pc, #688]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800689a:	f023 0304 	bic.w	r3, r3, #4
 800689e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8081 	beq.w	80069b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b2:	f7fd fe11 	bl	80044d8 <HAL_GetTick>
 80068b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068bc:	f7fd fe0c 	bl	80044d8 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e345      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
 80068d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80068dc:	2202      	movs	r2, #2
 80068de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	fa93 f2a3 	rbit	r2, r3
 80068ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006900:	2202      	movs	r2, #2
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006908:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	fa93 f2a3 	rbit	r2, r3
 8006912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006916:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800691a:	601a      	str	r2, [r3, #0]
  return result;
 800691c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006920:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006924:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006926:	fab3 f383 	clz	r3, r3
 800692a:	b2db      	uxtb	r3, r3
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d102      	bne.n	8006940 <HAL_RCC_OscConfig+0xa4c>
 800693a:	4b84      	ldr	r3, [pc, #528]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	e013      	b.n	8006968 <HAL_RCC_OscConfig+0xa74>
 8006940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006944:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006948:	2202      	movs	r2, #2
 800694a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006950:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	fa93 f2a3 	rbit	r2, r3
 800695a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800695e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	4b79      	ldr	r3, [pc, #484]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800696c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006970:	2102      	movs	r1, #2
 8006972:	6011      	str	r1, [r2, #0]
 8006974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006978:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	fa92 f1a2 	rbit	r1, r2
 8006982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006986:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800698a:	6011      	str	r1, [r2, #0]
  return result;
 800698c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006990:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	fab2 f282 	clz	r2, r2
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	f002 021f 	and.w	r2, r2, #31
 80069a6:	2101      	movs	r1, #1
 80069a8:	fa01 f202 	lsl.w	r2, r1, r2
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d084      	beq.n	80068bc <HAL_RCC_OscConfig+0x9c8>
 80069b2:	e07f      	b.n	8006ab4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b4:	f7fd fd90 	bl	80044d8 <HAL_GetTick>
 80069b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069bc:	e00b      	b.n	80069d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fd fd8b 	bl	80044d8 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e2c4      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
 80069d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80069de:	2202      	movs	r2, #2
 80069e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	fa93 f2a3 	rbit	r2, r3
 80069f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006a02:	2202      	movs	r2, #2
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	fa93 f2a3 	rbit	r2, r3
 8006a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006a1c:	601a      	str	r2, [r3, #0]
  return result;
 8006a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a22:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006a26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a28:	fab3 f383 	clz	r3, r3
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d102      	bne.n	8006a42 <HAL_RCC_OscConfig+0xb4e>
 8006a3c:	4b43      	ldr	r3, [pc, #268]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	e013      	b.n	8006a6a <HAL_RCC_OscConfig+0xb76>
 8006a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	fa93 f2a3 	rbit	r2, r3
 8006a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a72:	2102      	movs	r1, #2
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	fa92 f1a2 	rbit	r1, r2
 8006a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a8c:	6011      	str	r1, [r2, #0]
  return result;
 8006a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a92:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	fab2 f282 	clz	r2, r2
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	f002 021f 	and.w	r2, r2, #31
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d184      	bne.n	80069be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ab4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8242 	beq.w	8006f5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ada:	4b1c      	ldr	r3, [pc, #112]	; (8006b4c <HAL_RCC_OscConfig+0xc58>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	f000 8213 	beq.w	8006f0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	f040 8162 	bne.w	8006dbe <HAL_RCC_OscConfig+0xeca>
 8006afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006afe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b0c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	fa93 f2a3 	rbit	r2, r3
 8006b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006b1e:	601a      	str	r2, [r3, #0]
  return result;
 8006b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006b28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b2a:	fab3 f383 	clz	r3, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b40:	f7fd fcca 	bl	80044d8 <HAL_GetTick>
 8006b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b48:	e00c      	b.n	8006b64 <HAL_RCC_OscConfig+0xc70>
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fd fcc2 	bl	80044d8 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e1fd      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
 8006b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b68:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	fa93 f2a3 	rbit	r2, r3
 8006b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006b88:	601a      	str	r2, [r3, #0]
  return result;
 8006b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006b92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b94:	fab3 f383 	clz	r3, r3
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d102      	bne.n	8006bae <HAL_RCC_OscConfig+0xcba>
 8006ba8:	4bb0      	ldr	r3, [pc, #704]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	e027      	b.n	8006bfe <HAL_RCC_OscConfig+0xd0a>
 8006bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bb2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bc0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	fa93 f2a3 	rbit	r2, r3
 8006bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bd8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	fa93 f2a3 	rbit	r2, r3
 8006bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	4b9c      	ldr	r3, [pc, #624]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c02:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006c06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c0a:	6011      	str	r1, [r2, #0]
 8006c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c10:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	fa92 f1a2 	rbit	r1, r2
 8006c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006c22:	6011      	str	r1, [r2, #0]
  return result;
 8006c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c28:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	fab2 f282 	clz	r2, r2
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	f042 0220 	orr.w	r2, r2, #32
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	f002 021f 	and.w	r2, r2, #31
 8006c3e:	2101      	movs	r1, #1
 8006c40:	fa01 f202 	lsl.w	r2, r1, r2
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d182      	bne.n	8006b50 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c4a:	4b88      	ldr	r3, [pc, #544]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	497f      	ldr	r1, [pc, #508]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]
 8006c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006c7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	fa93 f2a3 	rbit	r2, r3
 8006c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006c96:	601a      	str	r2, [r3, #0]
  return result;
 8006c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006ca0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca2:	fab3 f383 	clz	r3, r3
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb8:	f7fd fc0e 	bl	80044d8 <HAL_GetTick>
 8006cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cc0:	e009      	b.n	8006cd6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc2:	f7fd fc09 	bl	80044d8 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e144      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
 8006cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ce8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	fa93 f2a3 	rbit	r2, r3
 8006cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006cfa:	601a      	str	r2, [r3, #0]
  return result;
 8006cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d06:	fab3 f383 	clz	r3, r3
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d102      	bne.n	8006d20 <HAL_RCC_OscConfig+0xe2c>
 8006d1a:	4b54      	ldr	r3, [pc, #336]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	e027      	b.n	8006d70 <HAL_RCC_OscConfig+0xe7c>
 8006d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	fa93 f2a3 	rbit	r2, r3
 8006d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	fa93 f2a3 	rbit	r2, r3
 8006d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	4b3f      	ldr	r3, [pc, #252]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006d78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	fa92 f1a2 	rbit	r1, r2
 8006d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006d94:	6011      	str	r1, [r2, #0]
  return result;
 8006d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	fab2 f282 	clz	r2, r2
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	f042 0220 	orr.w	r2, r2, #32
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	f002 021f 	and.w	r2, r2, #31
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f202 	lsl.w	r2, r1, r2
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d082      	beq.n	8006cc2 <HAL_RCC_OscConfig+0xdce>
 8006dbc:	e0cf      	b.n	8006f5e <HAL_RCC_OscConfig+0x106a>
 8006dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	fa93 f2a3 	rbit	r2, r3
 8006dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006de2:	601a      	str	r2, [r3, #0]
  return result;
 8006de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006dec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dee:	fab3 f383 	clz	r3, r3
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006df8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e04:	f7fd fb68 	bl	80044d8 <HAL_GetTick>
 8006e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e0c:	e009      	b.n	8006e22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e0e:	f7fd fb63 	bl	80044d8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e09e      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
 8006e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	fa93 f2a3 	rbit	r2, r3
 8006e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006e46:	601a      	str	r2, [r3, #0]
  return result;
 8006e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006e50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e52:	fab3 f383 	clz	r3, r3
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f043 0301 	orr.w	r3, r3, #1
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d104      	bne.n	8006e70 <HAL_RCC_OscConfig+0xf7c>
 8006e66:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <HAL_RCC_OscConfig+0xf78>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	e029      	b.n	8006ec0 <HAL_RCC_OscConfig+0xfcc>
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	fa93 f2a3 	rbit	r2, r3
 8006e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ea8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	fa93 f2a3 	rbit	r2, r3
 8006eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <HAL_RCC_OscConfig+0x1078>)
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ec4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ed2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	fa92 f1a2 	rbit	r1, r2
 8006edc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ee0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006ee4:	6011      	str	r1, [r2, #0]
  return result;
 8006ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006eea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	fab2 f282 	clz	r2, r2
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	f042 0220 	orr.w	r2, r2, #32
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	f002 021f 	and.w	r2, r2, #31
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f202 	lsl.w	r2, r1, r2
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d180      	bne.n	8006e0e <HAL_RCC_OscConfig+0xf1a>
 8006f0c:	e027      	b.n	8006f5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e01e      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <HAL_RCC_OscConfig+0x1078>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006f2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d10b      	bne.n	8006f5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d001      	beq.n	8006f5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40021000 	.word	0x40021000

08006f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b09e      	sub	sp, #120	; 0x78
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e162      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f88:	4b90      	ldr	r3, [pc, #576]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d910      	bls.n	8006fb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f96:	4b8d      	ldr	r3, [pc, #564]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f023 0207 	bic.w	r2, r3, #7
 8006f9e:	498b      	ldr	r1, [pc, #556]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fa6:	4b89      	ldr	r3, [pc, #548]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d001      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e14a      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc4:	4b82      	ldr	r3, [pc, #520]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	497f      	ldr	r1, [pc, #508]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80dc 	beq.w	800719c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d13c      	bne.n	8007066 <HAL_RCC_ClockConfig+0xf6>
 8006fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ff0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff4:	fa93 f3a3 	rbit	r3, r3
 8006ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffc:	fab3 f383 	clz	r3, r3
 8007000:	b2db      	uxtb	r3, r3
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d102      	bne.n	8007016 <HAL_RCC_ClockConfig+0xa6>
 8007010:	4b6f      	ldr	r3, [pc, #444]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	e00f      	b.n	8007036 <HAL_RCC_ClockConfig+0xc6>
 8007016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800701a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800701e:	fa93 f3a3 	rbit	r3, r3
 8007022:	667b      	str	r3, [r7, #100]	; 0x64
 8007024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007028:	663b      	str	r3, [r7, #96]	; 0x60
 800702a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800702c:	fa93 f3a3 	rbit	r3, r3
 8007030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007032:	4b67      	ldr	r3, [pc, #412]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800703a:	65ba      	str	r2, [r7, #88]	; 0x58
 800703c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800703e:	fa92 f2a2 	rbit	r2, r2
 8007042:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007046:	fab2 f282 	clz	r2, r2
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	f042 0220 	orr.w	r2, r2, #32
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	f002 021f 	and.w	r2, r2, #31
 8007056:	2101      	movs	r1, #1
 8007058:	fa01 f202 	lsl.w	r2, r1, r2
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d17b      	bne.n	800715a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e0f3      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d13c      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x178>
 800706e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007072:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007076:	fa93 f3a3 	rbit	r3, r3
 800707a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707e:	fab3 f383 	clz	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	d102      	bne.n	8007098 <HAL_RCC_ClockConfig+0x128>
 8007092:	4b4f      	ldr	r3, [pc, #316]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	e00f      	b.n	80070b8 <HAL_RCC_ClockConfig+0x148>
 8007098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a0:	fa93 f3a3 	rbit	r3, r3
 80070a4:	647b      	str	r3, [r7, #68]	; 0x44
 80070a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070aa:	643b      	str	r3, [r7, #64]	; 0x40
 80070ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ae:	fa93 f3a3 	rbit	r3, r3
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b4:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80070be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c0:	fa92 f2a2 	rbit	r2, r2
 80070c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80070c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c8:	fab2 f282 	clz	r2, r2
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	f042 0220 	orr.w	r2, r2, #32
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	f002 021f 	and.w	r2, r2, #31
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f202 	lsl.w	r2, r1, r2
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d13a      	bne.n	800715a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0b2      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
 80070e8:	2302      	movs	r3, #2
 80070ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	fa93 f3a3 	rbit	r3, r3
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	fab3 f383 	clz	r3, r3
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	d102      	bne.n	8007110 <HAL_RCC_ClockConfig+0x1a0>
 800710a:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	e00d      	b.n	800712c <HAL_RCC_ClockConfig+0x1bc>
 8007110:	2302      	movs	r3, #2
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	fa93 f3a3 	rbit	r3, r3
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
 800711c:	2302      	movs	r3, #2
 800711e:	623b      	str	r3, [r7, #32]
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	fa93 f3a3 	rbit	r3, r3
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2202      	movs	r2, #2
 800712e:	61ba      	str	r2, [r7, #24]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	fa92 f2a2 	rbit	r2, r2
 8007136:	617a      	str	r2, [r7, #20]
  return result;
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	fab2 f282 	clz	r2, r2
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	f042 0220 	orr.w	r2, r2, #32
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	f002 021f 	and.w	r2, r2, #31
 800714a:	2101      	movs	r1, #1
 800714c:	fa01 f202 	lsl.w	r2, r1, r2
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e079      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800715a:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f023 0203 	bic.w	r2, r3, #3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	491a      	ldr	r1, [pc, #104]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 8007168:	4313      	orrs	r3, r2
 800716a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800716c:	f7fd f9b4 	bl	80044d8 <HAL_GetTick>
 8007170:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007172:	e00a      	b.n	800718a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007174:	f7fd f9b0 	bl	80044d8 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007182:	4293      	cmp	r3, r2
 8007184:	d901      	bls.n	800718a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e061      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <HAL_RCC_ClockConfig+0x260>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f003 020c 	and.w	r2, r3, #12
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	429a      	cmp	r2, r3
 800719a:	d1eb      	bne.n	8007174 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d214      	bcs.n	80071d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071aa:	4b08      	ldr	r3, [pc, #32]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 0207 	bic.w	r2, r3, #7
 80071b2:	4906      	ldr	r1, [pc, #24]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <HAL_RCC_ClockConfig+0x25c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e040      	b.n	800724e <HAL_RCC_ClockConfig+0x2de>
 80071cc:	40022000 	.word	0x40022000
 80071d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCC_ClockConfig+0x2e8>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	491a      	ldr	r1, [pc, #104]	; (8007258 <HAL_RCC_ClockConfig+0x2e8>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071fe:	4b16      	ldr	r3, [pc, #88]	; (8007258 <HAL_RCC_ClockConfig+0x2e8>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4912      	ldr	r1, [pc, #72]	; (8007258 <HAL_RCC_ClockConfig+0x2e8>)
 800720e:	4313      	orrs	r3, r2
 8007210:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007212:	f000 f829 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 8007216:	4601      	mov	r1, r0
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_RCC_ClockConfig+0x2e8>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007220:	22f0      	movs	r2, #240	; 0xf0
 8007222:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	fa92 f2a2 	rbit	r2, r2
 800722a:	60fa      	str	r2, [r7, #12]
  return result;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	fab2 f282 	clz	r2, r2
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	40d3      	lsrs	r3, r2
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <HAL_RCC_ClockConfig+0x2ec>)
 8007238:	5cd3      	ldrb	r3, [r2, r3]
 800723a:	fa21 f303 	lsr.w	r3, r1, r3
 800723e:	4a08      	ldr	r2, [pc, #32]	; (8007260 <HAL_RCC_ClockConfig+0x2f0>)
 8007240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007242:	4b08      	ldr	r3, [pc, #32]	; (8007264 <HAL_RCC_ClockConfig+0x2f4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7fd f902 	bl	8004450 <HAL_InitTick>
  
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3778      	adds	r7, #120	; 0x78
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40021000 	.word	0x40021000
 800725c:	0800a760 	.word	0x0800a760
 8007260:	20000008 	.word	0x20000008
 8007264:	2000000c 	.word	0x2000000c

08007268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007268:	b480      	push	{r7}
 800726a:	b08b      	sub	sp, #44	; 0x2c
 800726c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007282:	4b29      	ldr	r3, [pc, #164]	; (8007328 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b04      	cmp	r3, #4
 8007290:	d002      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x30>
 8007292:	2b08      	cmp	r3, #8
 8007294:	d003      	beq.n	800729e <HAL_RCC_GetSysClockFreq+0x36>
 8007296:	e03c      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007298:	4b24      	ldr	r3, [pc, #144]	; (800732c <HAL_RCC_GetSysClockFreq+0xc4>)
 800729a:	623b      	str	r3, [r7, #32]
      break;
 800729c:	e03c      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80072a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80072a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	fa92 f2a2 	rbit	r2, r2
 80072b0:	607a      	str	r2, [r7, #4]
  return result;
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	fab2 f282 	clz	r2, r2
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	40d3      	lsrs	r3, r2
 80072bc:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <HAL_RCC_GetSysClockFreq+0xc8>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	220f      	movs	r2, #15
 80072cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	fa92 f2a2 	rbit	r2, r2
 80072d4:	60fa      	str	r2, [r7, #12]
  return result;
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	fab2 f282 	clz	r2, r2
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	40d3      	lsrs	r3, r2
 80072e0:	4a14      	ldr	r2, [pc, #80]	; (8007334 <HAL_RCC_GetSysClockFreq+0xcc>)
 80072e2:	5cd3      	ldrb	r3, [r2, r3]
 80072e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d008      	beq.n	8007302 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_RCC_GetSysClockFreq+0xc4>)
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007300:	e004      	b.n	800730c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	4a0c      	ldr	r2, [pc, #48]	; (8007338 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	623b      	str	r3, [r7, #32]
      break;
 8007310:	e002      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007314:	623b      	str	r3, [r7, #32]
      break;
 8007316:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007318:	6a3b      	ldr	r3, [r7, #32]
}
 800731a:	4618      	mov	r0, r3
 800731c:	372c      	adds	r7, #44	; 0x2c
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	007a1200 	.word	0x007a1200
 8007330:	0800a778 	.word	0x0800a778
 8007334:	0800a788 	.word	0x0800a788
 8007338:	003d0900 	.word	0x003d0900

0800733c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_RCC_GetHCLKFreq+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000008 	.word	0x20000008

08007354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800735a:	f7ff ffef 	bl	800733c <HAL_RCC_GetHCLKFreq>
 800735e:	4601      	mov	r1, r0
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007368:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800736c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	fa92 f2a2 	rbit	r2, r2
 8007374:	603a      	str	r2, [r7, #0]
  return result;
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	fab2 f282 	clz	r2, r2
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	40d3      	lsrs	r3, r2
 8007380:	4a04      	ldr	r2, [pc, #16]	; (8007394 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007382:	5cd3      	ldrb	r3, [r2, r3]
 8007384:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40021000 	.word	0x40021000
 8007394:	0800a770 	.word	0x0800a770

08007398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800739e:	f7ff ffcd 	bl	800733c <HAL_RCC_GetHCLKFreq>
 80073a2:	4601      	mov	r1, r0
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80073ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80073b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	fa92 f2a2 	rbit	r2, r2
 80073b8:	603a      	str	r2, [r7, #0]
  return result;
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	fab2 f282 	clz	r2, r2
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	40d3      	lsrs	r3, r2
 80073c4:	4a04      	ldr	r2, [pc, #16]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80073c6:	5cd3      	ldrb	r3, [r2, r3]
 80073c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40021000 	.word	0x40021000
 80073d8:	0800a770 	.word	0x0800a770

080073dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b092      	sub	sp, #72	; 0x48
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80cd 	beq.w	800759a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007400:	4b8e      	ldr	r3, [pc, #568]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10e      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800740c:	4b8b      	ldr	r3, [pc, #556]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	4a8a      	ldr	r2, [pc, #552]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007416:	61d3      	str	r3, [r2, #28]
 8007418:	4b88      	ldr	r3, [pc, #544]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742a:	4b85      	ldr	r3, [pc, #532]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d118      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007436:	4b82      	ldr	r3, [pc, #520]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a81      	ldr	r2, [pc, #516]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800743c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007440:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007442:	f7fd f849 	bl	80044d8 <HAL_GetTick>
 8007446:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	e008      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744a:	f7fd f845 	bl	80044d8 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b64      	cmp	r3, #100	; 0x64
 8007456:	d901      	bls.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e0ea      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745c:	4b78      	ldr	r3, [pc, #480]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007468:	4b74      	ldr	r3, [pc, #464]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d07d      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007482:	429a      	cmp	r2, r3
 8007484:	d076      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007486:	4b6d      	ldr	r3, [pc, #436]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007494:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	fa93 f3a3 	rbit	r3, r3
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	4b66      	ldr	r3, [pc, #408]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	461a      	mov	r2, r3
 80074b0:	2301      	movs	r3, #1
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	fa93 f3a3 	rbit	r3, r3
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074c4:	fab3 f383 	clz	r3, r3
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	4b5d      	ldr	r3, [pc, #372]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	2300      	movs	r3, #0
 80074d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074d8:	4a58      	ldr	r2, [pc, #352]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d045      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fc fff6 	bl	80044d8 <HAL_GetTick>
 80074ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ee:	e00a      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f0:	f7fc fff2 	bl	80044d8 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fe:	4293      	cmp	r3, r2
 8007500:	d901      	bls.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e095      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007506:	2302      	movs	r3, #2
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	fa93 f3a3 	rbit	r3, r3
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	2302      	movs	r3, #2
 8007514:	623b      	str	r3, [r7, #32]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	fa93 f3a3 	rbit	r3, r3
 800751c:	61fb      	str	r3, [r7, #28]
  return result;
 800751e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007520:	fab3 f383 	clz	r3, r3
 8007524:	b2db      	uxtb	r3, r3
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	b2db      	uxtb	r3, r3
 800752a:	f043 0302 	orr.w	r3, r3, #2
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d102      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007534:	4b41      	ldr	r3, [pc, #260]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	e007      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800753a:	2302      	movs	r3, #2
 800753c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	fa93 f3a3 	rbit	r3, r3
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	4b3d      	ldr	r3, [pc, #244]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2202      	movs	r2, #2
 800754c:	613a      	str	r2, [r7, #16]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	fa92 f2a2 	rbit	r2, r2
 8007554:	60fa      	str	r2, [r7, #12]
  return result;
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	fab2 f282 	clz	r2, r2
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	f002 021f 	and.w	r2, r2, #31
 8007568:	2101      	movs	r1, #1
 800756a:	fa01 f202 	lsl.w	r2, r1, r2
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0bd      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007574:	4b31      	ldr	r3, [pc, #196]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	492e      	ldr	r1, [pc, #184]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007582:	4313      	orrs	r3, r2
 8007584:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007586:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758e:	4b2b      	ldr	r3, [pc, #172]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4a2a      	ldr	r2, [pc, #168]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007598:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075a6:	4b25      	ldr	r3, [pc, #148]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4922      	ldr	r1, [pc, #136]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	f023 0210 	bic.w	r2, r3, #16
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	491a      	ldr	r1, [pc, #104]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075e2:	4b16      	ldr	r3, [pc, #88]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	4913      	ldr	r1, [pc, #76]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007600:	4b0e      	ldr	r3, [pc, #56]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	490b      	ldr	r1, [pc, #44]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800760e:	4313      	orrs	r3, r2
 8007610:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800761e:	4b07      	ldr	r3, [pc, #28]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	4904      	ldr	r1, [pc, #16]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800762c:	4313      	orrs	r3, r2
 800762e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3748      	adds	r7, #72	; 0x48
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40021000 	.word	0x40021000
 8007640:	40007000 	.word	0x40007000
 8007644:	10908100 	.word	0x10908100

08007648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e095      	b.n	8007786 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d108      	bne.n	8007674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800766a:	d009      	beq.n	8007680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	61da      	str	r2, [r3, #28]
 8007672:	e005      	b.n	8007680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fc fb50 	bl	8003d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076c0:	d902      	bls.n	80076c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e002      	b.n	80076ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80076d6:	d007      	beq.n	80076e8 <HAL_SPI_Init+0xa0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076e0:	d002      	beq.n	80076e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	431a      	orrs	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	ea42 0103 	orr.w	r1, r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	f003 0204 	and.w	r2, r3, #4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007764:	ea42 0103 	orr.w	r1, r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b088      	sub	sp, #32
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_SPI_Transmit+0x22>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e15f      	b.n	8007a70 <HAL_SPI_Transmit+0x2e2>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b8:	f7fc fe8e 	bl	80044d8 <HAL_GetTick>
 80077bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d002      	beq.n	80077d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
 80077d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077d2:	e148      	b.n	8007a66 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_Transmit+0x52>
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077e4:	e13f      	b.n	8007a66 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2203      	movs	r2, #3
 80077ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007830:	d10f      	bne.n	8007852 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007850:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d007      	beq.n	8007870 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007878:	d94f      	bls.n	800791a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_SPI_Transmit+0xfa>
 8007882:	8afb      	ldrh	r3, [r7, #22]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d142      	bne.n	800790e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	881a      	ldrh	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	1c9a      	adds	r2, r3, #2
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078ac:	e02f      	b.n	800790e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d112      	bne.n	80078e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	1c9a      	adds	r2, r3, #2
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078e0:	e015      	b.n	800790e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e2:	f7fc fdf9 	bl	80044d8 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d803      	bhi.n	80078fa <HAL_SPI_Transmit+0x16c>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f8:	d102      	bne.n	8007900 <HAL_SPI_Transmit+0x172>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800790c:	e0ab      	b.n	8007a66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ca      	bne.n	80078ae <HAL_SPI_Transmit+0x120>
 8007918:	e080      	b.n	8007a1c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_SPI_Transmit+0x19a>
 8007922:	8afb      	ldrh	r3, [r7, #22]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d174      	bne.n	8007a12 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d912      	bls.n	8007958 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	881a      	ldrh	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b02      	subs	r3, #2
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007956:	e05c      	b.n	8007a12 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800797e:	e048      	b.n	8007a12 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d12b      	bne.n	80079e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d912      	bls.n	80079be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	881a      	ldrh	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b02      	subs	r3, #2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079bc:	e029      	b.n	8007a12 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079e4:	e015      	b.n	8007a12 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e6:	f7fc fd77 	bl	80044d8 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d803      	bhi.n	80079fe <HAL_SPI_Transmit+0x270>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fc:	d102      	bne.n	8007a04 <HAL_SPI_Transmit+0x276>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007a10:	e029      	b.n	8007a66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1b1      	bne.n	8007980 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fcf9 	bl	8008418 <SPI_EndRxTxTransaction>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e003      	b.n	8007a66 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d002      	beq.n	8007a9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a9c:	e11a      	b.n	8007cd4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa6:	d112      	bne.n	8007ace <HAL_SPI_Receive+0x56>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10e      	bne.n	8007ace <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f90e 	bl	8007ce6 <HAL_SPI_TransmitReceive>
 8007aca:	4603      	mov	r3, r0
 8007acc:	e107      	b.n	8007cde <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_SPI_Receive+0x64>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e100      	b.n	8007cde <HAL_SPI_Receive+0x266>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae4:	f7fc fcf8 	bl	80044d8 <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Receive+0x7e>
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007afa:	e0eb      	b.n	8007cd4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2204      	movs	r2, #4
 8007b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	88fa      	ldrh	r2, [r7, #6]
 8007b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b46:	d908      	bls.n	8007b5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b56:	605a      	str	r2, [r3, #4]
 8007b58:	e007      	b.n	8007b6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b72:	d10f      	bne.n	8007b94 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d007      	beq.n	8007bb2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bba:	d86f      	bhi.n	8007c9c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bbc:	e034      	b.n	8007c28 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d117      	bne.n	8007bfc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f103 020c 	add.w	r2, r3, #12
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007bfa:	e015      	b.n	8007c28 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfc:	f7fc fc6c 	bl	80044d8 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d803      	bhi.n	8007c14 <HAL_SPI_Receive+0x19c>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c12:	d102      	bne.n	8007c1a <HAL_SPI_Receive+0x1a2>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007c26:	e055      	b.n	8007cd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1c4      	bne.n	8007bbe <HAL_SPI_Receive+0x146>
 8007c34:	e038      	b.n	8007ca8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d115      	bne.n	8007c70 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	b292      	uxth	r2, r2
 8007c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	1c9a      	adds	r2, r3, #2
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007c6e:	e015      	b.n	8007c9c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c70:	f7fc fc32 	bl	80044d8 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d803      	bhi.n	8007c88 <HAL_SPI_Receive+0x210>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_Receive+0x216>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007c9a:	e01b      	b.n	8007cd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1c6      	bne.n	8007c36 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fb5b 	bl	8008368 <SPI_EndRxTransaction>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
 8007cca:	e003      	b.n	8007cd4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08a      	sub	sp, #40	; 0x28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_SPI_TransmitReceive+0x26>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e20a      	b.n	8008122 <HAL_SPI_TransmitReceive+0x43c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d14:	f7fc fbe0 	bl	80044d8 <HAL_GetTick>
 8007d18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d2c:	887b      	ldrh	r3, [r7, #2]
 8007d2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d30:	7efb      	ldrb	r3, [r7, #27]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d00e      	beq.n	8007d54 <HAL_SPI_TransmitReceive+0x6e>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d3c:	d106      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x66>
 8007d46:	7efb      	ldrb	r3, [r7, #27]
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d003      	beq.n	8007d54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d52:	e1e0      	b.n	8008116 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x80>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x80>
 8007d60:	887b      	ldrh	r3, [r7, #2]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d6c:	e1d3      	b.n	8008116 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d003      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	887a      	ldrh	r2, [r7, #2]
 8007d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	887a      	ldrh	r2, [r7, #2]
 8007d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	887a      	ldrh	r2, [r7, #2]
 8007da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dc4:	d802      	bhi.n	8007dcc <HAL_SPI_TransmitReceive+0xe6>
 8007dc6:	8a3b      	ldrh	r3, [r7, #16]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d908      	bls.n	8007dde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	e007      	b.n	8007dee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d007      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e14:	f240 8081 	bls.w	8007f1a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0x140>
 8007e20:	8a7b      	ldrh	r3, [r7, #18]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d16d      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	881a      	ldrh	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	1c9a      	adds	r2, r3, #2
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e4a:	e05a      	b.n	8007f02 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d11b      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x1ac>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d016      	beq.n	8007e92 <HAL_SPI_TransmitReceive+0x1ac>
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d113      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	881a      	ldrh	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11c      	bne.n	8007eda <HAL_SPI_TransmitReceive+0x1f4>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d016      	beq.n	8007eda <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	b292      	uxth	r2, r2
 8007eb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	1c9a      	adds	r2, r3, #2
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eda:	f7fc fafd 	bl	80044d8 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d80b      	bhi.n	8007f02 <HAL_SPI_TransmitReceive+0x21c>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef0:	d007      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007f00:	e109      	b.n	8008116 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d19f      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x166>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d199      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x166>
 8007f18:	e0e3      	b.n	80080e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_SPI_TransmitReceive+0x244>
 8007f22:	8a7b      	ldrh	r3, [r7, #18]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	f040 80cf 	bne.w	80080c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d912      	bls.n	8007f5a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	881a      	ldrh	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	1c9a      	adds	r2, r3, #2
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b02      	subs	r3, #2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f58:	e0b6      	b.n	80080c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	330c      	adds	r3, #12
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f80:	e0a2      	b.n	80080c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d134      	bne.n	8007ffa <HAL_SPI_TransmitReceive+0x314>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d02f      	beq.n	8007ffa <HAL_SPI_TransmitReceive+0x314>
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d12c      	bne.n	8007ffa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d912      	bls.n	8007fd0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	881a      	ldrh	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b02      	subs	r3, #2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fce:	e012      	b.n	8007ff6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b01      	cmp	r3, #1
 8008006:	d148      	bne.n	800809a <HAL_SPI_TransmitReceive+0x3b4>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d042      	beq.n	800809a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d923      	bls.n	8008068 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	b292      	uxth	r2, r2
 800802c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	1c9a      	adds	r2, r3, #2
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b02      	subs	r3, #2
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b01      	cmp	r3, #1
 8008054:	d81f      	bhi.n	8008096 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	e016      	b.n	8008096 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f103 020c 	add.w	r2, r3, #12
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008096:	2301      	movs	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800809a:	f7fc fa1d 	bl	80044d8 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d803      	bhi.n	80080b2 <HAL_SPI_TransmitReceive+0x3cc>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b0:	d102      	bne.n	80080b8 <HAL_SPI_TransmitReceive+0x3d2>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80080c6:	e026      	b.n	8008116 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f47f af57 	bne.w	8007f82 <HAL_SPI_TransmitReceive+0x29c>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f47f af50 	bne.w	8007f82 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f996 	bl	8008418 <SPI_EndRxTxTransaction>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810c:	e003      	b.n	8008116 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800811e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008122:	4618      	mov	r0, r3
 8008124:	3728      	adds	r7, #40	; 0x28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800813c:	f7fc f9cc 	bl	80044d8 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4413      	add	r3, r2
 800814a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800814c:	f7fc f9c4 	bl	80044d8 <HAL_GetTick>
 8008150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008152:	4b39      	ldr	r3, [pc, #228]	; (8008238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	015b      	lsls	r3, r3, #5
 8008158:	0d1b      	lsrs	r3, r3, #20
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008162:	e054      	b.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800816a:	d050      	beq.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800816c:	f7fc f9b4 	bl	80044d8 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	429a      	cmp	r2, r3
 800817a:	d902      	bls.n	8008182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d13d      	bne.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800819a:	d111      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	d004      	beq.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ae:	d107      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d10f      	bne.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e017      	b.n	800822e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3b01      	subs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	429a      	cmp	r2, r3
 800822a:	d19b      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000008 	.word	0x20000008

0800823c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800824e:	f7fc f943 	bl	80044d8 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	4413      	add	r3, r2
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800825e:	f7fc f93b 	bl	80044d8 <HAL_GetTick>
 8008262:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800826c:	4b3d      	ldr	r3, [pc, #244]	; (8008364 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	00da      	lsls	r2, r3, #3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	0d1b      	lsrs	r3, r3, #20
 800827c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008284:	e060      	b.n	8008348 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800828c:	d107      	bne.n	800829e <SPI_WaitFifoStateUntilTimeout+0x62>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800829c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082a4:	d050      	beq.n	8008348 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082a6:	f7fc f917 	bl	80044d8 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d902      	bls.n	80082bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d13d      	bne.n	8008338 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082d4:	d111      	bne.n	80082fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082de:	d004      	beq.n	80082ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e8:	d107      	bne.n	80082fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	d10f      	bne.n	8008324 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008322:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e010      	b.n	800835a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	3b01      	subs	r3, #1
 8008346:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4013      	ands	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d196      	bne.n	8008286 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000008 	.word	0x20000008

08008368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800837c:	d111      	bne.n	80083a2 <SPI_EndRxTransaction+0x3a>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008386:	d004      	beq.n	8008392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008390:	d107      	bne.n	80083a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff febd 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083bc:	f043 0220 	orr.w	r2, r3, #32
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e023      	b.n	8008410 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083d0:	d11d      	bne.n	800840e <SPI_EndRxTransaction+0xa6>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083da:	d004      	beq.n	80083e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e4:	d113      	bne.n	800840e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff22 	bl	800823c <SPI_WaitFifoStateUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e000      	b.n	8008410 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7ff ff03 	bl	800823c <SPI_WaitFifoStateUntilTimeout>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008440:	f043 0220 	orr.w	r2, r3, #32
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e027      	b.n	800849c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	2180      	movs	r1, #128	; 0x80
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fe68 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008466:	f043 0220 	orr.w	r2, r3, #32
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e014      	b.n	800849c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fedc 	bl	800823c <SPI_WaitFifoStateUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848e:	f043 0220 	orr.w	r2, r3, #32
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e000      	b.n	800849c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e049      	b.n	800854a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fb fe8a 	bl	80041e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f000 faf6 	bl	8008ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	d001      	beq.n	800856c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e038      	b.n	80085de <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <HAL_TIM_Base_Start+0x98>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00e      	beq.n	800859c <HAL_TIM_Base_Start+0x48>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008586:	d009      	beq.n	800859c <HAL_TIM_Base_Start+0x48>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a18      	ldr	r2, [pc, #96]	; (80085f0 <HAL_TIM_Base_Start+0x9c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_TIM_Base_Start+0x48>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a17      	ldr	r2, [pc, #92]	; (80085f4 <HAL_TIM_Base_Start+0xa0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d115      	bne.n	80085c8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_TIM_Base_Start+0xa4>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b06      	cmp	r3, #6
 80085ac:	d015      	beq.n	80085da <HAL_TIM_Base_Start+0x86>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b4:	d011      	beq.n	80085da <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c6:	e008      	b.n	80085da <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	e000      	b.n	80085dc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40000400 	.word	0x40000400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	00010007 	.word	0x00010007

080085fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d001      	beq.n	8008614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e040      	b.n	8008696 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00e      	beq.n	8008654 <HAL_TIM_Base_Start_IT+0x58>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863e:	d009      	beq.n	8008654 <HAL_TIM_Base_Start_IT+0x58>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a18      	ldr	r2, [pc, #96]	; (80086a8 <HAL_TIM_Base_Start_IT+0xac>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_TIM_Base_Start_IT+0x58>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <HAL_TIM_Base_Start_IT+0xb0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d115      	bne.n	8008680 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800865c:	4013      	ands	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b06      	cmp	r3, #6
 8008664:	d015      	beq.n	8008692 <HAL_TIM_Base_Start_IT+0x96>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866c:	d011      	beq.n	8008692 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867e:	e008      	b.n	8008692 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e000      	b.n	8008694 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40000400 	.word	0x40000400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	00010007 	.word	0x00010007

080086b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d122      	bne.n	8008710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d11b      	bne.n	8008710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0202 	mvn.w	r2, #2
 80086e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9ce 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 80086fc:	e005      	b.n	800870a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f9c0 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f9d1 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b04      	cmp	r3, #4
 800871c:	d122      	bne.n	8008764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b04      	cmp	r3, #4
 800872a:	d11b      	bne.n	8008764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0204 	mvn.w	r2, #4
 8008734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9a4 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 8008750:	e005      	b.n	800875e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f996 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9a7 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b08      	cmp	r3, #8
 8008770:	d122      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b08      	cmp	r3, #8
 800877e:	d11b      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0208 	mvn.w	r2, #8
 8008788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2204      	movs	r2, #4
 800878e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f97a 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 80087a4:	e005      	b.n	80087b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f96c 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f97d 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d122      	bne.n	800880c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0310 	and.w	r3, r3, #16
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d11b      	bne.n	800880c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0210 	mvn.w	r2, #16
 80087dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2208      	movs	r2, #8
 80087e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f950 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 80087f8:	e005      	b.n	8008806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f942 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f953 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10e      	bne.n	8008838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b01      	cmp	r3, #1
 8008826:	d107      	bne.n	8008838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f06f 0201 	mvn.w	r2, #1
 8008830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fb fd44 	bl	80042c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d10e      	bne.n	8008864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008850:	2b80      	cmp	r3, #128	; 0x80
 8008852:	d107      	bne.n	8008864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800885c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fac2 	bl	8008de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008872:	d10e      	bne.n	8008892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b80      	cmp	r3, #128	; 0x80
 8008880:	d107      	bne.n	8008892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800888a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fab5 	bl	8008dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	d10e      	bne.n	80088be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d107      	bne.n	80088be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f901 	bl	8008ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d10e      	bne.n	80088ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d107      	bne.n	80088ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f06f 0220 	mvn.w	r2, #32
 80088e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fa75 	bl	8008dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_TIM_ConfigClockSource+0x1c>
 800890a:	2302      	movs	r3, #2
 800890c:	e0b6      	b.n	8008a7c <HAL_TIM_ConfigClockSource+0x18a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800892c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008930:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008938:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894a:	d03e      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0xd8>
 800894c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008950:	f200 8087 	bhi.w	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 8008954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008958:	f000 8086 	beq.w	8008a68 <HAL_TIM_ConfigClockSource+0x176>
 800895c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008960:	d87f      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 8008962:	2b70      	cmp	r3, #112	; 0x70
 8008964:	d01a      	beq.n	800899c <HAL_TIM_ConfigClockSource+0xaa>
 8008966:	2b70      	cmp	r3, #112	; 0x70
 8008968:	d87b      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 800896a:	2b60      	cmp	r3, #96	; 0x60
 800896c:	d050      	beq.n	8008a10 <HAL_TIM_ConfigClockSource+0x11e>
 800896e:	2b60      	cmp	r3, #96	; 0x60
 8008970:	d877      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 8008972:	2b50      	cmp	r3, #80	; 0x50
 8008974:	d03c      	beq.n	80089f0 <HAL_TIM_ConfigClockSource+0xfe>
 8008976:	2b50      	cmp	r3, #80	; 0x50
 8008978:	d873      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d058      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x13e>
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d86f      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 8008982:	2b30      	cmp	r3, #48	; 0x30
 8008984:	d064      	beq.n	8008a50 <HAL_TIM_ConfigClockSource+0x15e>
 8008986:	2b30      	cmp	r3, #48	; 0x30
 8008988:	d86b      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 800898a:	2b20      	cmp	r3, #32
 800898c:	d060      	beq.n	8008a50 <HAL_TIM_ConfigClockSource+0x15e>
 800898e:	2b20      	cmp	r3, #32
 8008990:	d867      	bhi.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d05c      	beq.n	8008a50 <HAL_TIM_ConfigClockSource+0x15e>
 8008996:	2b10      	cmp	r3, #16
 8008998:	d05a      	beq.n	8008a50 <HAL_TIM_ConfigClockSource+0x15e>
 800899a:	e062      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	6899      	ldr	r1, [r3, #8]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f000 f984 	bl	8008cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	609a      	str	r2, [r3, #8]
      break;
 80089c8:	e04f      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6899      	ldr	r1, [r3, #8]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f000 f96d 	bl	8008cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089ec:	609a      	str	r2, [r3, #8]
      break;
 80089ee:	e03c      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6859      	ldr	r1, [r3, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f000 f8e1 	bl	8008bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2150      	movs	r1, #80	; 0x50
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f93a 	bl	8008c82 <TIM_ITRx_SetConfig>
      break;
 8008a0e:	e02c      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6859      	ldr	r1, [r3, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f000 f900 	bl	8008c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2160      	movs	r1, #96	; 0x60
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f92a 	bl	8008c82 <TIM_ITRx_SetConfig>
      break;
 8008a2e:	e01c      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6859      	ldr	r1, [r3, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f000 f8c1 	bl	8008bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2140      	movs	r1, #64	; 0x40
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f91a 	bl	8008c82 <TIM_ITRx_SetConfig>
      break;
 8008a4e:	e00c      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f000 f911 	bl	8008c82 <TIM_ITRx_SetConfig>
      break;
 8008a60:	e003      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
      break;
 8008a66:	e000      	b.n	8008a6a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008a68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a32      	ldr	r2, [pc, #200]	; (8008bb0 <TIM_Base_SetConfig+0xdc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_Base_SetConfig+0x28>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af2:	d003      	beq.n	8008afc <TIM_Base_SetConfig+0x28>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2f      	ldr	r2, [pc, #188]	; (8008bb4 <TIM_Base_SetConfig+0xe0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d108      	bne.n	8008b0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a27      	ldr	r2, [pc, #156]	; (8008bb0 <TIM_Base_SetConfig+0xdc>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <TIM_Base_SetConfig+0x6a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1c:	d00f      	beq.n	8008b3e <TIM_Base_SetConfig+0x6a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a24      	ldr	r2, [pc, #144]	; (8008bb4 <TIM_Base_SetConfig+0xe0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00b      	beq.n	8008b3e <TIM_Base_SetConfig+0x6a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a23      	ldr	r2, [pc, #140]	; (8008bb8 <TIM_Base_SetConfig+0xe4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d007      	beq.n	8008b3e <TIM_Base_SetConfig+0x6a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <TIM_Base_SetConfig+0xe8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d003      	beq.n	8008b3e <TIM_Base_SetConfig+0x6a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a21      	ldr	r2, [pc, #132]	; (8008bc0 <TIM_Base_SetConfig+0xec>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d108      	bne.n	8008b50 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a0e      	ldr	r2, [pc, #56]	; (8008bb0 <TIM_Base_SetConfig+0xdc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00b      	beq.n	8008b94 <TIM_Base_SetConfig+0xc0>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a0e      	ldr	r2, [pc, #56]	; (8008bb8 <TIM_Base_SetConfig+0xe4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d007      	beq.n	8008b94 <TIM_Base_SetConfig+0xc0>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <TIM_Base_SetConfig+0xe8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d003      	beq.n	8008b94 <TIM_Base_SetConfig+0xc0>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <TIM_Base_SetConfig+0xec>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d103      	bne.n	8008b9c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	615a      	str	r2, [r3, #20]
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40012c00 	.word	0x40012c00
 8008bb4:	40000400 	.word	0x40000400
 8008bb8:	40014000 	.word	0x40014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	40014800 	.word	0x40014800

08008bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f023 0201 	bic.w	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f023 030a 	bic.w	r3, r3, #10
 8008c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b087      	sub	sp, #28
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	f023 0210 	bic.w	r2, r3, #16
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	031b      	lsls	r3, r3, #12
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	621a      	str	r2, [r3, #32]
}
 8008c76:	bf00      	nop
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f043 0307 	orr.w	r3, r3, #7
 8008ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	609a      	str	r2, [r3, #8]
}
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	021a      	lsls	r2, r3, #8
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	609a      	str	r2, [r3, #8]
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e054      	b.n	8008dba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a24      	ldr	r2, [pc, #144]	; (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d108      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d00e      	beq.n	8008d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d78:	d009      	beq.n	8008d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a13      	ldr	r2, [pc, #76]	; (8008dcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d004      	beq.n	8008d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a11      	ldr	r2, [pc, #68]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d10c      	bne.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40014000 	.word	0x40014000

08008dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e040      	b.n	8008ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fb fa88 	bl	8004348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2224      	movs	r2, #36	; 0x24
 8008e3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0201 	bic.w	r2, r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f8b6 	bl	8008fc0 <UART_SetConfig>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e022      	b.n	8008ea4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9e0 	bl	800922c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa67 	bl	8009370 <UART_CheckIdleState>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08a      	sub	sp, #40	; 0x28
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d178      	bne.n	8008fb6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_UART_Transmit+0x24>
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e071      	b.n	8008fb8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2221      	movs	r2, #33	; 0x21
 8008ee0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ee2:	f7fb faf9 	bl	80044d8 <HAL_GetTick>
 8008ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	88fa      	ldrh	r2, [r7, #6]
 8008eec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f00:	d108      	bne.n	8008f14 <HAL_UART_Transmit+0x68>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	e003      	b.n	8008f1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f1c:	e030      	b.n	8008f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2200      	movs	r2, #0
 8008f26:	2180      	movs	r1, #128	; 0x80
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fac9 	bl	80094c0 <UART_WaitOnFlagUntilTimeout>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e03c      	b.n	8008fb8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10b      	bne.n	8008f5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	881a      	ldrh	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f50:	b292      	uxth	r2, r2
 8008f52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	3302      	adds	r3, #2
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	e008      	b.n	8008f6e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	b292      	uxth	r2, r2
 8008f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1c8      	bne.n	8008f1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2200      	movs	r2, #0
 8008f94:	2140      	movs	r1, #64	; 0x40
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fa92 	bl	80094c0 <UART_WaitOnFlagUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e005      	b.n	8008fb8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008fb6:	2302      	movs	r3, #2
  }
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3720      	adds	r7, #32
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b8a      	ldr	r3, [pc, #552]	; (8009214 <UART_SetConfig+0x254>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	6979      	ldr	r1, [r7, #20]
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	430a      	orrs	r2, r1
 8009030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a78      	ldr	r2, [pc, #480]	; (8009218 <UART_SetConfig+0x258>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d120      	bne.n	800907e <UART_SetConfig+0xbe>
 800903c:	4b77      	ldr	r3, [pc, #476]	; (800921c <UART_SetConfig+0x25c>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	2b03      	cmp	r3, #3
 8009046:	d817      	bhi.n	8009078 <UART_SetConfig+0xb8>
 8009048:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <UART_SetConfig+0x90>)
 800904a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904e:	bf00      	nop
 8009050:	08009061 	.word	0x08009061
 8009054:	0800906d 	.word	0x0800906d
 8009058:	08009073 	.word	0x08009073
 800905c:	08009067 	.word	0x08009067
 8009060:	2300      	movs	r3, #0
 8009062:	77fb      	strb	r3, [r7, #31]
 8009064:	e01d      	b.n	80090a2 <UART_SetConfig+0xe2>
 8009066:	2302      	movs	r3, #2
 8009068:	77fb      	strb	r3, [r7, #31]
 800906a:	e01a      	b.n	80090a2 <UART_SetConfig+0xe2>
 800906c:	2304      	movs	r3, #4
 800906e:	77fb      	strb	r3, [r7, #31]
 8009070:	e017      	b.n	80090a2 <UART_SetConfig+0xe2>
 8009072:	2308      	movs	r3, #8
 8009074:	77fb      	strb	r3, [r7, #31]
 8009076:	e014      	b.n	80090a2 <UART_SetConfig+0xe2>
 8009078:	2310      	movs	r3, #16
 800907a:	77fb      	strb	r3, [r7, #31]
 800907c:	e011      	b.n	80090a2 <UART_SetConfig+0xe2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a67      	ldr	r2, [pc, #412]	; (8009220 <UART_SetConfig+0x260>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d102      	bne.n	800908e <UART_SetConfig+0xce>
 8009088:	2300      	movs	r3, #0
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	e009      	b.n	80090a2 <UART_SetConfig+0xe2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a64      	ldr	r2, [pc, #400]	; (8009224 <UART_SetConfig+0x264>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d102      	bne.n	800909e <UART_SetConfig+0xde>
 8009098:	2300      	movs	r3, #0
 800909a:	77fb      	strb	r3, [r7, #31]
 800909c:	e001      	b.n	80090a2 <UART_SetConfig+0xe2>
 800909e:	2310      	movs	r3, #16
 80090a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090aa:	d15a      	bne.n	8009162 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80090ac:	7ffb      	ldrb	r3, [r7, #31]
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d827      	bhi.n	8009102 <UART_SetConfig+0x142>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0xf8>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090dd 	.word	0x080090dd
 80090bc:	080090e5 	.word	0x080090e5
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	08009103 	.word	0x08009103
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	08009103 	.word	0x08009103
 80090d0:	08009103 	.word	0x08009103
 80090d4:	08009103 	.word	0x08009103
 80090d8:	080090fb 	.word	0x080090fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090dc:	f7fe f93a 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 80090e0:	61b8      	str	r0, [r7, #24]
        break;
 80090e2:	e013      	b.n	800910c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090e4:	f7fe f958 	bl	8007398 <HAL_RCC_GetPCLK2Freq>
 80090e8:	61b8      	str	r0, [r7, #24]
        break;
 80090ea:	e00f      	b.n	800910c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090ec:	4b4e      	ldr	r3, [pc, #312]	; (8009228 <UART_SetConfig+0x268>)
 80090ee:	61bb      	str	r3, [r7, #24]
        break;
 80090f0:	e00c      	b.n	800910c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090f2:	f7fe f8b9 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 80090f6:	61b8      	str	r0, [r7, #24]
        break;
 80090f8:	e008      	b.n	800910c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090fe:	61bb      	str	r3, [r7, #24]
        break;
 8009100:	e004      	b.n	800910c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	77bb      	strb	r3, [r7, #30]
        break;
 800910a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d074      	beq.n	80091fc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	005a      	lsls	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	441a      	add	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	fbb2 f3f3 	udiv	r3, r2, r3
 8009126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2b0f      	cmp	r3, #15
 800912c:	d916      	bls.n	800915c <UART_SetConfig+0x19c>
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009134:	d212      	bcs.n	800915c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f023 030f 	bic.w	r3, r3, #15
 800913e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	b29b      	uxth	r3, r3
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	b29a      	uxth	r2, r3
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	4313      	orrs	r3, r2
 8009150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	89fa      	ldrh	r2, [r7, #14]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	e04f      	b.n	80091fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	77bb      	strb	r3, [r7, #30]
 8009160:	e04c      	b.n	80091fc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009162:	7ffb      	ldrb	r3, [r7, #31]
 8009164:	2b08      	cmp	r3, #8
 8009166:	d828      	bhi.n	80091ba <UART_SetConfig+0x1fa>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <UART_SetConfig+0x1b0>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009195 	.word	0x08009195
 8009174:	0800919d 	.word	0x0800919d
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091bb 	.word	0x080091bb
 8009180:	080091ab 	.word	0x080091ab
 8009184:	080091bb 	.word	0x080091bb
 8009188:	080091bb 	.word	0x080091bb
 800918c:	080091bb 	.word	0x080091bb
 8009190:	080091b3 	.word	0x080091b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009194:	f7fe f8de 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8009198:	61b8      	str	r0, [r7, #24]
        break;
 800919a:	e013      	b.n	80091c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800919c:	f7fe f8fc 	bl	8007398 <HAL_RCC_GetPCLK2Freq>
 80091a0:	61b8      	str	r0, [r7, #24]
        break;
 80091a2:	e00f      	b.n	80091c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a4:	4b20      	ldr	r3, [pc, #128]	; (8009228 <UART_SetConfig+0x268>)
 80091a6:	61bb      	str	r3, [r7, #24]
        break;
 80091a8:	e00c      	b.n	80091c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091aa:	f7fe f85d 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 80091ae:	61b8      	str	r0, [r7, #24]
        break;
 80091b0:	e008      	b.n	80091c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091b6:	61bb      	str	r3, [r7, #24]
        break;
 80091b8:	e004      	b.n	80091c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	77bb      	strb	r3, [r7, #30]
        break;
 80091c2:	bf00      	nop
    }

    if (pclk != 0U)
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d018      	beq.n	80091fc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	085a      	lsrs	r2, r3, #1
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	441a      	add	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b0f      	cmp	r3, #15
 80091e2:	d909      	bls.n	80091f8 <UART_SetConfig+0x238>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ea:	d205      	bcs.n	80091f8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60da      	str	r2, [r3, #12]
 80091f6:	e001      	b.n	80091fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009208:	7fbb      	ldrb	r3, [r7, #30]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	efff69f3 	.word	0xefff69f3
 8009218:	40013800 	.word	0x40013800
 800921c:	40021000 	.word	0x40021000
 8009220:	40004400 	.word	0x40004400
 8009224:	40004800 	.word	0x40004800
 8009228:	007a1200 	.word	0x007a1200

0800922c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01a      	beq.n	8009342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800932a:	d10a      	bne.n	8009342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	605a      	str	r2, [r3, #4]
  }
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b098      	sub	sp, #96	; 0x60
 8009374:	af02      	add	r7, sp, #8
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009380:	f7fb f8aa 	bl	80044d8 <HAL_GetTick>
 8009384:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b08      	cmp	r3, #8
 8009392:	d12e      	bne.n	80093f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f88c 	bl	80094c0 <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d021      	beq.n	80093f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093cc:	647b      	str	r3, [r7, #68]	; 0x44
 80093ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2220      	movs	r2, #32
 80093e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e062      	b.n	80094b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d149      	bne.n	8009494 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f856 	bl	80094c0 <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d03c      	beq.n	8009494 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	623b      	str	r3, [r7, #32]
   return(result);
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800942e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	633b      	str	r3, [r7, #48]	; 0x30
 800943a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800943e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3308      	adds	r3, #8
 8009452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	60fb      	str	r3, [r7, #12]
   return(result);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0301 	bic.w	r3, r3, #1
 8009462:	64bb      	str	r3, [r7, #72]	; 0x48
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800946c:	61fa      	str	r2, [r7, #28]
 800946e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	69b9      	ldr	r1, [r7, #24]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	617b      	str	r3, [r7, #20]
   return(result);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e5      	bne.n	800944c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e011      	b.n	80094b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3758      	adds	r7, #88	; 0x58
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	4613      	mov	r3, r2
 80094ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d0:	e049      	b.n	8009566 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094d8:	d045      	beq.n	8009566 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094da:	f7fa fffd 	bl	80044d8 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e048      	b.n	8009586 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d031      	beq.n	8009566 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b08      	cmp	r3, #8
 800950e:	d110      	bne.n	8009532 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2208      	movs	r2, #8
 8009516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f838 	bl	800958e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2208      	movs	r2, #8
 8009522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e029      	b.n	8009586 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009540:	d111      	bne.n	8009566 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800954a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f81e 	bl	800958e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e00f      	b.n	8009586 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69da      	ldr	r2, [r3, #28]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4013      	ands	r3, r2
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	bf0c      	ite	eq
 8009576:	2301      	moveq	r3, #1
 8009578:	2300      	movne	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	429a      	cmp	r2, r3
 8009582:	d0a6      	beq.n	80094d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800958e:	b480      	push	{r7}
 8009590:	b095      	sub	sp, #84	; 0x54
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b4:	643b      	str	r3, [r7, #64]	; 0x40
 80095b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e6      	bne.n	8009596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3308      	adds	r3, #8
 80095e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e5      	bne.n	80095c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009600:	2b01      	cmp	r3, #1
 8009602:	d118      	bne.n	8009636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	60bb      	str	r3, [r7, #8]
   return(result);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f023 0310 	bic.w	r3, r3, #16
 8009618:	647b      	str	r3, [r7, #68]	; 0x44
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	613b      	str	r3, [r7, #16]
   return(result);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	669a      	str	r2, [r3, #104]	; 0x68
}
 800964a:	bf00      	nop
 800964c:	3754      	adds	r7, #84	; 0x54
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <fmaxf>:
 8009656:	b508      	push	{r3, lr}
 8009658:	ed2d 8b02 	vpush	{d8}
 800965c:	eeb0 8a40 	vmov.f32	s16, s0
 8009660:	eef0 8a60 	vmov.f32	s17, s1
 8009664:	f000 f82e 	bl	80096c4 <__fpclassifyf>
 8009668:	b148      	cbz	r0, 800967e <fmaxf+0x28>
 800966a:	eeb0 0a68 	vmov.f32	s0, s17
 800966e:	f000 f829 	bl	80096c4 <__fpclassifyf>
 8009672:	b130      	cbz	r0, 8009682 <fmaxf+0x2c>
 8009674:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	dc01      	bgt.n	8009682 <fmaxf+0x2c>
 800967e:	eeb0 8a68 	vmov.f32	s16, s17
 8009682:	eeb0 0a48 	vmov.f32	s0, s16
 8009686:	ecbd 8b02 	vpop	{d8}
 800968a:	bd08      	pop	{r3, pc}

0800968c <fminf>:
 800968c:	b508      	push	{r3, lr}
 800968e:	ed2d 8b02 	vpush	{d8}
 8009692:	eeb0 8a40 	vmov.f32	s16, s0
 8009696:	eef0 8a60 	vmov.f32	s17, s1
 800969a:	f000 f813 	bl	80096c4 <__fpclassifyf>
 800969e:	b148      	cbz	r0, 80096b4 <fminf+0x28>
 80096a0:	eeb0 0a68 	vmov.f32	s0, s17
 80096a4:	f000 f80e 	bl	80096c4 <__fpclassifyf>
 80096a8:	b130      	cbz	r0, 80096b8 <fminf+0x2c>
 80096aa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	d401      	bmi.n	80096b8 <fminf+0x2c>
 80096b4:	eeb0 8a68 	vmov.f32	s16, s17
 80096b8:	eeb0 0a48 	vmov.f32	s0, s16
 80096bc:	ecbd 8b02 	vpop	{d8}
 80096c0:	bd08      	pop	{r3, pc}
	...

080096c4 <__fpclassifyf>:
 80096c4:	ee10 3a10 	vmov	r3, s0
 80096c8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80096cc:	d00d      	beq.n	80096ea <__fpclassifyf+0x26>
 80096ce:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80096d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80096d6:	d30a      	bcc.n	80096ee <__fpclassifyf+0x2a>
 80096d8:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <__fpclassifyf+0x34>)
 80096da:	1e42      	subs	r2, r0, #1
 80096dc:	429a      	cmp	r2, r3
 80096de:	d908      	bls.n	80096f2 <__fpclassifyf+0x2e>
 80096e0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80096e4:	4258      	negs	r0, r3
 80096e6:	4158      	adcs	r0, r3
 80096e8:	4770      	bx	lr
 80096ea:	2002      	movs	r0, #2
 80096ec:	4770      	bx	lr
 80096ee:	2004      	movs	r0, #4
 80096f0:	4770      	bx	lr
 80096f2:	2003      	movs	r0, #3
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	007ffffe 	.word	0x007ffffe

080096fc <__errno>:
 80096fc:	4b01      	ldr	r3, [pc, #4]	; (8009704 <__errno+0x8>)
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000014 	.word	0x20000014

08009708 <__libc_init_array>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4d0d      	ldr	r5, [pc, #52]	; (8009740 <__libc_init_array+0x38>)
 800970c:	4c0d      	ldr	r4, [pc, #52]	; (8009744 <__libc_init_array+0x3c>)
 800970e:	1b64      	subs	r4, r4, r5
 8009710:	10a4      	asrs	r4, r4, #2
 8009712:	2600      	movs	r6, #0
 8009714:	42a6      	cmp	r6, r4
 8009716:	d109      	bne.n	800972c <__libc_init_array+0x24>
 8009718:	4d0b      	ldr	r5, [pc, #44]	; (8009748 <__libc_init_array+0x40>)
 800971a:	4c0c      	ldr	r4, [pc, #48]	; (800974c <__libc_init_array+0x44>)
 800971c:	f000 ffbc 	bl	800a698 <_init>
 8009720:	1b64      	subs	r4, r4, r5
 8009722:	10a4      	asrs	r4, r4, #2
 8009724:	2600      	movs	r6, #0
 8009726:	42a6      	cmp	r6, r4
 8009728:	d105      	bne.n	8009736 <__libc_init_array+0x2e>
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009730:	4798      	blx	r3
 8009732:	3601      	adds	r6, #1
 8009734:	e7ee      	b.n	8009714 <__libc_init_array+0xc>
 8009736:	f855 3b04 	ldr.w	r3, [r5], #4
 800973a:	4798      	blx	r3
 800973c:	3601      	adds	r6, #1
 800973e:	e7f2      	b.n	8009726 <__libc_init_array+0x1e>
 8009740:	0800a830 	.word	0x0800a830
 8009744:	0800a830 	.word	0x0800a830
 8009748:	0800a830 	.word	0x0800a830
 800974c:	0800a838 	.word	0x0800a838

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <iprintf>:
 800977c:	b40f      	push	{r0, r1, r2, r3}
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <iprintf+0x2c>)
 8009780:	b513      	push	{r0, r1, r4, lr}
 8009782:	681c      	ldr	r4, [r3, #0]
 8009784:	b124      	cbz	r4, 8009790 <iprintf+0x14>
 8009786:	69a3      	ldr	r3, [r4, #24]
 8009788:	b913      	cbnz	r3, 8009790 <iprintf+0x14>
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f866 	bl	800985c <__sinit>
 8009790:	ab05      	add	r3, sp, #20
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	68a1      	ldr	r1, [r4, #8]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	4620      	mov	r0, r4
 800979a:	f000 f9bd 	bl	8009b18 <_vfiprintf_r>
 800979e:	b002      	add	sp, #8
 80097a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a4:	b004      	add	sp, #16
 80097a6:	4770      	bx	lr
 80097a8:	20000014 	.word	0x20000014

080097ac <std>:
 80097ac:	2300      	movs	r3, #0
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	e9c0 3300 	strd	r3, r3, [r0]
 80097b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ba:	6083      	str	r3, [r0, #8]
 80097bc:	8181      	strh	r1, [r0, #12]
 80097be:	6643      	str	r3, [r0, #100]	; 0x64
 80097c0:	81c2      	strh	r2, [r0, #14]
 80097c2:	6183      	str	r3, [r0, #24]
 80097c4:	4619      	mov	r1, r3
 80097c6:	2208      	movs	r2, #8
 80097c8:	305c      	adds	r0, #92	; 0x5c
 80097ca:	f7ff ffcf 	bl	800976c <memset>
 80097ce:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <std+0x38>)
 80097d0:	6263      	str	r3, [r4, #36]	; 0x24
 80097d2:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <std+0x3c>)
 80097d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <std+0x40>)
 80097d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <std+0x44>)
 80097dc:	6224      	str	r4, [r4, #32]
 80097de:	6323      	str	r3, [r4, #48]	; 0x30
 80097e0:	bd10      	pop	{r4, pc}
 80097e2:	bf00      	nop
 80097e4:	0800a0c1 	.word	0x0800a0c1
 80097e8:	0800a0e3 	.word	0x0800a0e3
 80097ec:	0800a11b 	.word	0x0800a11b
 80097f0:	0800a13f 	.word	0x0800a13f

080097f4 <_cleanup_r>:
 80097f4:	4901      	ldr	r1, [pc, #4]	; (80097fc <_cleanup_r+0x8>)
 80097f6:	f000 b8af 	b.w	8009958 <_fwalk_reent>
 80097fa:	bf00      	nop
 80097fc:	0800a419 	.word	0x0800a419

08009800 <__sfmoreglue>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	2268      	movs	r2, #104	; 0x68
 8009804:	1e4d      	subs	r5, r1, #1
 8009806:	4355      	muls	r5, r2
 8009808:	460e      	mov	r6, r1
 800980a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800980e:	f000 f8e5 	bl	80099dc <_malloc_r>
 8009812:	4604      	mov	r4, r0
 8009814:	b140      	cbz	r0, 8009828 <__sfmoreglue+0x28>
 8009816:	2100      	movs	r1, #0
 8009818:	e9c0 1600 	strd	r1, r6, [r0]
 800981c:	300c      	adds	r0, #12
 800981e:	60a0      	str	r0, [r4, #8]
 8009820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009824:	f7ff ffa2 	bl	800976c <memset>
 8009828:	4620      	mov	r0, r4
 800982a:	bd70      	pop	{r4, r5, r6, pc}

0800982c <__sfp_lock_acquire>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sfp_lock_acquire+0x8>)
 800982e:	f000 b8b3 	b.w	8009998 <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	20000dd9 	.word	0x20000dd9

08009838 <__sfp_lock_release>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sfp_lock_release+0x8>)
 800983a:	f000 b8ae 	b.w	800999a <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	20000dd9 	.word	0x20000dd9

08009844 <__sinit_lock_acquire>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__sinit_lock_acquire+0x8>)
 8009846:	f000 b8a7 	b.w	8009998 <__retarget_lock_acquire_recursive>
 800984a:	bf00      	nop
 800984c:	20000dda 	.word	0x20000dda

08009850 <__sinit_lock_release>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__sinit_lock_release+0x8>)
 8009852:	f000 b8a2 	b.w	800999a <__retarget_lock_release_recursive>
 8009856:	bf00      	nop
 8009858:	20000dda 	.word	0x20000dda

0800985c <__sinit>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4604      	mov	r4, r0
 8009860:	f7ff fff0 	bl	8009844 <__sinit_lock_acquire>
 8009864:	69a3      	ldr	r3, [r4, #24]
 8009866:	b11b      	cbz	r3, 8009870 <__sinit+0x14>
 8009868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986c:	f7ff bff0 	b.w	8009850 <__sinit_lock_release>
 8009870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009874:	6523      	str	r3, [r4, #80]	; 0x50
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <__sinit+0x68>)
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <__sinit+0x6c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	62a2      	str	r2, [r4, #40]	; 0x28
 800987e:	42a3      	cmp	r3, r4
 8009880:	bf04      	itt	eq
 8009882:	2301      	moveq	r3, #1
 8009884:	61a3      	streq	r3, [r4, #24]
 8009886:	4620      	mov	r0, r4
 8009888:	f000 f820 	bl	80098cc <__sfp>
 800988c:	6060      	str	r0, [r4, #4]
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f81c 	bl	80098cc <__sfp>
 8009894:	60a0      	str	r0, [r4, #8]
 8009896:	4620      	mov	r0, r4
 8009898:	f000 f818 	bl	80098cc <__sfp>
 800989c:	2200      	movs	r2, #0
 800989e:	60e0      	str	r0, [r4, #12]
 80098a0:	2104      	movs	r1, #4
 80098a2:	6860      	ldr	r0, [r4, #4]
 80098a4:	f7ff ff82 	bl	80097ac <std>
 80098a8:	68a0      	ldr	r0, [r4, #8]
 80098aa:	2201      	movs	r2, #1
 80098ac:	2109      	movs	r1, #9
 80098ae:	f7ff ff7d 	bl	80097ac <std>
 80098b2:	68e0      	ldr	r0, [r4, #12]
 80098b4:	2202      	movs	r2, #2
 80098b6:	2112      	movs	r1, #18
 80098b8:	f7ff ff78 	bl	80097ac <std>
 80098bc:	2301      	movs	r3, #1
 80098be:	61a3      	str	r3, [r4, #24]
 80098c0:	e7d2      	b.n	8009868 <__sinit+0xc>
 80098c2:	bf00      	nop
 80098c4:	0800a798 	.word	0x0800a798
 80098c8:	080097f5 	.word	0x080097f5

080098cc <__sfp>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	4607      	mov	r7, r0
 80098d0:	f7ff ffac 	bl	800982c <__sfp_lock_acquire>
 80098d4:	4b1e      	ldr	r3, [pc, #120]	; (8009950 <__sfp+0x84>)
 80098d6:	681e      	ldr	r6, [r3, #0]
 80098d8:	69b3      	ldr	r3, [r6, #24]
 80098da:	b913      	cbnz	r3, 80098e2 <__sfp+0x16>
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ffbd 	bl	800985c <__sinit>
 80098e2:	3648      	adds	r6, #72	; 0x48
 80098e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	d503      	bpl.n	80098f4 <__sfp+0x28>
 80098ec:	6833      	ldr	r3, [r6, #0]
 80098ee:	b30b      	cbz	r3, 8009934 <__sfp+0x68>
 80098f0:	6836      	ldr	r6, [r6, #0]
 80098f2:	e7f7      	b.n	80098e4 <__sfp+0x18>
 80098f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098f8:	b9d5      	cbnz	r5, 8009930 <__sfp+0x64>
 80098fa:	4b16      	ldr	r3, [pc, #88]	; (8009954 <__sfp+0x88>)
 80098fc:	60e3      	str	r3, [r4, #12]
 80098fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009902:	6665      	str	r5, [r4, #100]	; 0x64
 8009904:	f000 f847 	bl	8009996 <__retarget_lock_init_recursive>
 8009908:	f7ff ff96 	bl	8009838 <__sfp_lock_release>
 800990c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	61a5      	str	r5, [r4, #24]
 8009918:	2208      	movs	r2, #8
 800991a:	4629      	mov	r1, r5
 800991c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009920:	f7ff ff24 	bl	800976c <memset>
 8009924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800992c:	4620      	mov	r0, r4
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	3468      	adds	r4, #104	; 0x68
 8009932:	e7d9      	b.n	80098e8 <__sfp+0x1c>
 8009934:	2104      	movs	r1, #4
 8009936:	4638      	mov	r0, r7
 8009938:	f7ff ff62 	bl	8009800 <__sfmoreglue>
 800993c:	4604      	mov	r4, r0
 800993e:	6030      	str	r0, [r6, #0]
 8009940:	2800      	cmp	r0, #0
 8009942:	d1d5      	bne.n	80098f0 <__sfp+0x24>
 8009944:	f7ff ff78 	bl	8009838 <__sfp_lock_release>
 8009948:	230c      	movs	r3, #12
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	e7ee      	b.n	800992c <__sfp+0x60>
 800994e:	bf00      	nop
 8009950:	0800a798 	.word	0x0800a798
 8009954:	ffff0001 	.word	0xffff0001

08009958 <_fwalk_reent>:
 8009958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800995c:	4606      	mov	r6, r0
 800995e:	4688      	mov	r8, r1
 8009960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009964:	2700      	movs	r7, #0
 8009966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800996a:	f1b9 0901 	subs.w	r9, r9, #1
 800996e:	d505      	bpl.n	800997c <_fwalk_reent+0x24>
 8009970:	6824      	ldr	r4, [r4, #0]
 8009972:	2c00      	cmp	r4, #0
 8009974:	d1f7      	bne.n	8009966 <_fwalk_reent+0xe>
 8009976:	4638      	mov	r0, r7
 8009978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997c:	89ab      	ldrh	r3, [r5, #12]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d907      	bls.n	8009992 <_fwalk_reent+0x3a>
 8009982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009986:	3301      	adds	r3, #1
 8009988:	d003      	beq.n	8009992 <_fwalk_reent+0x3a>
 800998a:	4629      	mov	r1, r5
 800998c:	4630      	mov	r0, r6
 800998e:	47c0      	blx	r8
 8009990:	4307      	orrs	r7, r0
 8009992:	3568      	adds	r5, #104	; 0x68
 8009994:	e7e9      	b.n	800996a <_fwalk_reent+0x12>

08009996 <__retarget_lock_init_recursive>:
 8009996:	4770      	bx	lr

08009998 <__retarget_lock_acquire_recursive>:
 8009998:	4770      	bx	lr

0800999a <__retarget_lock_release_recursive>:
 800999a:	4770      	bx	lr

0800999c <sbrk_aligned>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0e      	ldr	r6, [pc, #56]	; (80099d8 <sbrk_aligned+0x3c>)
 80099a0:	460c      	mov	r4, r1
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	4605      	mov	r5, r0
 80099a6:	b911      	cbnz	r1, 80099ae <sbrk_aligned+0x12>
 80099a8:	f000 fb7a 	bl	800a0a0 <_sbrk_r>
 80099ac:	6030      	str	r0, [r6, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 fb75 	bl	800a0a0 <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d00a      	beq.n	80099d0 <sbrk_aligned+0x34>
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d007      	beq.n	80099d4 <sbrk_aligned+0x38>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 fb6a 	bl	800a0a0 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d101      	bne.n	80099d4 <sbrk_aligned+0x38>
 80099d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	20000de0 	.word	0x20000de0

080099dc <_malloc_r>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	1ccd      	adds	r5, r1, #3
 80099e2:	f025 0503 	bic.w	r5, r5, #3
 80099e6:	3508      	adds	r5, #8
 80099e8:	2d0c      	cmp	r5, #12
 80099ea:	bf38      	it	cc
 80099ec:	250c      	movcc	r5, #12
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	4607      	mov	r7, r0
 80099f2:	db01      	blt.n	80099f8 <_malloc_r+0x1c>
 80099f4:	42a9      	cmp	r1, r5
 80099f6:	d905      	bls.n	8009a04 <_malloc_r+0x28>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	2600      	movs	r6, #0
 80099fe:	4630      	mov	r0, r6
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	4e2e      	ldr	r6, [pc, #184]	; (8009ac0 <_malloc_r+0xe4>)
 8009a06:	f000 fdbb 	bl	800a580 <__malloc_lock>
 8009a0a:	6833      	ldr	r3, [r6, #0]
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	bb34      	cbnz	r4, 8009a5e <_malloc_r+0x82>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ffc2 	bl	800999c <sbrk_aligned>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	d14d      	bne.n	8009aba <_malloc_r+0xde>
 8009a1e:	6834      	ldr	r4, [r6, #0]
 8009a20:	4626      	mov	r6, r4
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d140      	bne.n	8009aa8 <_malloc_r+0xcc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	eb04 0803 	add.w	r8, r4, r3
 8009a30:	f000 fb36 	bl	800a0a0 <_sbrk_r>
 8009a34:	4580      	cmp	r8, r0
 8009a36:	d13a      	bne.n	8009aae <_malloc_r+0xd2>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	3503      	adds	r5, #3
 8009a3c:	1a6d      	subs	r5, r5, r1
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <sbrk_aligned>
 8009a52:	3001      	adds	r0, #1
 8009a54:	d02b      	beq.n	8009aae <_malloc_r+0xd2>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	442b      	add	r3, r5
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	e00e      	b.n	8009a7c <_malloc_r+0xa0>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	1b52      	subs	r2, r2, r5
 8009a62:	d41e      	bmi.n	8009aa2 <_malloc_r+0xc6>
 8009a64:	2a0b      	cmp	r2, #11
 8009a66:	d916      	bls.n	8009a96 <_malloc_r+0xba>
 8009a68:	1961      	adds	r1, r4, r5
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	bf18      	it	ne
 8009a70:	6059      	strne	r1, [r3, #4]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	bf08      	it	eq
 8009a76:	6031      	streq	r1, [r6, #0]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f104 060b 	add.w	r6, r4, #11
 8009a82:	f000 fd83 	bl	800a58c <__malloc_unlock>
 8009a86:	f026 0607 	bic.w	r6, r6, #7
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	1af2      	subs	r2, r6, r3
 8009a8e:	d0b6      	beq.n	80099fe <_malloc_r+0x22>
 8009a90:	1b9b      	subs	r3, r3, r6
 8009a92:	50a3      	str	r3, [r4, r2]
 8009a94:	e7b3      	b.n	80099fe <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	6032      	streq	r2, [r6, #0]
 8009a9e:	605a      	strne	r2, [r3, #4]
 8009aa0:	e7ec      	b.n	8009a7c <_malloc_r+0xa0>
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	6864      	ldr	r4, [r4, #4]
 8009aa6:	e7b2      	b.n	8009a0e <_malloc_r+0x32>
 8009aa8:	4634      	mov	r4, r6
 8009aaa:	6876      	ldr	r6, [r6, #4]
 8009aac:	e7b9      	b.n	8009a22 <_malloc_r+0x46>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f000 fd6a 	bl	800a58c <__malloc_unlock>
 8009ab8:	e7a1      	b.n	80099fe <_malloc_r+0x22>
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa0>
 8009abe:	bf00      	nop
 8009ac0:	20000ddc 	.word	0x20000ddc

08009ac4 <__sfputc_r>:
 8009ac4:	6893      	ldr	r3, [r2, #8]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	b410      	push	{r4}
 8009acc:	6093      	str	r3, [r2, #8]
 8009ace:	da08      	bge.n	8009ae2 <__sfputc_r+0x1e>
 8009ad0:	6994      	ldr	r4, [r2, #24]
 8009ad2:	42a3      	cmp	r3, r4
 8009ad4:	db01      	blt.n	8009ada <__sfputc_r+0x16>
 8009ad6:	290a      	cmp	r1, #10
 8009ad8:	d103      	bne.n	8009ae2 <__sfputc_r+0x1e>
 8009ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ade:	f000 bb33 	b.w	800a148 <__swbuf_r>
 8009ae2:	6813      	ldr	r3, [r2, #0]
 8009ae4:	1c58      	adds	r0, r3, #1
 8009ae6:	6010      	str	r0, [r2, #0]
 8009ae8:	7019      	strb	r1, [r3, #0]
 8009aea:	4608      	mov	r0, r1
 8009aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <__sfputs_r>:
 8009af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	4614      	mov	r4, r2
 8009afa:	18d5      	adds	r5, r2, r3
 8009afc:	42ac      	cmp	r4, r5
 8009afe:	d101      	bne.n	8009b04 <__sfputs_r+0x12>
 8009b00:	2000      	movs	r0, #0
 8009b02:	e007      	b.n	8009b14 <__sfputs_r+0x22>
 8009b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b08:	463a      	mov	r2, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff ffda 	bl	8009ac4 <__sfputc_r>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d1f3      	bne.n	8009afc <__sfputs_r+0xa>
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b18 <_vfiprintf_r>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	460d      	mov	r5, r1
 8009b1e:	b09d      	sub	sp, #116	; 0x74
 8009b20:	4614      	mov	r4, r2
 8009b22:	4698      	mov	r8, r3
 8009b24:	4606      	mov	r6, r0
 8009b26:	b118      	cbz	r0, 8009b30 <_vfiprintf_r+0x18>
 8009b28:	6983      	ldr	r3, [r0, #24]
 8009b2a:	b90b      	cbnz	r3, 8009b30 <_vfiprintf_r+0x18>
 8009b2c:	f7ff fe96 	bl	800985c <__sinit>
 8009b30:	4b89      	ldr	r3, [pc, #548]	; (8009d58 <_vfiprintf_r+0x240>)
 8009b32:	429d      	cmp	r5, r3
 8009b34:	d11b      	bne.n	8009b6e <_vfiprintf_r+0x56>
 8009b36:	6875      	ldr	r5, [r6, #4]
 8009b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	d405      	bmi.n	8009b4a <_vfiprintf_r+0x32>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	059a      	lsls	r2, r3, #22
 8009b42:	d402      	bmi.n	8009b4a <_vfiprintf_r+0x32>
 8009b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b46:	f7ff ff27 	bl	8009998 <__retarget_lock_acquire_recursive>
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	071b      	lsls	r3, r3, #28
 8009b4e:	d501      	bpl.n	8009b54 <_vfiprintf_r+0x3c>
 8009b50:	692b      	ldr	r3, [r5, #16]
 8009b52:	b9eb      	cbnz	r3, 8009b90 <_vfiprintf_r+0x78>
 8009b54:	4629      	mov	r1, r5
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 fb5a 	bl	800a210 <__swsetup_r>
 8009b5c:	b1c0      	cbz	r0, 8009b90 <_vfiprintf_r+0x78>
 8009b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b60:	07dc      	lsls	r4, r3, #31
 8009b62:	d50e      	bpl.n	8009b82 <_vfiprintf_r+0x6a>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b68:	b01d      	add	sp, #116	; 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	4b7b      	ldr	r3, [pc, #492]	; (8009d5c <_vfiprintf_r+0x244>)
 8009b70:	429d      	cmp	r5, r3
 8009b72:	d101      	bne.n	8009b78 <_vfiprintf_r+0x60>
 8009b74:	68b5      	ldr	r5, [r6, #8]
 8009b76:	e7df      	b.n	8009b38 <_vfiprintf_r+0x20>
 8009b78:	4b79      	ldr	r3, [pc, #484]	; (8009d60 <_vfiprintf_r+0x248>)
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	bf08      	it	eq
 8009b7e:	68f5      	ldreq	r5, [r6, #12]
 8009b80:	e7da      	b.n	8009b38 <_vfiprintf_r+0x20>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	0598      	lsls	r0, r3, #22
 8009b86:	d4ed      	bmi.n	8009b64 <_vfiprintf_r+0x4c>
 8009b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8a:	f7ff ff06 	bl	800999a <__retarget_lock_release_recursive>
 8009b8e:	e7e9      	b.n	8009b64 <_vfiprintf_r+0x4c>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	2320      	movs	r3, #32
 8009b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9e:	2330      	movs	r3, #48	; 0x30
 8009ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d64 <_vfiprintf_r+0x24c>
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba8:	f04f 0901 	mov.w	r9, #1
 8009bac:	4623      	mov	r3, r4
 8009bae:	469a      	mov	sl, r3
 8009bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb4:	b10a      	cbz	r2, 8009bba <_vfiprintf_r+0xa2>
 8009bb6:	2a25      	cmp	r2, #37	; 0x25
 8009bb8:	d1f9      	bne.n	8009bae <_vfiprintf_r+0x96>
 8009bba:	ebba 0b04 	subs.w	fp, sl, r4
 8009bbe:	d00b      	beq.n	8009bd8 <_vfiprintf_r+0xc0>
 8009bc0:	465b      	mov	r3, fp
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff93 	bl	8009af2 <__sfputs_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f000 80aa 	beq.w	8009d26 <_vfiprintf_r+0x20e>
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	445a      	add	r2, fp
 8009bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80a2 	beq.w	8009d26 <_vfiprintf_r+0x20e>
 8009be2:	2300      	movs	r3, #0
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bec:	f10a 0a01 	add.w	sl, sl, #1
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9307      	str	r3, [sp, #28]
 8009bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfa:	4654      	mov	r4, sl
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4858      	ldr	r0, [pc, #352]	; (8009d64 <_vfiprintf_r+0x24c>)
 8009c04:	f7f6 fae4 	bl	80001d0 <memchr>
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	b9d8      	cbnz	r0, 8009c44 <_vfiprintf_r+0x12c>
 8009c0c:	06d1      	lsls	r1, r2, #27
 8009c0e:	bf44      	itt	mi
 8009c10:	2320      	movmi	r3, #32
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c16:	0713      	lsls	r3, r2, #28
 8009c18:	bf44      	itt	mi
 8009c1a:	232b      	movmi	r3, #43	; 0x2b
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d015      	beq.n	8009c54 <_vfiprintf_r+0x13c>
 8009c28:	9a07      	ldr	r2, [sp, #28]
 8009c2a:	4654      	mov	r4, sl
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4621      	mov	r1, r4
 8009c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c38:	3b30      	subs	r3, #48	; 0x30
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d94e      	bls.n	8009cdc <_vfiprintf_r+0x1c4>
 8009c3e:	b1b0      	cbz	r0, 8009c6e <_vfiprintf_r+0x156>
 8009c40:	9207      	str	r2, [sp, #28]
 8009c42:	e014      	b.n	8009c6e <_vfiprintf_r+0x156>
 8009c44:	eba0 0308 	sub.w	r3, r0, r8
 8009c48:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	46a2      	mov	sl, r4
 8009c52:	e7d2      	b.n	8009bfa <_vfiprintf_r+0xe2>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d19      	adds	r1, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9103      	str	r1, [sp, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbb      	ittet	lt
 8009c60:	425b      	neglt	r3, r3
 8009c62:	f042 0202 	orrlt.w	r2, r2, #2
 8009c66:	9307      	strge	r3, [sp, #28]
 8009c68:	9307      	strlt	r3, [sp, #28]
 8009c6a:	bfb8      	it	lt
 8009c6c:	9204      	strlt	r2, [sp, #16]
 8009c6e:	7823      	ldrb	r3, [r4, #0]
 8009c70:	2b2e      	cmp	r3, #46	; 0x2e
 8009c72:	d10c      	bne.n	8009c8e <_vfiprintf_r+0x176>
 8009c74:	7863      	ldrb	r3, [r4, #1]
 8009c76:	2b2a      	cmp	r3, #42	; 0x2a
 8009c78:	d135      	bne.n	8009ce6 <_vfiprintf_r+0x1ce>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	1d1a      	adds	r2, r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9203      	str	r2, [sp, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfb8      	it	lt
 8009c86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c8a:	3402      	adds	r4, #2
 8009c8c:	9305      	str	r3, [sp, #20]
 8009c8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d74 <_vfiprintf_r+0x25c>
 8009c92:	7821      	ldrb	r1, [r4, #0]
 8009c94:	2203      	movs	r2, #3
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7f6 fa9a 	bl	80001d0 <memchr>
 8009c9c:	b140      	cbz	r0, 8009cb0 <_vfiprintf_r+0x198>
 8009c9e:	2340      	movs	r3, #64	; 0x40
 8009ca0:	eba0 000a 	sub.w	r0, r0, sl
 8009ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	4303      	orrs	r3, r0
 8009cac:	3401      	adds	r4, #1
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb4:	482c      	ldr	r0, [pc, #176]	; (8009d68 <_vfiprintf_r+0x250>)
 8009cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cba:	2206      	movs	r2, #6
 8009cbc:	f7f6 fa88 	bl	80001d0 <memchr>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d03f      	beq.n	8009d44 <_vfiprintf_r+0x22c>
 8009cc4:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <_vfiprintf_r+0x254>)
 8009cc6:	bb1b      	cbnz	r3, 8009d10 <_vfiprintf_r+0x1f8>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	3307      	adds	r3, #7
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd6:	443b      	add	r3, r7
 8009cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cda:	e767      	b.n	8009bac <_vfiprintf_r+0x94>
 8009cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e7a5      	b.n	8009c32 <_vfiprintf_r+0x11a>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	3401      	adds	r4, #1
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0c0a 	mov.w	ip, #10
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf8:	3a30      	subs	r2, #48	; 0x30
 8009cfa:	2a09      	cmp	r2, #9
 8009cfc:	d903      	bls.n	8009d06 <_vfiprintf_r+0x1ee>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0c5      	beq.n	8009c8e <_vfiprintf_r+0x176>
 8009d02:	9105      	str	r1, [sp, #20]
 8009d04:	e7c3      	b.n	8009c8e <_vfiprintf_r+0x176>
 8009d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e7f0      	b.n	8009cf2 <_vfiprintf_r+0x1da>
 8009d10:	ab03      	add	r3, sp, #12
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <_vfiprintf_r+0x258>)
 8009d18:	a904      	add	r1, sp, #16
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f3af 8000 	nop.w
 8009d20:	4607      	mov	r7, r0
 8009d22:	1c78      	adds	r0, r7, #1
 8009d24:	d1d6      	bne.n	8009cd4 <_vfiprintf_r+0x1bc>
 8009d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d28:	07d9      	lsls	r1, r3, #31
 8009d2a:	d405      	bmi.n	8009d38 <_vfiprintf_r+0x220>
 8009d2c:	89ab      	ldrh	r3, [r5, #12]
 8009d2e:	059a      	lsls	r2, r3, #22
 8009d30:	d402      	bmi.n	8009d38 <_vfiprintf_r+0x220>
 8009d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d34:	f7ff fe31 	bl	800999a <__retarget_lock_release_recursive>
 8009d38:	89ab      	ldrh	r3, [r5, #12]
 8009d3a:	065b      	lsls	r3, r3, #25
 8009d3c:	f53f af12 	bmi.w	8009b64 <_vfiprintf_r+0x4c>
 8009d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d42:	e711      	b.n	8009b68 <_vfiprintf_r+0x50>
 8009d44:	ab03      	add	r3, sp, #12
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <_vfiprintf_r+0x258>)
 8009d4c:	a904      	add	r1, sp, #16
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f880 	bl	8009e54 <_printf_i>
 8009d54:	e7e4      	b.n	8009d20 <_vfiprintf_r+0x208>
 8009d56:	bf00      	nop
 8009d58:	0800a7bc 	.word	0x0800a7bc
 8009d5c:	0800a7dc 	.word	0x0800a7dc
 8009d60:	0800a79c 	.word	0x0800a79c
 8009d64:	0800a7fc 	.word	0x0800a7fc
 8009d68:	0800a806 	.word	0x0800a806
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	08009af3 	.word	0x08009af3
 8009d74:	0800a802 	.word	0x0800a802

08009d78 <_printf_common>:
 8009d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	4699      	mov	r9, r3
 8009d80:	688a      	ldr	r2, [r1, #8]
 8009d82:	690b      	ldr	r3, [r1, #16]
 8009d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	bfb8      	it	lt
 8009d8c:	4613      	movlt	r3, r2
 8009d8e:	6033      	str	r3, [r6, #0]
 8009d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d94:	4607      	mov	r7, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b10a      	cbz	r2, 8009d9e <_printf_common+0x26>
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	0699      	lsls	r1, r3, #26
 8009da2:	bf42      	ittt	mi
 8009da4:	6833      	ldrmi	r3, [r6, #0]
 8009da6:	3302      	addmi	r3, #2
 8009da8:	6033      	strmi	r3, [r6, #0]
 8009daa:	6825      	ldr	r5, [r4, #0]
 8009dac:	f015 0506 	ands.w	r5, r5, #6
 8009db0:	d106      	bne.n	8009dc0 <_printf_common+0x48>
 8009db2:	f104 0a19 	add.w	sl, r4, #25
 8009db6:	68e3      	ldr	r3, [r4, #12]
 8009db8:	6832      	ldr	r2, [r6, #0]
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dc26      	bgt.n	8009e0e <_printf_common+0x96>
 8009dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dc4:	1e13      	subs	r3, r2, #0
 8009dc6:	6822      	ldr	r2, [r4, #0]
 8009dc8:	bf18      	it	ne
 8009dca:	2301      	movne	r3, #1
 8009dcc:	0692      	lsls	r2, r2, #26
 8009dce:	d42b      	bmi.n	8009e28 <_printf_common+0xb0>
 8009dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	47c0      	blx	r8
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d01e      	beq.n	8009e1c <_printf_common+0xa4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	68e5      	ldr	r5, [r4, #12]
 8009de2:	6832      	ldr	r2, [r6, #0]
 8009de4:	f003 0306 	and.w	r3, r3, #6
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	bf08      	it	eq
 8009dec:	1aad      	subeq	r5, r5, r2
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	6922      	ldr	r2, [r4, #16]
 8009df2:	bf0c      	ite	eq
 8009df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df8:	2500      	movne	r5, #0
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	bfc4      	itt	gt
 8009dfe:	1a9b      	subgt	r3, r3, r2
 8009e00:	18ed      	addgt	r5, r5, r3
 8009e02:	2600      	movs	r6, #0
 8009e04:	341a      	adds	r4, #26
 8009e06:	42b5      	cmp	r5, r6
 8009e08:	d11a      	bne.n	8009e40 <_printf_common+0xc8>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	e008      	b.n	8009e20 <_printf_common+0xa8>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	4649      	mov	r1, r9
 8009e14:	4638      	mov	r0, r7
 8009e16:	47c0      	blx	r8
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d103      	bne.n	8009e24 <_printf_common+0xac>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e24:	3501      	adds	r5, #1
 8009e26:	e7c6      	b.n	8009db6 <_printf_common+0x3e>
 8009e28:	18e1      	adds	r1, r4, r3
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	2030      	movs	r0, #48	; 0x30
 8009e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e32:	4422      	add	r2, r4
 8009e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	e7c7      	b.n	8009dd0 <_printf_common+0x58>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4622      	mov	r2, r4
 8009e44:	4649      	mov	r1, r9
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c0      	blx	r8
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d0e6      	beq.n	8009e1c <_printf_common+0xa4>
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7d9      	b.n	8009e06 <_printf_common+0x8e>
	...

08009e54 <_printf_i>:
 8009e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	7e0f      	ldrb	r7, [r1, #24]
 8009e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e5c:	2f78      	cmp	r7, #120	; 0x78
 8009e5e:	4691      	mov	r9, r2
 8009e60:	4680      	mov	r8, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	469a      	mov	sl, r3
 8009e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e6a:	d807      	bhi.n	8009e7c <_printf_i+0x28>
 8009e6c:	2f62      	cmp	r7, #98	; 0x62
 8009e6e:	d80a      	bhi.n	8009e86 <_printf_i+0x32>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	f000 80d8 	beq.w	800a026 <_printf_i+0x1d2>
 8009e76:	2f58      	cmp	r7, #88	; 0x58
 8009e78:	f000 80a3 	beq.w	8009fc2 <_printf_i+0x16e>
 8009e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e84:	e03a      	b.n	8009efc <_printf_i+0xa8>
 8009e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e8a:	2b15      	cmp	r3, #21
 8009e8c:	d8f6      	bhi.n	8009e7c <_printf_i+0x28>
 8009e8e:	a101      	add	r1, pc, #4	; (adr r1, 8009e94 <_printf_i+0x40>)
 8009e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009e7d 	.word	0x08009e7d
 8009ea0:	08009e7d 	.word	0x08009e7d
 8009ea4:	08009e7d 	.word	0x08009e7d
 8009ea8:	08009e7d 	.word	0x08009e7d
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009e7d 	.word	0x08009e7d
 8009eb4:	08009e7d 	.word	0x08009e7d
 8009eb8:	08009e7d 	.word	0x08009e7d
 8009ebc:	08009e7d 	.word	0x08009e7d
 8009ec0:	0800a00d 	.word	0x0800a00d
 8009ec4:	08009f31 	.word	0x08009f31
 8009ec8:	08009fef 	.word	0x08009fef
 8009ecc:	08009e7d 	.word	0x08009e7d
 8009ed0:	08009e7d 	.word	0x08009e7d
 8009ed4:	0800a02f 	.word	0x0800a02f
 8009ed8:	08009e7d 	.word	0x08009e7d
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009e7d 	.word	0x08009e7d
 8009ee4:	08009e7d 	.word	0x08009e7d
 8009ee8:	08009ff7 	.word	0x08009ff7
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	1d1a      	adds	r2, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	602a      	str	r2, [r5, #0]
 8009ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009efc:	2301      	movs	r3, #1
 8009efe:	e0a3      	b.n	800a048 <_printf_i+0x1f4>
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	6829      	ldr	r1, [r5, #0]
 8009f04:	0606      	lsls	r6, r0, #24
 8009f06:	f101 0304 	add.w	r3, r1, #4
 8009f0a:	d50a      	bpl.n	8009f22 <_printf_i+0xce>
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	da03      	bge.n	8009f1c <_printf_i+0xc8>
 8009f14:	232d      	movs	r3, #45	; 0x2d
 8009f16:	4276      	negs	r6, r6
 8009f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1c:	485e      	ldr	r0, [pc, #376]	; (800a098 <_printf_i+0x244>)
 8009f1e:	230a      	movs	r3, #10
 8009f20:	e019      	b.n	8009f56 <_printf_i+0x102>
 8009f22:	680e      	ldr	r6, [r1, #0]
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f2a:	bf18      	it	ne
 8009f2c:	b236      	sxthne	r6, r6
 8009f2e:	e7ef      	b.n	8009f10 <_printf_i+0xbc>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	6820      	ldr	r0, [r4, #0]
 8009f34:	1d19      	adds	r1, r3, #4
 8009f36:	6029      	str	r1, [r5, #0]
 8009f38:	0601      	lsls	r1, r0, #24
 8009f3a:	d501      	bpl.n	8009f40 <_printf_i+0xec>
 8009f3c:	681e      	ldr	r6, [r3, #0]
 8009f3e:	e002      	b.n	8009f46 <_printf_i+0xf2>
 8009f40:	0646      	lsls	r6, r0, #25
 8009f42:	d5fb      	bpl.n	8009f3c <_printf_i+0xe8>
 8009f44:	881e      	ldrh	r6, [r3, #0]
 8009f46:	4854      	ldr	r0, [pc, #336]	; (800a098 <_printf_i+0x244>)
 8009f48:	2f6f      	cmp	r7, #111	; 0x6f
 8009f4a:	bf0c      	ite	eq
 8009f4c:	2308      	moveq	r3, #8
 8009f4e:	230a      	movne	r3, #10
 8009f50:	2100      	movs	r1, #0
 8009f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f56:	6865      	ldr	r5, [r4, #4]
 8009f58:	60a5      	str	r5, [r4, #8]
 8009f5a:	2d00      	cmp	r5, #0
 8009f5c:	bfa2      	ittt	ge
 8009f5e:	6821      	ldrge	r1, [r4, #0]
 8009f60:	f021 0104 	bicge.w	r1, r1, #4
 8009f64:	6021      	strge	r1, [r4, #0]
 8009f66:	b90e      	cbnz	r6, 8009f6c <_printf_i+0x118>
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	d04d      	beq.n	800a008 <_printf_i+0x1b4>
 8009f6c:	4615      	mov	r5, r2
 8009f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f72:	fb03 6711 	mls	r7, r3, r1, r6
 8009f76:	5dc7      	ldrb	r7, [r0, r7]
 8009f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f7c:	4637      	mov	r7, r6
 8009f7e:	42bb      	cmp	r3, r7
 8009f80:	460e      	mov	r6, r1
 8009f82:	d9f4      	bls.n	8009f6e <_printf_i+0x11a>
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d10b      	bne.n	8009fa0 <_printf_i+0x14c>
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	07de      	lsls	r6, r3, #31
 8009f8c:	d508      	bpl.n	8009fa0 <_printf_i+0x14c>
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6861      	ldr	r1, [r4, #4]
 8009f92:	4299      	cmp	r1, r3
 8009f94:	bfde      	ittt	le
 8009f96:	2330      	movle	r3, #48	; 0x30
 8009f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009fa0:	1b52      	subs	r2, r2, r5
 8009fa2:	6122      	str	r2, [r4, #16]
 8009fa4:	f8cd a000 	str.w	sl, [sp]
 8009fa8:	464b      	mov	r3, r9
 8009faa:	aa03      	add	r2, sp, #12
 8009fac:	4621      	mov	r1, r4
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fee2 	bl	8009d78 <_printf_common>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d14c      	bne.n	800a052 <_printf_i+0x1fe>
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fbc:	b004      	add	sp, #16
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	4835      	ldr	r0, [pc, #212]	; (800a098 <_printf_i+0x244>)
 8009fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fd0:	6029      	str	r1, [r5, #0]
 8009fd2:	061d      	lsls	r5, r3, #24
 8009fd4:	d514      	bpl.n	800a000 <_printf_i+0x1ac>
 8009fd6:	07df      	lsls	r7, r3, #31
 8009fd8:	bf44      	itt	mi
 8009fda:	f043 0320 	orrmi.w	r3, r3, #32
 8009fde:	6023      	strmi	r3, [r4, #0]
 8009fe0:	b91e      	cbnz	r6, 8009fea <_printf_i+0x196>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f023 0320 	bic.w	r3, r3, #32
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	2310      	movs	r3, #16
 8009fec:	e7b0      	b.n	8009f50 <_printf_i+0xfc>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	f043 0320 	orr.w	r3, r3, #32
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	2378      	movs	r3, #120	; 0x78
 8009ff8:	4828      	ldr	r0, [pc, #160]	; (800a09c <_printf_i+0x248>)
 8009ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ffe:	e7e3      	b.n	8009fc8 <_printf_i+0x174>
 800a000:	0659      	lsls	r1, r3, #25
 800a002:	bf48      	it	mi
 800a004:	b2b6      	uxthmi	r6, r6
 800a006:	e7e6      	b.n	8009fd6 <_printf_i+0x182>
 800a008:	4615      	mov	r5, r2
 800a00a:	e7bb      	b.n	8009f84 <_printf_i+0x130>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	6826      	ldr	r6, [r4, #0]
 800a010:	6961      	ldr	r1, [r4, #20]
 800a012:	1d18      	adds	r0, r3, #4
 800a014:	6028      	str	r0, [r5, #0]
 800a016:	0635      	lsls	r5, r6, #24
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	d501      	bpl.n	800a020 <_printf_i+0x1cc>
 800a01c:	6019      	str	r1, [r3, #0]
 800a01e:	e002      	b.n	800a026 <_printf_i+0x1d2>
 800a020:	0670      	lsls	r0, r6, #25
 800a022:	d5fb      	bpl.n	800a01c <_printf_i+0x1c8>
 800a024:	8019      	strh	r1, [r3, #0]
 800a026:	2300      	movs	r3, #0
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	4615      	mov	r5, r2
 800a02c:	e7ba      	b.n	8009fa4 <_printf_i+0x150>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	1d1a      	adds	r2, r3, #4
 800a032:	602a      	str	r2, [r5, #0]
 800a034:	681d      	ldr	r5, [r3, #0]
 800a036:	6862      	ldr	r2, [r4, #4]
 800a038:	2100      	movs	r1, #0
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7f6 f8c8 	bl	80001d0 <memchr>
 800a040:	b108      	cbz	r0, 800a046 <_printf_i+0x1f2>
 800a042:	1b40      	subs	r0, r0, r5
 800a044:	6060      	str	r0, [r4, #4]
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	2300      	movs	r3, #0
 800a04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a050:	e7a8      	b.n	8009fa4 <_printf_i+0x150>
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	462a      	mov	r2, r5
 800a056:	4649      	mov	r1, r9
 800a058:	4640      	mov	r0, r8
 800a05a:	47d0      	blx	sl
 800a05c:	3001      	adds	r0, #1
 800a05e:	d0ab      	beq.n	8009fb8 <_printf_i+0x164>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	079b      	lsls	r3, r3, #30
 800a064:	d413      	bmi.n	800a08e <_printf_i+0x23a>
 800a066:	68e0      	ldr	r0, [r4, #12]
 800a068:	9b03      	ldr	r3, [sp, #12]
 800a06a:	4298      	cmp	r0, r3
 800a06c:	bfb8      	it	lt
 800a06e:	4618      	movlt	r0, r3
 800a070:	e7a4      	b.n	8009fbc <_printf_i+0x168>
 800a072:	2301      	movs	r3, #1
 800a074:	4632      	mov	r2, r6
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	47d0      	blx	sl
 800a07c:	3001      	adds	r0, #1
 800a07e:	d09b      	beq.n	8009fb8 <_printf_i+0x164>
 800a080:	3501      	adds	r5, #1
 800a082:	68e3      	ldr	r3, [r4, #12]
 800a084:	9903      	ldr	r1, [sp, #12]
 800a086:	1a5b      	subs	r3, r3, r1
 800a088:	42ab      	cmp	r3, r5
 800a08a:	dcf2      	bgt.n	800a072 <_printf_i+0x21e>
 800a08c:	e7eb      	b.n	800a066 <_printf_i+0x212>
 800a08e:	2500      	movs	r5, #0
 800a090:	f104 0619 	add.w	r6, r4, #25
 800a094:	e7f5      	b.n	800a082 <_printf_i+0x22e>
 800a096:	bf00      	nop
 800a098:	0800a80d 	.word	0x0800a80d
 800a09c:	0800a81e 	.word	0x0800a81e

0800a0a0 <_sbrk_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	; (800a0bc <_sbrk_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f9 ff64 	bl	8003f78 <_sbrk>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_sbrk_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_sbrk_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000de4 	.word	0x20000de4

0800a0c0 <__sread>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c8:	f000 fab2 	bl	800a630 <_read_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	bfab      	itete	ge
 800a0d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d4:	181b      	addge	r3, r3, r0
 800a0d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0da:	bfac      	ite	ge
 800a0dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0de:	81a3      	strhlt	r3, [r4, #12]
 800a0e0:	bd10      	pop	{r4, pc}

0800a0e2 <__swrite>:
 800a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e6:	461f      	mov	r7, r3
 800a0e8:	898b      	ldrh	r3, [r1, #12]
 800a0ea:	05db      	lsls	r3, r3, #23
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	d505      	bpl.n	800a100 <__swrite+0x1e>
 800a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f000 f9c8 	bl	800a490 <_lseek_r>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a10a:	81a3      	strh	r3, [r4, #12]
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	4628      	mov	r0, r5
 800a112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a116:	f000 b869 	b.w	800a1ec <_write_r>

0800a11a <__sseek>:
 800a11a:	b510      	push	{r4, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a122:	f000 f9b5 	bl	800a490 <_lseek_r>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	bf15      	itete	ne
 800a12c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a12e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a136:	81a3      	strheq	r3, [r4, #12]
 800a138:	bf18      	it	ne
 800a13a:	81a3      	strhne	r3, [r4, #12]
 800a13c:	bd10      	pop	{r4, pc}

0800a13e <__sclose>:
 800a13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a142:	f000 b8d3 	b.w	800a2ec <_close_r>
	...

0800a148 <__swbuf_r>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	460e      	mov	r6, r1
 800a14c:	4614      	mov	r4, r2
 800a14e:	4605      	mov	r5, r0
 800a150:	b118      	cbz	r0, 800a15a <__swbuf_r+0x12>
 800a152:	6983      	ldr	r3, [r0, #24]
 800a154:	b90b      	cbnz	r3, 800a15a <__swbuf_r+0x12>
 800a156:	f7ff fb81 	bl	800985c <__sinit>
 800a15a:	4b21      	ldr	r3, [pc, #132]	; (800a1e0 <__swbuf_r+0x98>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	d12b      	bne.n	800a1b8 <__swbuf_r+0x70>
 800a160:	686c      	ldr	r4, [r5, #4]
 800a162:	69a3      	ldr	r3, [r4, #24]
 800a164:	60a3      	str	r3, [r4, #8]
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	071a      	lsls	r2, r3, #28
 800a16a:	d52f      	bpl.n	800a1cc <__swbuf_r+0x84>
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	b36b      	cbz	r3, 800a1cc <__swbuf_r+0x84>
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	6963      	ldr	r3, [r4, #20]
 800a178:	b2f6      	uxtb	r6, r6
 800a17a:	4283      	cmp	r3, r0
 800a17c:	4637      	mov	r7, r6
 800a17e:	dc04      	bgt.n	800a18a <__swbuf_r+0x42>
 800a180:	4621      	mov	r1, r4
 800a182:	4628      	mov	r0, r5
 800a184:	f000 f948 	bl	800a418 <_fflush_r>
 800a188:	bb30      	cbnz	r0, 800a1d8 <__swbuf_r+0x90>
 800a18a:	68a3      	ldr	r3, [r4, #8]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	60a3      	str	r3, [r4, #8]
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	6022      	str	r2, [r4, #0]
 800a196:	701e      	strb	r6, [r3, #0]
 800a198:	6963      	ldr	r3, [r4, #20]
 800a19a:	3001      	adds	r0, #1
 800a19c:	4283      	cmp	r3, r0
 800a19e:	d004      	beq.n	800a1aa <__swbuf_r+0x62>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	07db      	lsls	r3, r3, #31
 800a1a4:	d506      	bpl.n	800a1b4 <__swbuf_r+0x6c>
 800a1a6:	2e0a      	cmp	r6, #10
 800a1a8:	d104      	bne.n	800a1b4 <__swbuf_r+0x6c>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f000 f933 	bl	800a418 <_fflush_r>
 800a1b2:	b988      	cbnz	r0, 800a1d8 <__swbuf_r+0x90>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b8:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <__swbuf_r+0x9c>)
 800a1ba:	429c      	cmp	r4, r3
 800a1bc:	d101      	bne.n	800a1c2 <__swbuf_r+0x7a>
 800a1be:	68ac      	ldr	r4, [r5, #8]
 800a1c0:	e7cf      	b.n	800a162 <__swbuf_r+0x1a>
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <__swbuf_r+0xa0>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	bf08      	it	eq
 800a1c8:	68ec      	ldreq	r4, [r5, #12]
 800a1ca:	e7ca      	b.n	800a162 <__swbuf_r+0x1a>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 f81e 	bl	800a210 <__swsetup_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d0cb      	beq.n	800a170 <__swbuf_r+0x28>
 800a1d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1dc:	e7ea      	b.n	800a1b4 <__swbuf_r+0x6c>
 800a1de:	bf00      	nop
 800a1e0:	0800a7bc 	.word	0x0800a7bc
 800a1e4:	0800a7dc 	.word	0x0800a7dc
 800a1e8:	0800a79c 	.word	0x0800a79c

0800a1ec <_write_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_write_r+0x20>)
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7f9 fe6b 	bl	8003ed6 <_write>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_write_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_write_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20000de4 	.word	0x20000de4

0800a210 <__swsetup_r>:
 800a210:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <__swsetup_r+0xcc>)
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	681d      	ldr	r5, [r3, #0]
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	b125      	cbz	r5, 800a226 <__swsetup_r+0x16>
 800a21c:	69ab      	ldr	r3, [r5, #24]
 800a21e:	b913      	cbnz	r3, 800a226 <__swsetup_r+0x16>
 800a220:	4628      	mov	r0, r5
 800a222:	f7ff fb1b 	bl	800985c <__sinit>
 800a226:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <__swsetup_r+0xd0>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d10f      	bne.n	800a24c <__swsetup_r+0x3c>
 800a22c:	686c      	ldr	r4, [r5, #4]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	d42c      	bmi.n	800a292 <__swsetup_r+0x82>
 800a238:	06dd      	lsls	r5, r3, #27
 800a23a:	d411      	bmi.n	800a260 <__swsetup_r+0x50>
 800a23c:	2309      	movs	r3, #9
 800a23e:	6033      	str	r3, [r6, #0]
 800a240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a24a:	e03e      	b.n	800a2ca <__swsetup_r+0xba>
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <__swsetup_r+0xd4>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <__swsetup_r+0x46>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7eb      	b.n	800a22e <__swsetup_r+0x1e>
 800a256:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <__swsetup_r+0xd8>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7e6      	b.n	800a22e <__swsetup_r+0x1e>
 800a260:	0758      	lsls	r0, r3, #29
 800a262:	d512      	bpl.n	800a28a <__swsetup_r+0x7a>
 800a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a266:	b141      	cbz	r1, 800a27a <__swsetup_r+0x6a>
 800a268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d002      	beq.n	800a276 <__swsetup_r+0x66>
 800a270:	4630      	mov	r0, r6
 800a272:	f000 f991 	bl	800a598 <_free_r>
 800a276:	2300      	movs	r3, #0
 800a278:	6363      	str	r3, [r4, #52]	; 0x34
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0308 	orr.w	r3, r3, #8
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b94b      	cbnz	r3, 800a2aa <__swsetup_r+0x9a>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a0:	d003      	beq.n	800a2aa <__swsetup_r+0x9a>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 f92b 	bl	800a500 <__smakebuf_r>
 800a2aa:	89a0      	ldrh	r0, [r4, #12]
 800a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b0:	f010 0301 	ands.w	r3, r0, #1
 800a2b4:	d00a      	beq.n	800a2cc <__swsetup_r+0xbc>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60a3      	str	r3, [r4, #8]
 800a2ba:	6963      	ldr	r3, [r4, #20]
 800a2bc:	425b      	negs	r3, r3
 800a2be:	61a3      	str	r3, [r4, #24]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	b943      	cbnz	r3, 800a2d6 <__swsetup_r+0xc6>
 800a2c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c8:	d1ba      	bne.n	800a240 <__swsetup_r+0x30>
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	0781      	lsls	r1, r0, #30
 800a2ce:	bf58      	it	pl
 800a2d0:	6963      	ldrpl	r3, [r4, #20]
 800a2d2:	60a3      	str	r3, [r4, #8]
 800a2d4:	e7f4      	b.n	800a2c0 <__swsetup_r+0xb0>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e7f7      	b.n	800a2ca <__swsetup_r+0xba>
 800a2da:	bf00      	nop
 800a2dc:	20000014 	.word	0x20000014
 800a2e0:	0800a7bc 	.word	0x0800a7bc
 800a2e4:	0800a7dc 	.word	0x0800a7dc
 800a2e8:	0800a79c 	.word	0x0800a79c

0800a2ec <_close_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d06      	ldr	r5, [pc, #24]	; (800a308 <_close_r+0x1c>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f9 fe09 	bl	8003f0e <_close>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_close_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_close_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000de4 	.word	0x20000de4

0800a30c <__sflush_r>:
 800a30c:	898a      	ldrh	r2, [r1, #12]
 800a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	4605      	mov	r5, r0
 800a314:	0710      	lsls	r0, r2, #28
 800a316:	460c      	mov	r4, r1
 800a318:	d458      	bmi.n	800a3cc <__sflush_r+0xc0>
 800a31a:	684b      	ldr	r3, [r1, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dc05      	bgt.n	800a32c <__sflush_r+0x20>
 800a320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	dc02      	bgt.n	800a32c <__sflush_r+0x20>
 800a326:	2000      	movs	r0, #0
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a32e:	2e00      	cmp	r6, #0
 800a330:	d0f9      	beq.n	800a326 <__sflush_r+0x1a>
 800a332:	2300      	movs	r3, #0
 800a334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a338:	682f      	ldr	r7, [r5, #0]
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	d032      	beq.n	800a3a4 <__sflush_r+0x98>
 800a33e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	075a      	lsls	r2, r3, #29
 800a344:	d505      	bpl.n	800a352 <__sflush_r+0x46>
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	1ac0      	subs	r0, r0, r3
 800a34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a34c:	b10b      	cbz	r3, 800a352 <__sflush_r+0x46>
 800a34e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a350:	1ac0      	subs	r0, r0, r3
 800a352:	2300      	movs	r3, #0
 800a354:	4602      	mov	r2, r0
 800a356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a358:	6a21      	ldr	r1, [r4, #32]
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b0      	blx	r6
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	d106      	bne.n	800a372 <__sflush_r+0x66>
 800a364:	6829      	ldr	r1, [r5, #0]
 800a366:	291d      	cmp	r1, #29
 800a368:	d82c      	bhi.n	800a3c4 <__sflush_r+0xb8>
 800a36a:	4a2a      	ldr	r2, [pc, #168]	; (800a414 <__sflush_r+0x108>)
 800a36c:	40ca      	lsrs	r2, r1
 800a36e:	07d6      	lsls	r6, r2, #31
 800a370:	d528      	bpl.n	800a3c4 <__sflush_r+0xb8>
 800a372:	2200      	movs	r2, #0
 800a374:	6062      	str	r2, [r4, #4]
 800a376:	04d9      	lsls	r1, r3, #19
 800a378:	6922      	ldr	r2, [r4, #16]
 800a37a:	6022      	str	r2, [r4, #0]
 800a37c:	d504      	bpl.n	800a388 <__sflush_r+0x7c>
 800a37e:	1c42      	adds	r2, r0, #1
 800a380:	d101      	bne.n	800a386 <__sflush_r+0x7a>
 800a382:	682b      	ldr	r3, [r5, #0]
 800a384:	b903      	cbnz	r3, 800a388 <__sflush_r+0x7c>
 800a386:	6560      	str	r0, [r4, #84]	; 0x54
 800a388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a38a:	602f      	str	r7, [r5, #0]
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d0ca      	beq.n	800a326 <__sflush_r+0x1a>
 800a390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a394:	4299      	cmp	r1, r3
 800a396:	d002      	beq.n	800a39e <__sflush_r+0x92>
 800a398:	4628      	mov	r0, r5
 800a39a:	f000 f8fd 	bl	800a598 <_free_r>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3a2:	e7c1      	b.n	800a328 <__sflush_r+0x1c>
 800a3a4:	6a21      	ldr	r1, [r4, #32]
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b0      	blx	r6
 800a3ac:	1c41      	adds	r1, r0, #1
 800a3ae:	d1c7      	bne.n	800a340 <__sflush_r+0x34>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0c4      	beq.n	800a340 <__sflush_r+0x34>
 800a3b6:	2b1d      	cmp	r3, #29
 800a3b8:	d001      	beq.n	800a3be <__sflush_r+0xb2>
 800a3ba:	2b16      	cmp	r3, #22
 800a3bc:	d101      	bne.n	800a3c2 <__sflush_r+0xb6>
 800a3be:	602f      	str	r7, [r5, #0]
 800a3c0:	e7b1      	b.n	800a326 <__sflush_r+0x1a>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	e7ad      	b.n	800a328 <__sflush_r+0x1c>
 800a3cc:	690f      	ldr	r7, [r1, #16]
 800a3ce:	2f00      	cmp	r7, #0
 800a3d0:	d0a9      	beq.n	800a326 <__sflush_r+0x1a>
 800a3d2:	0793      	lsls	r3, r2, #30
 800a3d4:	680e      	ldr	r6, [r1, #0]
 800a3d6:	bf08      	it	eq
 800a3d8:	694b      	ldreq	r3, [r1, #20]
 800a3da:	600f      	str	r7, [r1, #0]
 800a3dc:	bf18      	it	ne
 800a3de:	2300      	movne	r3, #0
 800a3e0:	eba6 0807 	sub.w	r8, r6, r7
 800a3e4:	608b      	str	r3, [r1, #8]
 800a3e6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ea:	dd9c      	ble.n	800a326 <__sflush_r+0x1a>
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3f0:	4643      	mov	r3, r8
 800a3f2:	463a      	mov	r2, r7
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b0      	blx	r6
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	dc06      	bgt.n	800a40a <__sflush_r+0xfe>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a408:	e78e      	b.n	800a328 <__sflush_r+0x1c>
 800a40a:	4407      	add	r7, r0
 800a40c:	eba8 0800 	sub.w	r8, r8, r0
 800a410:	e7e9      	b.n	800a3e6 <__sflush_r+0xda>
 800a412:	bf00      	nop
 800a414:	20400001 	.word	0x20400001

0800a418 <_fflush_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	690b      	ldr	r3, [r1, #16]
 800a41c:	4605      	mov	r5, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	b913      	cbnz	r3, 800a428 <_fflush_r+0x10>
 800a422:	2500      	movs	r5, #0
 800a424:	4628      	mov	r0, r5
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	b118      	cbz	r0, 800a432 <_fflush_r+0x1a>
 800a42a:	6983      	ldr	r3, [r0, #24]
 800a42c:	b90b      	cbnz	r3, 800a432 <_fflush_r+0x1a>
 800a42e:	f7ff fa15 	bl	800985c <__sinit>
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <_fflush_r+0x6c>)
 800a434:	429c      	cmp	r4, r3
 800a436:	d11b      	bne.n	800a470 <_fflush_r+0x58>
 800a438:	686c      	ldr	r4, [r5, #4]
 800a43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0ef      	beq.n	800a422 <_fflush_r+0xa>
 800a442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a444:	07d0      	lsls	r0, r2, #31
 800a446:	d404      	bmi.n	800a452 <_fflush_r+0x3a>
 800a448:	0599      	lsls	r1, r3, #22
 800a44a:	d402      	bmi.n	800a452 <_fflush_r+0x3a>
 800a44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44e:	f7ff faa3 	bl	8009998 <__retarget_lock_acquire_recursive>
 800a452:	4628      	mov	r0, r5
 800a454:	4621      	mov	r1, r4
 800a456:	f7ff ff59 	bl	800a30c <__sflush_r>
 800a45a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a45c:	07da      	lsls	r2, r3, #31
 800a45e:	4605      	mov	r5, r0
 800a460:	d4e0      	bmi.n	800a424 <_fflush_r+0xc>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	059b      	lsls	r3, r3, #22
 800a466:	d4dd      	bmi.n	800a424 <_fflush_r+0xc>
 800a468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a46a:	f7ff fa96 	bl	800999a <__retarget_lock_release_recursive>
 800a46e:	e7d9      	b.n	800a424 <_fflush_r+0xc>
 800a470:	4b05      	ldr	r3, [pc, #20]	; (800a488 <_fflush_r+0x70>)
 800a472:	429c      	cmp	r4, r3
 800a474:	d101      	bne.n	800a47a <_fflush_r+0x62>
 800a476:	68ac      	ldr	r4, [r5, #8]
 800a478:	e7df      	b.n	800a43a <_fflush_r+0x22>
 800a47a:	4b04      	ldr	r3, [pc, #16]	; (800a48c <_fflush_r+0x74>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	bf08      	it	eq
 800a480:	68ec      	ldreq	r4, [r5, #12]
 800a482:	e7da      	b.n	800a43a <_fflush_r+0x22>
 800a484:	0800a7bc 	.word	0x0800a7bc
 800a488:	0800a7dc 	.word	0x0800a7dc
 800a48c:	0800a79c 	.word	0x0800a79c

0800a490 <_lseek_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_lseek_r+0x20>)
 800a494:	4604      	mov	r4, r0
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	2200      	movs	r2, #0
 800a49c:	602a      	str	r2, [r5, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f7f9 fd5c 	bl	8003f5c <_lseek>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_lseek_r+0x1e>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_lseek_r+0x1e>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20000de4 	.word	0x20000de4

0800a4b4 <__swhatbuf_r>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	460e      	mov	r6, r1
 800a4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	b096      	sub	sp, #88	; 0x58
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	da08      	bge.n	800a4d8 <__swhatbuf_r+0x24>
 800a4c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	061a      	lsls	r2, r3, #24
 800a4d0:	d410      	bmi.n	800a4f4 <__swhatbuf_r+0x40>
 800a4d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4d6:	e00e      	b.n	800a4f6 <__swhatbuf_r+0x42>
 800a4d8:	466a      	mov	r2, sp
 800a4da:	f000 f8bb 	bl	800a654 <_fstat_r>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	dbf1      	blt.n	800a4c6 <__swhatbuf_r+0x12>
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4ec:	425a      	negs	r2, r3
 800a4ee:	415a      	adcs	r2, r3
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	e7ee      	b.n	800a4d2 <__swhatbuf_r+0x1e>
 800a4f4:	2340      	movs	r3, #64	; 0x40
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	b016      	add	sp, #88	; 0x58
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a500 <__smakebuf_r>:
 800a500:	898b      	ldrh	r3, [r1, #12]
 800a502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a504:	079d      	lsls	r5, r3, #30
 800a506:	4606      	mov	r6, r0
 800a508:	460c      	mov	r4, r1
 800a50a:	d507      	bpl.n	800a51c <__smakebuf_r+0x1c>
 800a50c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	2301      	movs	r3, #1
 800a516:	6163      	str	r3, [r4, #20]
 800a518:	b002      	add	sp, #8
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
 800a51c:	ab01      	add	r3, sp, #4
 800a51e:	466a      	mov	r2, sp
 800a520:	f7ff ffc8 	bl	800a4b4 <__swhatbuf_r>
 800a524:	9900      	ldr	r1, [sp, #0]
 800a526:	4605      	mov	r5, r0
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fa57 	bl	80099dc <_malloc_r>
 800a52e:	b948      	cbnz	r0, 800a544 <__smakebuf_r+0x44>
 800a530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a534:	059a      	lsls	r2, r3, #22
 800a536:	d4ef      	bmi.n	800a518 <__smakebuf_r+0x18>
 800a538:	f023 0303 	bic.w	r3, r3, #3
 800a53c:	f043 0302 	orr.w	r3, r3, #2
 800a540:	81a3      	strh	r3, [r4, #12]
 800a542:	e7e3      	b.n	800a50c <__smakebuf_r+0xc>
 800a544:	4b0d      	ldr	r3, [pc, #52]	; (800a57c <__smakebuf_r+0x7c>)
 800a546:	62b3      	str	r3, [r6, #40]	; 0x28
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	6020      	str	r0, [r4, #0]
 800a54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a550:	81a3      	strh	r3, [r4, #12]
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	6163      	str	r3, [r4, #20]
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	6120      	str	r0, [r4, #16]
 800a55a:	b15b      	cbz	r3, 800a574 <__smakebuf_r+0x74>
 800a55c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a560:	4630      	mov	r0, r6
 800a562:	f000 f889 	bl	800a678 <_isatty_r>
 800a566:	b128      	cbz	r0, 800a574 <__smakebuf_r+0x74>
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	f023 0303 	bic.w	r3, r3, #3
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	89a0      	ldrh	r0, [r4, #12]
 800a576:	4305      	orrs	r5, r0
 800a578:	81a5      	strh	r5, [r4, #12]
 800a57a:	e7cd      	b.n	800a518 <__smakebuf_r+0x18>
 800a57c:	080097f5 	.word	0x080097f5

0800a580 <__malloc_lock>:
 800a580:	4801      	ldr	r0, [pc, #4]	; (800a588 <__malloc_lock+0x8>)
 800a582:	f7ff ba09 	b.w	8009998 <__retarget_lock_acquire_recursive>
 800a586:	bf00      	nop
 800a588:	20000dd8 	.word	0x20000dd8

0800a58c <__malloc_unlock>:
 800a58c:	4801      	ldr	r0, [pc, #4]	; (800a594 <__malloc_unlock+0x8>)
 800a58e:	f7ff ba04 	b.w	800999a <__retarget_lock_release_recursive>
 800a592:	bf00      	nop
 800a594:	20000dd8 	.word	0x20000dd8

0800a598 <_free_r>:
 800a598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a59a:	2900      	cmp	r1, #0
 800a59c:	d044      	beq.n	800a628 <_free_r+0x90>
 800a59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a2:	9001      	str	r0, [sp, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5aa:	bfb8      	it	lt
 800a5ac:	18e4      	addlt	r4, r4, r3
 800a5ae:	f7ff ffe7 	bl	800a580 <__malloc_lock>
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	; (800a62c <_free_r+0x94>)
 800a5b4:	9801      	ldr	r0, [sp, #4]
 800a5b6:	6813      	ldr	r3, [r2, #0]
 800a5b8:	b933      	cbnz	r3, 800a5c8 <_free_r+0x30>
 800a5ba:	6063      	str	r3, [r4, #4]
 800a5bc:	6014      	str	r4, [r2, #0]
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5c4:	f7ff bfe2 	b.w	800a58c <__malloc_unlock>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d908      	bls.n	800a5de <_free_r+0x46>
 800a5cc:	6825      	ldr	r5, [r4, #0]
 800a5ce:	1961      	adds	r1, r4, r5
 800a5d0:	428b      	cmp	r3, r1
 800a5d2:	bf01      	itttt	eq
 800a5d4:	6819      	ldreq	r1, [r3, #0]
 800a5d6:	685b      	ldreq	r3, [r3, #4]
 800a5d8:	1949      	addeq	r1, r1, r5
 800a5da:	6021      	streq	r1, [r4, #0]
 800a5dc:	e7ed      	b.n	800a5ba <_free_r+0x22>
 800a5de:	461a      	mov	r2, r3
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	b10b      	cbz	r3, 800a5e8 <_free_r+0x50>
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	d9fa      	bls.n	800a5de <_free_r+0x46>
 800a5e8:	6811      	ldr	r1, [r2, #0]
 800a5ea:	1855      	adds	r5, r2, r1
 800a5ec:	42a5      	cmp	r5, r4
 800a5ee:	d10b      	bne.n	800a608 <_free_r+0x70>
 800a5f0:	6824      	ldr	r4, [r4, #0]
 800a5f2:	4421      	add	r1, r4
 800a5f4:	1854      	adds	r4, r2, r1
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	6011      	str	r1, [r2, #0]
 800a5fa:	d1e0      	bne.n	800a5be <_free_r+0x26>
 800a5fc:	681c      	ldr	r4, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	6053      	str	r3, [r2, #4]
 800a602:	4421      	add	r1, r4
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	e7da      	b.n	800a5be <_free_r+0x26>
 800a608:	d902      	bls.n	800a610 <_free_r+0x78>
 800a60a:	230c      	movs	r3, #12
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	e7d6      	b.n	800a5be <_free_r+0x26>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf04      	itt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	bf04      	itt	eq
 800a620:	1949      	addeq	r1, r1, r5
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	6054      	str	r4, [r2, #4]
 800a626:	e7ca      	b.n	800a5be <_free_r+0x26>
 800a628:	b003      	add	sp, #12
 800a62a:	bd30      	pop	{r4, r5, pc}
 800a62c:	20000ddc 	.word	0x20000ddc

0800a630 <_read_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_read_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f9 fc2c 	bl	8003e9c <_read>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_read_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_read_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000de4 	.word	0x20000de4

0800a654 <_fstat_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_fstat_r+0x20>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	f7f9 fc60 	bl	8003f26 <_fstat>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	d102      	bne.n	800a670 <_fstat_r+0x1c>
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	b103      	cbz	r3, 800a670 <_fstat_r+0x1c>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	20000de4 	.word	0x20000de4

0800a678 <_isatty_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d06      	ldr	r5, [pc, #24]	; (800a694 <_isatty_r+0x1c>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	602b      	str	r3, [r5, #0]
 800a684:	f7f9 fc5f 	bl	8003f46 <_isatty>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_isatty_r+0x1a>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_isatty_r+0x1a>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20000de4 	.word	0x20000de4

0800a698 <_init>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr

0800a6a4 <_fini>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr
